/*
 * CityPay Payment API
 *  Welcome to the CityPay API, a robust HTTP API payment solution designed for seamless server-to-server  transactional processing. Our API facilitates a wide array of payment operations, catering to diverse business needs.  Whether you're integrating Internet payments, handling Mail Order/Telephone Order (MOTO) transactions, managing  Subscriptions with Recurring and Continuous Authority payments, or navigating the complexities of 3-D Secure  authentication, our API is equipped to support your requirements. Additionally, we offer functionalities for  Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids, and Completion processing, alongside the capability  for tokenised payments.  ## Compliance and Security Overview <aside class=\"notice\">   Ensuring the security of payment transactions and compliance with industry standards is paramount. Our API is    designed with stringent security measures and compliance protocols to safeguard sensitive information and meet    the rigorous requirements of Visa, MasterCard, and the PCI Security Standards Council. </aside>  ### Key Compliance and Security Measures  * **TLS Encryption**: All data transmissions must utilise TLS version 1.2 or higher, employing [strong cryptography](#enabled-tls-ciphers). Our infrastructure strictly enforces this requirement to maintain the integrity and confidentiality of data in transit. We conduct regular scans and assessments of our TLS endpoints to identify and mitigate vulnerabilities. * **Data Storage Prohibitions**: Storing sensitive cardholder data (CHD), such as the card security code (CSC) or primary account number (PAN), is strictly prohibited. Our API is designed to minimize your exposure to sensitive data, thereby reducing your compliance burden. * **Data Masking**: For consumer protection and compliance, full card numbers must not be displayed on receipts or any customer-facing materials. Our API automatically masks PANs, displaying only the last four digits to facilitate safe receipt generation. * **Network Scans**: If your application is web-based, regular scans of your hosting environment are mandatory to identify and rectify potential vulnerabilities. This proactive measure is crucial for maintaining a secure and compliant online presence. * **PCI Compliance**: Adherence to PCI DSS standards is not optional; it's a requirement for operating securely and legally in the payments ecosystem. For detailed information on compliance requirements and resources, please visit the PCI Security Standards Council website [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/). * **Request Validation**: Our API includes mechanisms to verify the legitimacy of each request, ensuring it pertains to a valid account and originates from a trusted source. We leverage remote IP address verification alongside sophisticated application firewall technologies to thwart a wide array of common security threats.  ## Getting Started Before integrating with the CityPay API, ensure your application and development practices align with the outlined compliance and security measures. This preparatory step is crucial for a smooth integration process and the long-term success of your payment processing operations.  For further details on API endpoints, request/response formats, and code examples, proceed to the subsequent sections of our documentation. Our aim is to provide you with all the necessary tools and information to integrate our payment processing capabilities seamlessly into your application.  Thank you for choosing CityPay API. We look forward to supporting your payment processing needs with our secure, compliant, and versatile API solution. 
 *
 * Contact: support@citypay.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.citypay.client.api;

import com.citypay.client.ApiException;
import com.citypay.client.model.Acknowledgement;
import com.citypay.client.model.WebHookChannelCreateRequest;
import com.citypay.client.model.WebHookChannelCreateResponse;
import com.citypay.client.model.WebHookChannelDeleteRequest;
import com.citypay.client.model.WebHookSubscriptionRequest;
import com.citypay.client.model.WebHookSubscriptionResponse;
import com.citypay.client.model.WebHookUnsubscribeRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * API tests for WebHooks
 */
@Disabled
public class WebHooksTest {

    private final WebHooks api = new WebHooks();

    /**
     * Web Hook Channel Create Request
     *
     * A WebHookChannel is required to establish a connection with our event notification system. The channel serves as the communication link between your application and the events generated by the payment gateway. When you register a WebHookChannel, you&#39;re defining the endpoint where we will deliver notifications, such as payment events.  The WebHookChannel encapsulates important configuration details like the endpoint type (e.g., HTTP), the client ID, and security parameters. However, the channel itself does not specify which events will be sent but should be considered as the pipeline for receiving those events. After registering a channel, you can then configure triggers separately using a subscription request to define which specific payment events should flow through this channel. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webHookChannelCreateRequestTest() throws ApiException {
        WebHookChannelCreateRequest webHookChannelCreateRequest = null;
        WebHookChannelCreateResponse response = api.webHookChannelCreateRequest(webHookChannelCreateRequest);
        // TODO: test validations
    }

    /**
     * Web Hook Channel Delete Request
     *
     * The WebHookChannelDeleteRequest allows you to remove an existing WebHookChannel from the event notification system.  By specifying the channel ID, you can deactivate the communication link between your application and the payment  gatewayâ€™s event system. Deleting a channel effectively halts any further notifications being sent to the associated  endpoint, ensuring that no additional events are processed through that channel. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webHookChannelDeleteRequestTest() throws ApiException {
        WebHookChannelDeleteRequest webHookChannelDeleteRequest = null;
        Acknowledgement response = api.webHookChannelDeleteRequest(webHookChannelDeleteRequest);
        // TODO: test validations
    }

    /**
     * Web Hook Subscription Request
     *
     * The WebHookSubscriptionRequest is used to define and activate event triggers for an existing WebHookChannel. This  request specifies the events or conditions that your application wants to be notified about, ensuring that only  relevant event data flows through the channel. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webHookSubscriptionRequestTest() throws ApiException {
        WebHookSubscriptionRequest webHookSubscriptionRequest = null;
        WebHookSubscriptionResponse response = api.webHookSubscriptionRequest(webHookSubscriptionRequest);
        // TODO: test validations
    }

    /**
     * Web Hook Unsubscribe Request
     *
     * The WebHookUnsubscribeRequest is used to remove an existing webhook subscription from the system. This allows clients  to stop receiving event notifications for specific webhook subscriptions that are no longer needed. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webHookUnsubscribeRequestTest() throws ApiException {
        WebHookUnsubscribeRequest webHookUnsubscribeRequest = null;
        Acknowledgement response = api.webHookUnsubscribeRequest(webHookUnsubscribeRequest);
        // TODO: test validations
    }

}
