/*
 * CityPay Payment API
 *  This CityPay API is a HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokinsed payments using Card Holder Accounts.  ## Compliance and Security <aside class=\"notice\">   Before we begin a reminder that your application will need to adhere to PCI-DSS standards to operate safely   and to meet requirements set out by Visa and MasterCard and the PCI Security Standards Council including: </aside>  * Data must be collected using TLS version 1.2 using [strong cryptography](#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive card holder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities. 
 *
 * Contact: support@citypay.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.citypay.client.api;

import com.citypay.client.ApiException;
import com.citypay.client.model.BatchReportRequest;
import com.citypay.client.model.BatchReportResponseModel;
import com.citypay.client.model.CheckBatchStatus;
import com.citypay.client.model.CheckBatchStatusResponse;
import com.citypay.client.model.Error;
import com.citypay.client.model.ProcessBatchRequest;
import com.citypay.client.model.ProcessBatchResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for BatchProcessingApi
 */
@Ignore
public class BatchProcessingApiTest {

    private final BatchProcessingApi api = new BatchProcessingApi();

    
    /**
     * Batch Process Request
     *
     * A batch process request is used to start the batch process workflow by uploading batch data and initialising a new batch for processing. Once validated the batch will be queued for processing and further updates can be received by a subsequent call to retrieve the batch status. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void batchProcessRequestTest() throws ApiException {
        ProcessBatchRequest processBatchRequest = null;
        ProcessBatchResponse response = api.batchProcessRequest(processBatchRequest);

        // TODO: test validations
    }
    
    /**
     * CheckBatchStatus
     *
     * The operation is used to retrieve the status of a batch process.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void checkBatchStatusRequestTest() throws ApiException {
        CheckBatchStatus checkBatchStatus = null;
        CheckBatchStatusResponse response = api.checkBatchStatusRequest(checkBatchStatus);

        // TODO: test validations
    }
    
    /**
     * BatchReportRequest
     *
     * The operation is used to retrieve a report of the result of a batch process.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBatchReportRequestTest() throws ApiException {
        BatchReportRequest batchReportRequest = null;
        BatchReportResponseModel response = api.getBatchReportRequest(batchReportRequest);

        // TODO: test validations
    }
    
}
