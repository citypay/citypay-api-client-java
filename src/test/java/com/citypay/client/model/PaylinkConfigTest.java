/*
 * CityPay Payment API
 *  This CityPay API is a HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokinsed payments using Card Holder Accounts.  ## Compliance and Security Your application will need to adhere to PCI-DSS standards to operate safely and to meet requirements set out by  Visa and MasterCard and the PCI Security Standards Council. These include  * Data must be collected using TLS version 1.2 using [strong cryptography](#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive card holder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities. 
 *
 * Contact: support@citypay.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.citypay.client.model;

import com.citypay.client.model.PaylinkCustomParam;
import com.citypay.client.model.PaylinkFieldGuardModel;
import com.citypay.client.model.PaylinkPartPayments;
import com.citypay.client.model.PaylinkUI;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;


/**
 * Model tests for PaylinkConfig
 */
public class PaylinkConfigTest {
    private final PaylinkConfig model = new PaylinkConfig();

    /**
     * Model tests for PaylinkConfig
     */
    @Test
    public void testPaylinkConfig() {
        // TODO: test PaylinkConfig
    }

    /**
     * Test the property 'acsMode'
     */
    @Test
    public void acsModeTest() {
        // TODO: test acsMode
    }

    /**
     * Test the property 'customParams'
     */
    @Test
    public void customParamsTest() {
        // TODO: test customParams
    }

    /**
     * Test the property 'descriptor'
     */
    @Test
    public void descriptorTest() {
        // TODO: test descriptor
    }

    /**
     * Test the property 'expireIn'
     */
    @Test
    public void expireInTest() {
        // TODO: test expireIn
    }

    /**
     * Test the property 'fieldGuard'
     */
    @Test
    public void fieldGuardTest() {
        // TODO: test fieldGuard
    }

    /**
     * Test the property 'lockParams'
     */
    @Test
    public void lockParamsTest() {
        // TODO: test lockParams
    }

    /**
     * Test the property 'merchLogo'
     */
    @Test
    public void merchLogoTest() {
        // TODO: test merchLogo
    }

    /**
     * Test the property 'merchTerms'
     */
    @Test
    public void merchTermsTest() {
        // TODO: test merchTerms
    }

    /**
     * Test the property 'options'
     */
    @Test
    public void optionsTest() {
        // TODO: test options
    }

    /**
     * Test the property 'partPayments'
     */
    @Test
    public void partPaymentsTest() {
        // TODO: test partPayments
    }

    /**
     * Test the property 'passThroughData'
     */
    @Test
    public void passThroughDataTest() {
        // TODO: test passThroughData
    }

    /**
     * Test the property 'passThroughHeaders'
     */
    @Test
    public void passThroughHeadersTest() {
        // TODO: test passThroughHeaders
    }

    /**
     * Test the property 'postback'
     */
    @Test
    public void postbackTest() {
        // TODO: test postback
    }

    /**
     * Test the property 'postbackPassword'
     */
    @Test
    public void postbackPasswordTest() {
        // TODO: test postbackPassword
    }

    /**
     * Test the property 'postbackPolicy'
     */
    @Test
    public void postbackPolicyTest() {
        // TODO: test postbackPolicy
    }

    /**
     * Test the property 'postbackUsername'
     */
    @Test
    public void postbackUsernameTest() {
        // TODO: test postbackUsername
    }

    /**
     * Test the property 'redirectDelay'
     */
    @Test
    public void redirectDelayTest() {
        // TODO: test redirectDelay
    }

    /**
     * Test the property 'redirectFailure'
     */
    @Test
    public void redirectFailureTest() {
        // TODO: test redirectFailure
    }

    /**
     * Test the property 'redirectSuccess'
     */
    @Test
    public void redirectSuccessTest() {
        // TODO: test redirectSuccess
    }

    /**
     * Test the property 'renderer'
     */
    @Test
    public void rendererTest() {
        // TODO: test renderer
    }

    /**
     * Test the property 'returnParams'
     */
    @Test
    public void returnParamsTest() {
        // TODO: test returnParams
    }

    /**
     * Test the property 'ui'
     */
    @Test
    public void uiTest() {
        // TODO: test ui
    }

}
