/*
 * CityPay Payment API
 *  This CityPay API is a HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokinsed payments using Card Holder Accounts.  ## Compliance and Security <aside class=\"notice\">   Before we begin a reminder that your application will need to adhere to PCI-DSS standards to operate safely   and to meet requirements set out by Visa and MasterCard and the PCI Security Standards Council including: </aside>  * Data must be collected using TLS version 1.2 using [strong cryptography](#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive card holder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities. 
 *
 * Contact: support@citypay.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.citypay.client.model;

import com.citypay.client.JSON;
import com.google.gson.reflect.TypeToken;

import org.junit.Test;

import java.time.OffsetDateTime;

import static org.junit.Assert.assertEquals;

/**
 * Model tests for Decision
 */
public class DecisionTest {
    private final Decision decision = new JSON().deserialize("{\n" +
            "    \"AuthResponse\": {\n" +
            "        \"amount\": 5500,\n" +
            "        \"atrn\": \"atrn1\",\n" +
            "        \"atsd\": \"a\",\n" +
            "        \"authcode\": \"12345\",\n" +
            "        \"authen_result\": \"R\",\n" +
            "        \"authorised\": true,\n" +
            "        \"avs_result\": \"G\",\n" +
            "        \"bin_commercial\": false,\n" +
            "        \"bin_debit\": false,\n" +
            "        \"bin_description\": \"bin_desc\",\n" +
            "        \"cavv\": \"cavvvvvvvvvvvvv\",\n" +
            "        \"context\": \"20200812075906AAAGV4\",\n" +
            "        \"csc_result\": \"C\",\n" +
            "        \"currency\": \"GBP\",\n" +
            "        \"datetime\": \"2020-08-12T07:59:11Z\",\n" +
            "        \"eci\": \"0\",\n" +
            "        \"identifier\": \"ident1\",\n" +
            "        \"live\": true,\n" +
            "        \"maskedpan\": \"400000******0002\",\n" +
            "        \"merchantid\": 12345,\n" +
            "        \"result\": 1,\n" +
            "        \"result_code\": \"000\",\n" +
            "        \"result_message\": \"System: Accepted Transaction\",\n" +
            "        \"scheme\": \"VISA_BUSINESS\",\n" +
            "        \"sha256\": \"abcdefg\",\n" +
            "        \"trans_status\": \"P\",\n" +
            "        \"transno\": 74875\n" +
            "    }\n" +
            "}", new TypeToken<Decision>(){}.getType());

    /**
     * Model tests for Decision
     */
    @Test
    public void testDecision() {
        assert decision.getAuthResponse()!=null;
        assert decision.getRequestChallenged()==null;
    }

    /**
     * Test the property 'authentication'
     */
    @Test
    public void authenticationTest() {
        // TODO: test authentication
    }

    /**
     * Test the property 'challenge'
     */
    @Test
    public void challengeTest() {
        // TODO: test challenge
    }

    /**
     * Test the property 'result'
     */
    @Test
    public void resultTest() {
        AuthResponse result = decision.getAuthResponse();
        assert result != null;
        assertEquals(Integer.valueOf(5500), result.getAmount());
        assertEquals("atrn1", result.getAtrn());
        assertEquals("a", result.getAtsd());
        assertEquals("12345", result.getAuthcode());
        assertEquals("R", result.getAuthenResult());
        assertEquals(true, result.isAuthorised());
        assertEquals("G", result.getAvsResult());
        assertEquals(false, result.isBinCommercial());
        assertEquals(false, result.isBinDebit());
        assertEquals("bin_desc", result.getBinDescription());
        assertEquals("cavvvvvvvvvvvvv", result.getCavv());
        assertEquals("20200812075906AAAGV4", result.getContext());
        assertEquals("C", result.getCscResult());
        assertEquals("GBP", result.getCurrency());
        assertEquals(OffsetDateTime.parse("2020-08-12T07:59:11Z"), result.getDatetime());
        assertEquals("0", result.getEci());
        assertEquals("ident1", result.getIdentifier());
        assertEquals(true, result.isLive());
        assertEquals("400000******0002", result.getMaskedpan());
        assertEquals(Integer.valueOf(12345), result.getMerchantid());
        assertEquals(Integer.valueOf(1), result.getResult());
        assertEquals("000", result.getResultCode());
        assertEquals("System: Accepted Transaction", result.getResultMessage());
        assertEquals("VISA_BUSINESS", result.getScheme());
        assertEquals("abcdefg", result.getSha256());
        assertEquals("P", result.getTransStatus());
        assertEquals(Integer.valueOf(74875), result.getTransno());
    }
}
