/*
 * CityPay Payment API
 *  This CityPay API is a HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokinsed payments using Card Holder Accounts.  ## Compliance and Security <aside class=\"notice\">   Before we begin a reminder that your application will need to adhere to PCI-DSS standards to operate safely   and to meet requirements set out by Visa and MasterCard and the PCI Security Standards Council including: </aside>  * Data must be collected using TLS version 1.2 using [strong cryptography](#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive card holder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities.
 *
 * Contact: support@citypay.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.citypay.client.model;

import com.citypay.client.JSON;
import com.google.gson.reflect.TypeToken;
import java.time.OffsetDateTime;
import org.junit.Test;

import static org.junit.Assert.*;

/**
 * Model tests for CardHolderAccount
 */
public class CardHolderAccountTest {
    private final CardHolderAccount cha = new JSON().deserialize("{\n" +
            "            \"account_id\": \"abc123\",\n" +
            "            \"cards\": [{\n" +
            "                          \"bin_commercial\": false,\n" +
            "                          \"bin_corporate\": false,\n" +
            "                          \"bin_country_issued\": \"GBR\",\n" +
            "                          \"bin_currency\": \"GBP\",\n" +
            "                          \"bin_description\": \"Visa Classic\",\n" +
            "                          \"bin_eu\": false,\n" +
            "                          \"card_id\": \"2U1XV3PJSeUXFNzXidACn2TyCzAK\",\n" +
            "                          \"card_status\": \"ACTIVE\",\n" +
            "                          \"default\": true,\n" +
            "                          \"expmonth\": 7,\n" +
            "                          \"expyear\": 2022,\n" +
            "                          \"label\": \"TestVisa/0002\",\n" +
            "                          \"label2\": \"TestVisa/0002,Exp:7/2022\",\n" +
            "                          \"scheme\": \"TestVisa\",\n" +
            "                          \"token\": \"ctPCzxq4WxEwWbkG7whRPLRCG27vYFNzsEDNihYmDwqsBc5QEXnFRvq2j5oRyb56ErRVEQaBN7PFMEDtjQQXDQpfxKkp3AxbyeGo61RhKBjFTFegaP4LBZUxFZimsXW8Deae9VyhWSgS2o8AXzTJU9UP3bo8kRcpataxuH3fJj3JHDnyeZt\"\n" +
            "                      }],\n" +
            "            \"contact\": {\n" +
            "                \"address1\": \"7 Esplanade\",\n" +
            "                \"address2\": \"\",\n" +
            "                \"address3\": \"\",\n" +
            "                \"area\": \"St Helier\",\n" +
            "                \"company\": \"CityPay Ltd\",\n" +
            "                \"country\": \"JE\",\n" +
            "                \"email\": \"support@citypay.com\",\n" +
            "                \"firstname\": \"Joe\",\n" +
            "                \"lastname\": \"Wicks\",\n" +
            "                \"mobile_no\": \"077112123456\",\n" +
            "                \"postcode\": \"JE2 3QA\",\n" +
            "                \"telephone_no\": \"+4415341234567\",\n" +
            "                \"title\": \"Mr\"},\n" +
            "            \"date_created\": \"2020-08-01T09:15:24Z\",\n" +
            "            \"default_card_id\": \"2U1XV3PJSeUXFNzXidACn2TyCzAK\",\n" +
            "            \"default_card_index\": 0,\n" +
            "            \"status\": \"ACTIVE\",\n" +
            "            \"unique_id\": \"Ew3BKeWNdL3qKQU7XK7Sbt2eAL5WFW4AfoASDSA\"\n" +
            "        }", new TypeToken<CardHolderAccount>() {}.getType());

    /**
     * Model tests for CardHolderAccount
     */
    @Test
    public void testCardHolderAccount() {
        assert cha != null;
    }

    /**
     * Test the property 'accountId'
     */
    @Test
    public void accountIdTest() {
        assertEquals("abc123", cha.getAccountId());
    }

    /**
     * Test the property 'cards'
     */
    @Test
    public void cardsTest() {
        assert cha.getCards() != null;
        assertFalse(cha.getCards().get(0).isBinCommercial());
        assertFalse(cha.getCards().get(0).isBinCorporate());
        assertEquals("GBR", cha.getCards().get(0).getBinCountryIssued());
        assertEquals("GBP", cha.getCards().get(0).getBinCurrency());
        assertEquals("Visa Classic", cha.getCards().get(0).getBinDescription());
        assertFalse(cha.getCards().get(0).isBinEu());
        assertEquals("2U1XV3PJSeUXFNzXidACn2TyCzAK", cha.getCards().get(0).getCardId());
        assertEquals("ACTIVE", cha.getCards().get(0).getCardStatus());
        assertTrue(cha.getCards().get(0).isDefault());
        assertEquals(Integer.valueOf(7), cha.getCards().get(0).getExpmonth());
        assertEquals(Integer.valueOf(2022), cha.getCards().get(0).getExpyear());
        assertEquals("TestVisa/0002", cha.getCards().get(0).getLabel());
        assertEquals("TestVisa/0002,Exp:7/2022", cha.getCards().get(0).getLabel2());
        assertEquals("TestVisa", cha.getCards().get(0).getScheme());
        assertEquals("ctPCzxq4WxEwWbkG7whRPLRCG27vYFNzsEDNihYmDwqsBc5QEXnFRvq2j5oRyb56ErRVEQaBN7PFMEDtjQQXDQpfxKkp3AxbyeGo61RhKBjFTFegaP4LBZUxFZimsXW8Deae9VyhWSgS2o8AXzTJU9UP3bo8kRcpataxuH3fJj3JHDnyeZt", cha.getCards().get(0).getToken());
    }

    /**
     * Test the property 'contact'
     */
    @Test
    public void contactTest() {
        assert cha.getContact() != null;
        assertEquals("7 Esplanade", cha.getContact().getAddress1());
        assertEquals("", cha.getContact().getAddress2());
        assertEquals("", cha.getContact().getAddress3());
        assertEquals("St Helier", cha.getContact().getArea());
        assertEquals("CityPay Ltd", cha.getContact().getCompany());
        assertEquals("JE", cha.getContact().getCountry());
        assertEquals("support@citypay.com", cha.getContact().getEmail());
        assertEquals("Joe", cha.getContact().getFirstname());
        assertEquals("Wicks", cha.getContact().getLastname());
        assertEquals("077112123456", cha.getContact().getMobileNo());
        assertEquals("JE2 3QA", cha.getContact().getPostcode());
        assertEquals("+4415341234567", cha.getContact().getTelephoneNo());
        assertEquals("Mr", cha.getContact().getTitle());
    }

    /**
     * Test the property 'dateCreated'
     */
    @Test
    public void dateCreatedTest() {
        assertEquals(OffsetDateTime.parse("2020-08-01T09:15:24Z"), cha.getDateCreated());
    }

    /**
     * Test the property 'defaultCardId'
     */
    @Test
    public void defaultCardIdTest() {
        assertEquals("2U1XV3PJSeUXFNzXidACn2TyCzAK", cha.getDefaultCardId());
    }

    /**
     * Test the property 'defaultCardIndex'
     */
    @Test
    public void defaultCardIndexTest() {
        assertEquals(Integer.valueOf(0), cha.getDefaultCardIndex());
    }

    /**
     * Test the property 'status'
     */
    @Test
    public void statusTest() {
        assertEquals("ACTIVE", cha.getStatus());
    }

    /**
     * Test the property 'uniqueId'
     */
    @Test
    public void uniqueIdTest() {
        assertEquals("Ew3BKeWNdL3qKQU7XK7Sbt2eAL5WFW4AfoASDSA", cha.getUniqueId());
    }

}
