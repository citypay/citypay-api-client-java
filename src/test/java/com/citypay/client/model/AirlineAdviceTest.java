/*
 * CityPay Payment API
 *  This CityPay API is a HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokinsed payments using Card Holder Accounts.  ## Compliance and Security <aside class=\"notice\">   Before we begin a reminder that your application will need to adhere to PCI-DSS standards to operate safely   and to meet requirements set out by Visa and MasterCard and the PCI Security Standards Council including: </aside>  * Data must be collected using TLS version 1.2 using [strong cryptography](#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive card holder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities. 
 *
 * Contact: support@citypay.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.citypay.client.model;

import com.citypay.client.model.AirlineSegment;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.LocalDate;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;


/**
 * Model tests for AirlineAdvice
 */
public class AirlineAdviceTest {
    private final AirlineAdvice model = new AirlineAdvice();

    /**
     * Model tests for AirlineAdvice
     */
    @Test
    public void testAirlineAdvice() {
        // TODO: test AirlineAdvice
    }

    /**
     * Test the property 'carrierName'
     */
    @Test
    public void carrierNameTest() {
        // TODO: test carrierName
    }

    /**
     * Test the property 'conjunctionTicketIndicator'
     */
    @Test
    public void conjunctionTicketIndicatorTest() {
        // TODO: test conjunctionTicketIndicator
    }

    /**
     * Test the property 'eticketIndicator'
     */
    @Test
    public void eticketIndicatorTest() {
        // TODO: test eticketIndicator
    }

    /**
     * Test the property 'noAirSegments'
     */
    @Test
    public void noAirSegmentsTest() {
        // TODO: test noAirSegments
    }

    /**
     * Test the property 'numberInParty'
     */
    @Test
    public void numberInPartyTest() {
        // TODO: test numberInParty
    }

    /**
     * Test the property 'originalTicketNo'
     */
    @Test
    public void originalTicketNoTest() {
        // TODO: test originalTicketNo
    }

    /**
     * Test the property 'passengerName'
     */
    @Test
    public void passengerNameTest() {
        // TODO: test passengerName
    }

    /**
     * Test the property 'segment1'
     */
    @Test
    public void segment1Test() {
        // TODO: test segment1
    }

    /**
     * Test the property 'segment2'
     */
    @Test
    public void segment2Test() {
        // TODO: test segment2
    }

    /**
     * Test the property 'segment3'
     */
    @Test
    public void segment3Test() {
        // TODO: test segment3
    }

    /**
     * Test the property 'segment4'
     */
    @Test
    public void segment4Test() {
        // TODO: test segment4
    }

    /**
     * Test the property 'ticketIssueCity'
     */
    @Test
    public void ticketIssueCityTest() {
        // TODO: test ticketIssueCity
    }

    /**
     * Test the property 'ticketIssueDate'
     */
    @Test
    public void ticketIssueDateTest() {
        // TODO: test ticketIssueDate
    }

    /**
     * Test the property 'ticketIssueName'
     */
    @Test
    public void ticketIssueNameTest() {
        // TODO: test ticketIssueName
    }

    /**
     * Test the property 'ticketNo'
     */
    @Test
    public void ticketNoTest() {
        // TODO: test ticketNo
    }

    /**
     * Test the property 'transactionType'
     */
    @Test
    public void transactionTypeTest() {
        // TODO: test transactionType
    }

}
