/*
 * CityPay Payment API
 *  This CityPay API is a HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokinsed payments using Card Holder Accounts.  ## Compliance and Security <aside class=\"notice\">   Before we begin a reminder that your application will need to adhere to PCI-DSS standards to operate safely   and to meet requirements set out by Visa and MasterCard and the PCI Security Standards Council including: </aside>  * Data must be collected using TLS version 1.2 using [strong cryptography](#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive card holder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities. 
 *
 * Contact: support@citypay.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.citypay.client.model;

import com.citypay.client.JSON;
import com.google.gson.reflect.TypeToken;
import org.junit.jupiter.api.Test;

import java.time.OffsetDateTime;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.Assert.assertNull;


/**
 * Model tests for AuthReferences
 */
public class AuthReferencesTest {

    private final AuthReferences authReferences = new JSON().deserialize("{\"auths\": [\n" +
            "          {\n" +
            "              \"amount\": \"0.12\",\n" +
            "              \"amount_value\": 12,\n" +
            "              \"atrn\": null,\n" +
            "              \"authcode\": \"A12345\",\n" +
            "              \"batchno\": null,\n" +
            "              \"currency\": \"GBP\",\n" +
            "              \"datetime\": \"2020-07-21T15:55:04Z\",\n" +
            "              \"identifier\": \"TestingAPI\",\n" +
            "              \"maskedpan\": \"400000******0000\",\n" +
            "              \"merchantid\": 12345678,\n" +
            "              \"result\": \"Accepted\",\n" +
            "              \"trans_status\": \"O\",\n" +
            "              \"trans_type\": \"S\",\n" +
            "              \"transno\": 88\n" +
            "          }\n" +
            "      ]\n" +
            "} ", new TypeToken<AuthReferences>(){}.getType());

    /**
     * Model tests for AuthReferences
     */
    @Test
    public void testAuthReferences() {
        assert authReferences.getAuths() != null;
        assertEquals("0.12", authReferences.getAuths().get(0).getAmount());
        assertEquals(Integer.valueOf(12), authReferences.getAuths().get(0).getAmountValue());
        assertNull(authReferences.getAuths().get(0).getAtrn());
        assertEquals("A12345", authReferences.getAuths().get(0).getAuthcode());
        assertNull(authReferences.getAuths().get(0).getBatchno());
        assertEquals("GBP", authReferences.getAuths().get(0).getCurrency());
        assertEquals(OffsetDateTime.parse("2020-07-21T15:55:04Z"), authReferences.getAuths().get(0).getDatetime());
        assertEquals("TestingAPI", authReferences.getAuths().get(0).getIdentifier());
        assertEquals("400000******0000", authReferences.getAuths().get(0).getMaskedpan());
        assertEquals(Integer.valueOf(12345678), authReferences.getAuths().get(0).getMerchantid());
        assertEquals("Accepted", authReferences.getAuths().get(0).getResult());
        assertEquals("O", authReferences.getAuths().get(0).getTransStatus());
        assertEquals("S", authReferences.getAuths().get(0).getTransType());
        assertEquals(Integer.valueOf(88), authReferences.getAuths().get(0).getTransno());
    }
}
