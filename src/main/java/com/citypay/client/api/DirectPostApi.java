/*
 * CityPay Payment API
 *  Welcome to the CityPay API, a robust HTTP API payment solution designed for seamless server-to-server  transactional processing. Our API facilitates a wide array of payment operations, catering to diverse business needs.  Whether you're integrating Internet payments, handling Mail Order/Telephone Order (MOTO) transactions, managing  Subscriptions with Recurring and Continuous Authority payments, or navigating the complexities of 3-D Secure  authentication, our API is equipped to support your requirements. Additionally, we offer functionalities for  Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids, and Completion processing, alongside the capability  for tokenised payments.  ## Compliance and Security Overview <aside class=\"notice\">   Ensuring the security of payment transactions and compliance with industry standards is paramount. Our API is    designed with stringent security measures and compliance protocols to safeguard sensitive information and meet    the rigorous requirements of Visa, MasterCard, and the PCI Security Standards Council. </aside>  ### Key Compliance and Security Measures  * **TLS Encryption**: All data transmissions must utilise TLS version 1.2 or higher, employing [strong cryptography](#enabled-tls-ciphers). Our infrastructure strictly enforces this requirement to maintain the integrity and confidentiality of data in transit. We conduct regular scans and assessments of our TLS endpoints to identify and mitigate vulnerabilities. * **Data Storage Prohibitions**: Storing sensitive cardholder data (CHD), such as the card security code (CSC) or primary account number (PAN), is strictly prohibited. Our API is designed to minimize your exposure to sensitive data, thereby reducing your compliance burden. * **Data Masking**: For consumer protection and compliance, full card numbers must not be displayed on receipts or any customer-facing materials. Our API automatically masks PANs, displaying only the last four digits to facilitate safe receipt generation. * **Network Scans**: If your application is web-based, regular scans of your hosting environment are mandatory to identify and rectify potential vulnerabilities. This proactive measure is crucial for maintaining a secure and compliant online presence. * **PCI Compliance**: Adherence to PCI DSS standards is not optional; it's a requirement for operating securely and legally in the payments ecosystem. For detailed information on compliance requirements and resources, please visit the PCI Security Standards Council website [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/). * **Request Validation**: Our API includes mechanisms to verify the legitimacy of each request, ensuring it pertains to a valid account and originates from a trusted source. We leverage remote IP address verification alongside sophisticated application firewall technologies to thwart a wide array of common security threats.  ## Getting Started Before integrating with the CityPay API, ensure your application and development practices align with the outlined compliance and security measures. This preparatory step is crucial for a smooth integration process and the long-term success of your payment processing operations.  For further details on API endpoints, request/response formats, and code examples, proceed to the subsequent sections of our documentation. Our aim is to provide you with all the necessary tools and information to integrate our payment processing capabilities seamlessly into your application.  Thank you for choosing CityPay API. We look forward to supporting your payment processing needs with our secure, compliant, and versatile API solution. 
 *
 * Contact: support@citypay.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.citypay.client.api;

import com.citypay.client.ApiCallback;
import com.citypay.client.ApiClient;
import com.citypay.client.ApiException;
import com.citypay.client.ApiResponse;
import com.citypay.client.Configuration;
import com.citypay.client.Pair;
import com.citypay.client.ProgressRequestBody;
import com.citypay.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.citypay.client.model.AuthResponse;
import com.citypay.client.model.DirectPostRequest;
import com.citypay.client.model.DirectTokenAuthRequest;
import com.citypay.client.model.Error;
import com.citypay.client.model.TokenisationResponseModel;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DirectPostApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DirectPostApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DirectPostApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for directCResAuthRequest
     * @param uuid An identifier used to track the CReq/CRes cycle. (required)
     * @param cres The CRES from the ACS. (optional)
     * @param threeDSSessionData The session data from the ACS. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A result of a successful tokenisation or authorisation process if called via an XHR method. </td><td>  -  </td></tr>
        <tr><td> 303 </td><td> Redirect. A result of a successful tokenisation or authorisation process, redirecting to the success URL. </td><td>  -  </td></tr>
        <tr><td> 307 </td><td> Redirect. A result of a non-successful tokenisation or authorisation process, redirecting to the failure URL. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. No domain key has been provided and is required for this operation. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The domain key was provided and understood but is either incorrect or does not have permission to access the account provided on the request. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable. Should the incoming data not be validly determined. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Bad Request. Should the incoming data not be validly determined and an error code results. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error. Server Error. The server was unable to complete the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call directCResAuthRequestCall(@javax.annotation.Nonnull String uuid, @javax.annotation.Nullable String cres, @javax.annotation.Nullable String threeDSSessionData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/direct/cres/auth/{uuid}"
            .replace("{" + "uuid" + "}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cres != null) {
            localVarFormParams.put("cres", cres);
        }

        if (threeDSSessionData != null) {
            localVarFormParams.put("threeDSSessionData", threeDSSessionData);
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "application/x-www-form-urlencoded"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call directCResAuthRequestValidateBeforeCall(@javax.annotation.Nonnull String uuid, @javax.annotation.Nullable String cres, @javax.annotation.Nullable String threeDSSessionData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling directCResAuthRequest(Async)");
        }

        return directCResAuthRequestCall(uuid, cres, threeDSSessionData, _callback);

    }

    /**
     * Handles a CRes response from ACS, returning back the result of authorisation
     * Used to post from an ACS during a ThreeDSecure direct flow process. The endpoint requires a valid &#x60;threeDSSessionData&#x60; value which defines the unique transaction through its workflow. This endpoint may be used by merchants wishing to perform a &#x60;Direct Post&#x60; integration who wish to handle the challenge flow themselves. 
     * @param uuid An identifier used to track the CReq/CRes cycle. (required)
     * @param cres The CRES from the ACS. (optional)
     * @param threeDSSessionData The session data from the ACS. (optional)
     * @return AuthResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A result of a successful tokenisation or authorisation process if called via an XHR method. </td><td>  -  </td></tr>
        <tr><td> 303 </td><td> Redirect. A result of a successful tokenisation or authorisation process, redirecting to the success URL. </td><td>  -  </td></tr>
        <tr><td> 307 </td><td> Redirect. A result of a non-successful tokenisation or authorisation process, redirecting to the failure URL. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. No domain key has been provided and is required for this operation. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The domain key was provided and understood but is either incorrect or does not have permission to access the account provided on the request. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable. Should the incoming data not be validly determined. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Bad Request. Should the incoming data not be validly determined and an error code results. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error. Server Error. The server was unable to complete the request. </td><td>  -  </td></tr>
     </table>
     */
    public AuthResponse directCResAuthRequest(@javax.annotation.Nonnull String uuid, @javax.annotation.Nullable String cres, @javax.annotation.Nullable String threeDSSessionData) throws ApiException {
        ApiResponse<AuthResponse> localVarResp = directCResAuthRequestWithHttpInfo(uuid, cres, threeDSSessionData);
        return localVarResp.getData();
    }

    /**
     * Handles a CRes response from ACS, returning back the result of authorisation
     * Used to post from an ACS during a ThreeDSecure direct flow process. The endpoint requires a valid &#x60;threeDSSessionData&#x60; value which defines the unique transaction through its workflow. This endpoint may be used by merchants wishing to perform a &#x60;Direct Post&#x60; integration who wish to handle the challenge flow themselves. 
     * @param uuid An identifier used to track the CReq/CRes cycle. (required)
     * @param cres The CRES from the ACS. (optional)
     * @param threeDSSessionData The session data from the ACS. (optional)
     * @return ApiResponse&lt;AuthResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A result of a successful tokenisation or authorisation process if called via an XHR method. </td><td>  -  </td></tr>
        <tr><td> 303 </td><td> Redirect. A result of a successful tokenisation or authorisation process, redirecting to the success URL. </td><td>  -  </td></tr>
        <tr><td> 307 </td><td> Redirect. A result of a non-successful tokenisation or authorisation process, redirecting to the failure URL. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. No domain key has been provided and is required for this operation. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The domain key was provided and understood but is either incorrect or does not have permission to access the account provided on the request. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable. Should the incoming data not be validly determined. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Bad Request. Should the incoming data not be validly determined and an error code results. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error. Server Error. The server was unable to complete the request. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthResponse> directCResAuthRequestWithHttpInfo(@javax.annotation.Nonnull String uuid, @javax.annotation.Nullable String cres, @javax.annotation.Nullable String threeDSSessionData) throws ApiException {
        okhttp3.Call localVarCall = directCResAuthRequestValidateBeforeCall(uuid, cres, threeDSSessionData, null);
        Type localVarReturnType = new TypeToken<AuthResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Handles a CRes response from ACS, returning back the result of authorisation (asynchronously)
     * Used to post from an ACS during a ThreeDSecure direct flow process. The endpoint requires a valid &#x60;threeDSSessionData&#x60; value which defines the unique transaction through its workflow. This endpoint may be used by merchants wishing to perform a &#x60;Direct Post&#x60; integration who wish to handle the challenge flow themselves. 
     * @param uuid An identifier used to track the CReq/CRes cycle. (required)
     * @param cres The CRES from the ACS. (optional)
     * @param threeDSSessionData The session data from the ACS. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A result of a successful tokenisation or authorisation process if called via an XHR method. </td><td>  -  </td></tr>
        <tr><td> 303 </td><td> Redirect. A result of a successful tokenisation or authorisation process, redirecting to the success URL. </td><td>  -  </td></tr>
        <tr><td> 307 </td><td> Redirect. A result of a non-successful tokenisation or authorisation process, redirecting to the failure URL. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. No domain key has been provided and is required for this operation. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The domain key was provided and understood but is either incorrect or does not have permission to access the account provided on the request. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable. Should the incoming data not be validly determined. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Bad Request. Should the incoming data not be validly determined and an error code results. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error. Server Error. The server was unable to complete the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call directCResAuthRequestAsync(@javax.annotation.Nonnull String uuid, @javax.annotation.Nullable String cres, @javax.annotation.Nullable String threeDSSessionData, final ApiCallback<AuthResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = directCResAuthRequestValidateBeforeCall(uuid, cres, threeDSSessionData, _callback);
        Type localVarReturnType = new TypeToken<AuthResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for directCResTokeniseRequest
     * @param uuid An identifier used to track the CReq/CRes cycle. (required)
     * @param cres The CRES from the ACS. (optional)
     * @param threeDSSessionData The session data from the ACS. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A result of a successful tokenisation or authorisation process if called via an XHR method. </td><td>  -  </td></tr>
        <tr><td> 303 </td><td> Redirect. A result of a successful tokenisation or authorisation process, redirecting to the success URL. </td><td>  -  </td></tr>
        <tr><td> 307 </td><td> Redirect. A result of a non-successful tokenisation or authorisation process, redirecting to the failure URL. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. No domain key has been provided and is required for this operation. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The domain key was provided and understood but is either incorrect or does not have permission to access the account provided on the request. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable. Should the incoming data not be validly determined. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Bad Request. Should the incoming data not be validly determined and an error code results. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error. Server Error. The server was unable to complete the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call directCResTokeniseRequestCall(@javax.annotation.Nonnull String uuid, @javax.annotation.Nullable String cres, @javax.annotation.Nullable String threeDSSessionData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/direct/cres/tokenise/{uuid}"
            .replace("{" + "uuid" + "}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cres != null) {
            localVarFormParams.put("cres", cres);
        }

        if (threeDSSessionData != null) {
            localVarFormParams.put("threeDSSessionData", threeDSSessionData);
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "application/x-www-form-urlencoded"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call directCResTokeniseRequestValidateBeforeCall(@javax.annotation.Nonnull String uuid, @javax.annotation.Nullable String cres, @javax.annotation.Nullable String threeDSSessionData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling directCResTokeniseRequest(Async)");
        }

        return directCResTokeniseRequestCall(uuid, cres, threeDSSessionData, _callback);

    }

    /**
     * Handles a CRes response from ACS, returning back a token for future authorisation
     * Used to post from an ACS during a ThreeDSecure direct flow process. The endpoint requires a valid &#x60;threeDSSessionData&#x60; value which defines the unique transaction through its workflow. This endpoint may be used by merchants wishing to perform a &#x60;Direct Post&#x60; integration who wish to handle the challenge flow themselves. 
     * @param uuid An identifier used to track the CReq/CRes cycle. (required)
     * @param cres The CRES from the ACS. (optional)
     * @param threeDSSessionData The session data from the ACS. (optional)
     * @return TokenisationResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A result of a successful tokenisation or authorisation process if called via an XHR method. </td><td>  -  </td></tr>
        <tr><td> 303 </td><td> Redirect. A result of a successful tokenisation or authorisation process, redirecting to the success URL. </td><td>  -  </td></tr>
        <tr><td> 307 </td><td> Redirect. A result of a non-successful tokenisation or authorisation process, redirecting to the failure URL. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. No domain key has been provided and is required for this operation. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The domain key was provided and understood but is either incorrect or does not have permission to access the account provided on the request. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable. Should the incoming data not be validly determined. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Bad Request. Should the incoming data not be validly determined and an error code results. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error. Server Error. The server was unable to complete the request. </td><td>  -  </td></tr>
     </table>
     */
    public TokenisationResponseModel directCResTokeniseRequest(@javax.annotation.Nonnull String uuid, @javax.annotation.Nullable String cres, @javax.annotation.Nullable String threeDSSessionData) throws ApiException {
        ApiResponse<TokenisationResponseModel> localVarResp = directCResTokeniseRequestWithHttpInfo(uuid, cres, threeDSSessionData);
        return localVarResp.getData();
    }

    /**
     * Handles a CRes response from ACS, returning back a token for future authorisation
     * Used to post from an ACS during a ThreeDSecure direct flow process. The endpoint requires a valid &#x60;threeDSSessionData&#x60; value which defines the unique transaction through its workflow. This endpoint may be used by merchants wishing to perform a &#x60;Direct Post&#x60; integration who wish to handle the challenge flow themselves. 
     * @param uuid An identifier used to track the CReq/CRes cycle. (required)
     * @param cres The CRES from the ACS. (optional)
     * @param threeDSSessionData The session data from the ACS. (optional)
     * @return ApiResponse&lt;TokenisationResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A result of a successful tokenisation or authorisation process if called via an XHR method. </td><td>  -  </td></tr>
        <tr><td> 303 </td><td> Redirect. A result of a successful tokenisation or authorisation process, redirecting to the success URL. </td><td>  -  </td></tr>
        <tr><td> 307 </td><td> Redirect. A result of a non-successful tokenisation or authorisation process, redirecting to the failure URL. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. No domain key has been provided and is required for this operation. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The domain key was provided and understood but is either incorrect or does not have permission to access the account provided on the request. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable. Should the incoming data not be validly determined. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Bad Request. Should the incoming data not be validly determined and an error code results. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error. Server Error. The server was unable to complete the request. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TokenisationResponseModel> directCResTokeniseRequestWithHttpInfo(@javax.annotation.Nonnull String uuid, @javax.annotation.Nullable String cres, @javax.annotation.Nullable String threeDSSessionData) throws ApiException {
        okhttp3.Call localVarCall = directCResTokeniseRequestValidateBeforeCall(uuid, cres, threeDSSessionData, null);
        Type localVarReturnType = new TypeToken<TokenisationResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Handles a CRes response from ACS, returning back a token for future authorisation (asynchronously)
     * Used to post from an ACS during a ThreeDSecure direct flow process. The endpoint requires a valid &#x60;threeDSSessionData&#x60; value which defines the unique transaction through its workflow. This endpoint may be used by merchants wishing to perform a &#x60;Direct Post&#x60; integration who wish to handle the challenge flow themselves. 
     * @param uuid An identifier used to track the CReq/CRes cycle. (required)
     * @param cres The CRES from the ACS. (optional)
     * @param threeDSSessionData The session data from the ACS. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A result of a successful tokenisation or authorisation process if called via an XHR method. </td><td>  -  </td></tr>
        <tr><td> 303 </td><td> Redirect. A result of a successful tokenisation or authorisation process, redirecting to the success URL. </td><td>  -  </td></tr>
        <tr><td> 307 </td><td> Redirect. A result of a non-successful tokenisation or authorisation process, redirecting to the failure URL. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. No domain key has been provided and is required for this operation. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The domain key was provided and understood but is either incorrect or does not have permission to access the account provided on the request. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable. Should the incoming data not be validly determined. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Bad Request. Should the incoming data not be validly determined and an error code results. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error. Server Error. The server was unable to complete the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call directCResTokeniseRequestAsync(@javax.annotation.Nonnull String uuid, @javax.annotation.Nullable String cres, @javax.annotation.Nullable String threeDSSessionData, final ApiCallback<TokenisationResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = directCResTokeniseRequestValidateBeforeCall(uuid, cres, threeDSSessionData, _callback);
        Type localVarReturnType = new TypeToken<TokenisationResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for directPostAuthRequest
     * @param directPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A result of a successful tokenisation or authorisation process if called via an XHR method. </td><td>  -  </td></tr>
        <tr><td> 303 </td><td> Redirect. A result of a successful tokenisation or authorisation process, redirecting to the success URL. </td><td>  -  </td></tr>
        <tr><td> 307 </td><td> Redirect. A result of a non-successful tokenisation or authorisation process, redirecting to the failure URL. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. No domain key has been provided and is required for this operation. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The domain key was provided and understood but is either incorrect or does not have permission to access the account provided on the request. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable. Should the incoming data not be validly determined. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Bad Request. Should the incoming data not be validly determined and an error code results. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error. Server Error. The server was unable to complete the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call directPostAuthRequestCall(@javax.annotation.Nonnull DirectPostRequest directPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = directPostRequest;

        // create path and map variables
        String localVarPath = "/direct/auth";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "application/x-www-form-urlencoded",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "cp-domain-key", "cp-api-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call directPostAuthRequestValidateBeforeCall(@javax.annotation.Nonnull DirectPostRequest directPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'directPostRequest' is set
        if (directPostRequest == null) {
            throw new ApiException("Missing the required parameter 'directPostRequest' when calling directPostAuthRequest(Async)");
        }

        return directPostAuthRequestCall(directPostRequest, _callback);

    }

    /**
     * Direct Post Auth Request
     * Used to initiate a direct post request transaction flow. 
     * @param directPostRequest  (required)
     * @return AuthResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A result of a successful tokenisation or authorisation process if called via an XHR method. </td><td>  -  </td></tr>
        <tr><td> 303 </td><td> Redirect. A result of a successful tokenisation or authorisation process, redirecting to the success URL. </td><td>  -  </td></tr>
        <tr><td> 307 </td><td> Redirect. A result of a non-successful tokenisation or authorisation process, redirecting to the failure URL. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. No domain key has been provided and is required for this operation. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The domain key was provided and understood but is either incorrect or does not have permission to access the account provided on the request. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable. Should the incoming data not be validly determined. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Bad Request. Should the incoming data not be validly determined and an error code results. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error. Server Error. The server was unable to complete the request. </td><td>  -  </td></tr>
     </table>
     */
    public AuthResponse directPostAuthRequest(@javax.annotation.Nonnull DirectPostRequest directPostRequest) throws ApiException {
        ApiResponse<AuthResponse> localVarResp = directPostAuthRequestWithHttpInfo(directPostRequest);
        return localVarResp.getData();
    }

    /**
     * Direct Post Auth Request
     * Used to initiate a direct post request transaction flow. 
     * @param directPostRequest  (required)
     * @return ApiResponse&lt;AuthResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A result of a successful tokenisation or authorisation process if called via an XHR method. </td><td>  -  </td></tr>
        <tr><td> 303 </td><td> Redirect. A result of a successful tokenisation or authorisation process, redirecting to the success URL. </td><td>  -  </td></tr>
        <tr><td> 307 </td><td> Redirect. A result of a non-successful tokenisation or authorisation process, redirecting to the failure URL. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. No domain key has been provided and is required for this operation. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The domain key was provided and understood but is either incorrect or does not have permission to access the account provided on the request. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable. Should the incoming data not be validly determined. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Bad Request. Should the incoming data not be validly determined and an error code results. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error. Server Error. The server was unable to complete the request. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthResponse> directPostAuthRequestWithHttpInfo(@javax.annotation.Nonnull DirectPostRequest directPostRequest) throws ApiException {
        okhttp3.Call localVarCall = directPostAuthRequestValidateBeforeCall(directPostRequest, null);
        Type localVarReturnType = new TypeToken<AuthResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Direct Post Auth Request (asynchronously)
     * Used to initiate a direct post request transaction flow. 
     * @param directPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A result of a successful tokenisation or authorisation process if called via an XHR method. </td><td>  -  </td></tr>
        <tr><td> 303 </td><td> Redirect. A result of a successful tokenisation or authorisation process, redirecting to the success URL. </td><td>  -  </td></tr>
        <tr><td> 307 </td><td> Redirect. A result of a non-successful tokenisation or authorisation process, redirecting to the failure URL. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. No domain key has been provided and is required for this operation. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The domain key was provided and understood but is either incorrect or does not have permission to access the account provided on the request. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable. Should the incoming data not be validly determined. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Bad Request. Should the incoming data not be validly determined and an error code results. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error. Server Error. The server was unable to complete the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call directPostAuthRequestAsync(@javax.annotation.Nonnull DirectPostRequest directPostRequest, final ApiCallback<AuthResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = directPostAuthRequestValidateBeforeCall(directPostRequest, _callback);
        Type localVarReturnType = new TypeToken<AuthResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for directPostTokeniseRequest
     * @param directPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A result of a successful tokenisation or authorisation process if called via an XHR method. </td><td>  -  </td></tr>
        <tr><td> 303 </td><td> Redirect. A result of a successful tokenisation or authorisation process, redirecting to the success URL. </td><td>  -  </td></tr>
        <tr><td> 307 </td><td> Redirect. A result of a non-successful tokenisation or authorisation process, redirecting to the failure URL. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. No domain key has been provided and is required for this operation. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The domain key was provided and understood but is either incorrect or does not have permission to access the account provided on the request. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable. Should the incoming data not be validly determined. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Bad Request. Should the incoming data not be validly determined and an error code results. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error. Server Error. The server was unable to complete the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call directPostTokeniseRequestCall(@javax.annotation.Nonnull DirectPostRequest directPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = directPostRequest;

        // create path and map variables
        String localVarPath = "/direct/tokenise";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "application/x-www-form-urlencoded",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "cp-domain-key", "cp-api-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call directPostTokeniseRequestValidateBeforeCall(@javax.annotation.Nonnull DirectPostRequest directPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'directPostRequest' is set
        if (directPostRequest == null) {
            throw new ApiException("Missing the required parameter 'directPostRequest' when calling directPostTokeniseRequest(Async)");
        }

        return directPostTokeniseRequestCall(directPostRequest, _callback);

    }

    /**
     * Direct Post Tokenise Request
     * Used to initiate a direct post request transaction flow. 
     * @param directPostRequest  (required)
     * @return AuthResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A result of a successful tokenisation or authorisation process if called via an XHR method. </td><td>  -  </td></tr>
        <tr><td> 303 </td><td> Redirect. A result of a successful tokenisation or authorisation process, redirecting to the success URL. </td><td>  -  </td></tr>
        <tr><td> 307 </td><td> Redirect. A result of a non-successful tokenisation or authorisation process, redirecting to the failure URL. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. No domain key has been provided and is required for this operation. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The domain key was provided and understood but is either incorrect or does not have permission to access the account provided on the request. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable. Should the incoming data not be validly determined. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Bad Request. Should the incoming data not be validly determined and an error code results. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error. Server Error. The server was unable to complete the request. </td><td>  -  </td></tr>
     </table>
     */
    public AuthResponse directPostTokeniseRequest(@javax.annotation.Nonnull DirectPostRequest directPostRequest) throws ApiException {
        ApiResponse<AuthResponse> localVarResp = directPostTokeniseRequestWithHttpInfo(directPostRequest);
        return localVarResp.getData();
    }

    /**
     * Direct Post Tokenise Request
     * Used to initiate a direct post request transaction flow. 
     * @param directPostRequest  (required)
     * @return ApiResponse&lt;AuthResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A result of a successful tokenisation or authorisation process if called via an XHR method. </td><td>  -  </td></tr>
        <tr><td> 303 </td><td> Redirect. A result of a successful tokenisation or authorisation process, redirecting to the success URL. </td><td>  -  </td></tr>
        <tr><td> 307 </td><td> Redirect. A result of a non-successful tokenisation or authorisation process, redirecting to the failure URL. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. No domain key has been provided and is required for this operation. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The domain key was provided and understood but is either incorrect or does not have permission to access the account provided on the request. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable. Should the incoming data not be validly determined. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Bad Request. Should the incoming data not be validly determined and an error code results. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error. Server Error. The server was unable to complete the request. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthResponse> directPostTokeniseRequestWithHttpInfo(@javax.annotation.Nonnull DirectPostRequest directPostRequest) throws ApiException {
        okhttp3.Call localVarCall = directPostTokeniseRequestValidateBeforeCall(directPostRequest, null);
        Type localVarReturnType = new TypeToken<AuthResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Direct Post Tokenise Request (asynchronously)
     * Used to initiate a direct post request transaction flow. 
     * @param directPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A result of a successful tokenisation or authorisation process if called via an XHR method. </td><td>  -  </td></tr>
        <tr><td> 303 </td><td> Redirect. A result of a successful tokenisation or authorisation process, redirecting to the success URL. </td><td>  -  </td></tr>
        <tr><td> 307 </td><td> Redirect. A result of a non-successful tokenisation or authorisation process, redirecting to the failure URL. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. No domain key has been provided and is required for this operation. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The domain key was provided and understood but is either incorrect or does not have permission to access the account provided on the request. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable. Should the incoming data not be validly determined. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Bad Request. Should the incoming data not be validly determined and an error code results. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error. Server Error. The server was unable to complete the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call directPostTokeniseRequestAsync(@javax.annotation.Nonnull DirectPostRequest directPostRequest, final ApiCallback<AuthResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = directPostTokeniseRequestValidateBeforeCall(directPostRequest, _callback);
        Type localVarReturnType = new TypeToken<AuthResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tokenRequest
     * @param directTokenAuthRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A result of an authorisation process if called via an XHR method. </td><td>  -  </td></tr>
        <tr><td> 303 </td><td> Redirect. A result of a successful tokenisation or authorisation process, redirecting to the success URL. </td><td>  -  </td></tr>
        <tr><td> 307 </td><td> Redirect. A result of a non-successful tokenisation or authorisation process, redirecting to the failure URL. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. No domain key has been provided and is required for this operation. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The domain key was provided and understood but is either incorrect or does not have permission to access the account provided on the request. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable. Should the incoming data not be validly determined. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Bad Request. Should the incoming data not be validly determined and an error code results. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tokenRequestCall(@javax.annotation.Nonnull DirectTokenAuthRequest directTokenAuthRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = directTokenAuthRequest;

        // create path and map variables
        String localVarPath = "/direct/token";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "application/x-www-form-urlencoded",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "cp-domain-key", "cp-api-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tokenRequestValidateBeforeCall(@javax.annotation.Nonnull DirectTokenAuthRequest directTokenAuthRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'directTokenAuthRequest' is set
        if (directTokenAuthRequest == null) {
            throw new ApiException("Missing the required parameter 'directTokenAuthRequest' when calling tokenRequest(Async)");
        }

        return tokenRequestCall(directTokenAuthRequest, _callback);

    }

    /**
     * Direct Post Token Request
     * Perform a request for authorisation for a previously generated token. This flow will return an authorisation response stating that the transaction was approved or declined. 
     * @param directTokenAuthRequest  (required)
     * @return AuthResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A result of an authorisation process if called via an XHR method. </td><td>  -  </td></tr>
        <tr><td> 303 </td><td> Redirect. A result of a successful tokenisation or authorisation process, redirecting to the success URL. </td><td>  -  </td></tr>
        <tr><td> 307 </td><td> Redirect. A result of a non-successful tokenisation or authorisation process, redirecting to the failure URL. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. No domain key has been provided and is required for this operation. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The domain key was provided and understood but is either incorrect or does not have permission to access the account provided on the request. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable. Should the incoming data not be validly determined. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Bad Request. Should the incoming data not be validly determined and an error code results. </td><td>  -  </td></tr>
     </table>
     */
    public AuthResponse tokenRequest(@javax.annotation.Nonnull DirectTokenAuthRequest directTokenAuthRequest) throws ApiException {
        ApiResponse<AuthResponse> localVarResp = tokenRequestWithHttpInfo(directTokenAuthRequest);
        return localVarResp.getData();
    }

    /**
     * Direct Post Token Request
     * Perform a request for authorisation for a previously generated token. This flow will return an authorisation response stating that the transaction was approved or declined. 
     * @param directTokenAuthRequest  (required)
     * @return ApiResponse&lt;AuthResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A result of an authorisation process if called via an XHR method. </td><td>  -  </td></tr>
        <tr><td> 303 </td><td> Redirect. A result of a successful tokenisation or authorisation process, redirecting to the success URL. </td><td>  -  </td></tr>
        <tr><td> 307 </td><td> Redirect. A result of a non-successful tokenisation or authorisation process, redirecting to the failure URL. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. No domain key has been provided and is required for this operation. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The domain key was provided and understood but is either incorrect or does not have permission to access the account provided on the request. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable. Should the incoming data not be validly determined. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Bad Request. Should the incoming data not be validly determined and an error code results. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthResponse> tokenRequestWithHttpInfo(@javax.annotation.Nonnull DirectTokenAuthRequest directTokenAuthRequest) throws ApiException {
        okhttp3.Call localVarCall = tokenRequestValidateBeforeCall(directTokenAuthRequest, null);
        Type localVarReturnType = new TypeToken<AuthResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Direct Post Token Request (asynchronously)
     * Perform a request for authorisation for a previously generated token. This flow will return an authorisation response stating that the transaction was approved or declined. 
     * @param directTokenAuthRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A result of an authorisation process if called via an XHR method. </td><td>  -  </td></tr>
        <tr><td> 303 </td><td> Redirect. A result of a successful tokenisation or authorisation process, redirecting to the success URL. </td><td>  -  </td></tr>
        <tr><td> 307 </td><td> Redirect. A result of a non-successful tokenisation or authorisation process, redirecting to the failure URL. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. No domain key has been provided and is required for this operation. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The domain key was provided and understood but is either incorrect or does not have permission to access the account provided on the request. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable. Should the incoming data not be validly determined. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Bad Request. Should the incoming data not be validly determined and an error code results. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tokenRequestAsync(@javax.annotation.Nonnull DirectTokenAuthRequest directTokenAuthRequest, final ApiCallback<AuthResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = tokenRequestValidateBeforeCall(directTokenAuthRequest, _callback);
        Type localVarReturnType = new TypeToken<AuthResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
