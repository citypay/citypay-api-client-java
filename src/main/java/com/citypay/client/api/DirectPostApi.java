/*
 * CityPay Payment API
 *  This CityPay API is a HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokinsed payments using Card Holder Accounts.  ## Compliance and Security Your application will need to adhere to PCI-DSS standards to operate safely and to meet requirements set out by  Visa and MasterCard and the PCI Security Standards Council. These include  * Data must be collected using TLS version 1.2 using [strong cryptography](#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive card holder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities. 
 *
 * Contact: support@citypay.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.citypay.client.api;

import com.citypay.client.ApiCallback;
import com.citypay.client.ApiClient;
import com.citypay.client.ApiException;
import com.citypay.client.ApiResponse;
import com.citypay.client.Configuration;
import com.citypay.client.Pair;
import com.citypay.client.ProgressRequestBody;
import com.citypay.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.citypay.client.model.AuthResponse;
import com.citypay.client.model.DirectPostRequest;
import com.citypay.client.model.DirectTokenAuthRequest;
import com.citypay.client.model.Error;
import com.citypay.client.model.TokenisationResponseModel;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class DirectPostApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DirectPostApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DirectPostApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for directCResAuthRequest
     * @param uuid An identifier used to track the CReq/CRes cycle. (required)
     * @param cres The CRES from the ACS. (optional)
     * @param threeDSSessionData The session data from the ACS. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A result of a successful tokenisation or authorisation process if called via an XHR method. </td><td>  -  </td></tr>
        <tr><td> 303 </td><td> Redirect. A result of a successful tokenisation or authorisation process, redirecting to the success URL. </td><td>  -  </td></tr>
        <tr><td> 307 </td><td> Redirect. A result of a non-successful tokenisation or authorisation process, redirecting to the failure URL. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. No domain key has been provided and is required for this operation. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The domain key was provided and understood but is either incorrect or does not have permission to access the account provided on the request. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable. Should the incoming data not be validly determined. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Bad Request. Should the incoming data not be validly determined and an error code results. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error. Server Error. The server was unable to complete the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call directCResAuthRequestCall(String uuid, String cres, String threeDSSessionData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/direct/cres/auth/{uuid}"
            .replaceAll("\\{" + "uuid" + "\\}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cres != null) {
            localVarFormParams.put("cres", cres);
        }

        if (threeDSSessionData != null) {
            localVarFormParams.put("threeDSSessionData", threeDSSessionData);
        }

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/x-www-form-urlencoded"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call directCResAuthRequestValidateBeforeCall(String uuid, String cres, String threeDSSessionData, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling directCResAuthRequest(Async)");
        }
        

        okhttp3.Call localVarCall = directCResAuthRequestCall(uuid, cres, threeDSSessionData, _callback);
        return localVarCall;

    }

    /**
     * Handles a CRes response from ACS, returning back the result of authorisation
     * Used to post from an ACS during a ThreeDSecure direct flow process. The endpoint requires a valid &#x60;threeDSSessionData&#x60; value which defines the unique transaction through its workflow. This endpoint may be used by merchants wishing to perform a &#x60;Direct Post&#x60; integration who wish to handle the challenge flow themselves. 
     * @param uuid An identifier used to track the CReq/CRes cycle. (required)
     * @param cres The CRES from the ACS. (optional)
     * @param threeDSSessionData The session data from the ACS. (optional)
     * @return AuthResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A result of a successful tokenisation or authorisation process if called via an XHR method. </td><td>  -  </td></tr>
        <tr><td> 303 </td><td> Redirect. A result of a successful tokenisation or authorisation process, redirecting to the success URL. </td><td>  -  </td></tr>
        <tr><td> 307 </td><td> Redirect. A result of a non-successful tokenisation or authorisation process, redirecting to the failure URL. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. No domain key has been provided and is required for this operation. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The domain key was provided and understood but is either incorrect or does not have permission to access the account provided on the request. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable. Should the incoming data not be validly determined. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Bad Request. Should the incoming data not be validly determined and an error code results. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error. Server Error. The server was unable to complete the request. </td><td>  -  </td></tr>
     </table>
     */
    public AuthResponse directCResAuthRequest(String uuid, String cres, String threeDSSessionData) throws ApiException {
        ApiResponse<AuthResponse> localVarResp = directCResAuthRequestWithHttpInfo(uuid, cres, threeDSSessionData);
        return localVarResp.getData();
    }

    /**
     * Handles a CRes response from ACS, returning back the result of authorisation
     * Used to post from an ACS during a ThreeDSecure direct flow process. The endpoint requires a valid &#x60;threeDSSessionData&#x60; value which defines the unique transaction through its workflow. This endpoint may be used by merchants wishing to perform a &#x60;Direct Post&#x60; integration who wish to handle the challenge flow themselves. 
     * @param uuid An identifier used to track the CReq/CRes cycle. (required)
     * @param cres The CRES from the ACS. (optional)
     * @param threeDSSessionData The session data from the ACS. (optional)
     * @return ApiResponse&lt;AuthResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A result of a successful tokenisation or authorisation process if called via an XHR method. </td><td>  -  </td></tr>
        <tr><td> 303 </td><td> Redirect. A result of a successful tokenisation or authorisation process, redirecting to the success URL. </td><td>  -  </td></tr>
        <tr><td> 307 </td><td> Redirect. A result of a non-successful tokenisation or authorisation process, redirecting to the failure URL. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. No domain key has been provided and is required for this operation. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The domain key was provided and understood but is either incorrect or does not have permission to access the account provided on the request. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable. Should the incoming data not be validly determined. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Bad Request. Should the incoming data not be validly determined and an error code results. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error. Server Error. The server was unable to complete the request. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthResponse> directCResAuthRequestWithHttpInfo(String uuid, String cres, String threeDSSessionData) throws ApiException {
        okhttp3.Call localVarCall = directCResAuthRequestValidateBeforeCall(uuid, cres, threeDSSessionData, null);
        Type localVarReturnType = new TypeToken<AuthResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Handles a CRes response from ACS, returning back the result of authorisation (asynchronously)
     * Used to post from an ACS during a ThreeDSecure direct flow process. The endpoint requires a valid &#x60;threeDSSessionData&#x60; value which defines the unique transaction through its workflow. This endpoint may be used by merchants wishing to perform a &#x60;Direct Post&#x60; integration who wish to handle the challenge flow themselves. 
     * @param uuid An identifier used to track the CReq/CRes cycle. (required)
     * @param cres The CRES from the ACS. (optional)
     * @param threeDSSessionData The session data from the ACS. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A result of a successful tokenisation or authorisation process if called via an XHR method. </td><td>  -  </td></tr>
        <tr><td> 303 </td><td> Redirect. A result of a successful tokenisation or authorisation process, redirecting to the success URL. </td><td>  -  </td></tr>
        <tr><td> 307 </td><td> Redirect. A result of a non-successful tokenisation or authorisation process, redirecting to the failure URL. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. No domain key has been provided and is required for this operation. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The domain key was provided and understood but is either incorrect or does not have permission to access the account provided on the request. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable. Should the incoming data not be validly determined. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Bad Request. Should the incoming data not be validly determined and an error code results. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error. Server Error. The server was unable to complete the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call directCResAuthRequestAsync(String uuid, String cres, String threeDSSessionData, final ApiCallback<AuthResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = directCResAuthRequestValidateBeforeCall(uuid, cres, threeDSSessionData, _callback);
        Type localVarReturnType = new TypeToken<AuthResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for directCResTokeniseRequest
     * @param uuid An identifier used to track the CReq/CRes cycle. (required)
     * @param cres The CRES from the ACS. (optional)
     * @param threeDSSessionData The session data from the ACS. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A result of a successful tokenisation or authorisation process if called via an XHR method. </td><td>  -  </td></tr>
        <tr><td> 303 </td><td> Redirect. A result of a successful tokenisation or authorisation process, redirecting to the success URL. </td><td>  -  </td></tr>
        <tr><td> 307 </td><td> Redirect. A result of a non-successful tokenisation or authorisation process, redirecting to the failure URL. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. No domain key has been provided and is required for this operation. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The domain key was provided and understood but is either incorrect or does not have permission to access the account provided on the request. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable. Should the incoming data not be validly determined. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Bad Request. Should the incoming data not be validly determined and an error code results. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error. Server Error. The server was unable to complete the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call directCResTokeniseRequestCall(String uuid, String cres, String threeDSSessionData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/direct/cres/tokenise/{uuid}"
            .replaceAll("\\{" + "uuid" + "\\}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cres != null) {
            localVarFormParams.put("cres", cres);
        }

        if (threeDSSessionData != null) {
            localVarFormParams.put("threeDSSessionData", threeDSSessionData);
        }

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/x-www-form-urlencoded"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call directCResTokeniseRequestValidateBeforeCall(String uuid, String cres, String threeDSSessionData, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling directCResTokeniseRequest(Async)");
        }
        

        okhttp3.Call localVarCall = directCResTokeniseRequestCall(uuid, cres, threeDSSessionData, _callback);
        return localVarCall;

    }

    /**
     * Handles a CRes response from ACS, returning back a token for future authorisation
     * Used to post from an ACS during a ThreeDSecure direct flow process. The endpoint requires a valid &#x60;threeDSSessionData&#x60; value which defines the unique transaction through its workflow. This endpoint may be used by merchants wishing to perform a &#x60;Direct Post&#x60; integration who wish to handle the challenge flow themselves. 
     * @param uuid An identifier used to track the CReq/CRes cycle. (required)
     * @param cres The CRES from the ACS. (optional)
     * @param threeDSSessionData The session data from the ACS. (optional)
     * @return TokenisationResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A result of a successful tokenisation or authorisation process if called via an XHR method. </td><td>  -  </td></tr>
        <tr><td> 303 </td><td> Redirect. A result of a successful tokenisation or authorisation process, redirecting to the success URL. </td><td>  -  </td></tr>
        <tr><td> 307 </td><td> Redirect. A result of a non-successful tokenisation or authorisation process, redirecting to the failure URL. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. No domain key has been provided and is required for this operation. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The domain key was provided and understood but is either incorrect or does not have permission to access the account provided on the request. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable. Should the incoming data not be validly determined. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Bad Request. Should the incoming data not be validly determined and an error code results. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error. Server Error. The server was unable to complete the request. </td><td>  -  </td></tr>
     </table>
     */
    public TokenisationResponseModel directCResTokeniseRequest(String uuid, String cres, String threeDSSessionData) throws ApiException {
        ApiResponse<TokenisationResponseModel> localVarResp = directCResTokeniseRequestWithHttpInfo(uuid, cres, threeDSSessionData);
        return localVarResp.getData();
    }

    /**
     * Handles a CRes response from ACS, returning back a token for future authorisation
     * Used to post from an ACS during a ThreeDSecure direct flow process. The endpoint requires a valid &#x60;threeDSSessionData&#x60; value which defines the unique transaction through its workflow. This endpoint may be used by merchants wishing to perform a &#x60;Direct Post&#x60; integration who wish to handle the challenge flow themselves. 
     * @param uuid An identifier used to track the CReq/CRes cycle. (required)
     * @param cres The CRES from the ACS. (optional)
     * @param threeDSSessionData The session data from the ACS. (optional)
     * @return ApiResponse&lt;TokenisationResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A result of a successful tokenisation or authorisation process if called via an XHR method. </td><td>  -  </td></tr>
        <tr><td> 303 </td><td> Redirect. A result of a successful tokenisation or authorisation process, redirecting to the success URL. </td><td>  -  </td></tr>
        <tr><td> 307 </td><td> Redirect. A result of a non-successful tokenisation or authorisation process, redirecting to the failure URL. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. No domain key has been provided and is required for this operation. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The domain key was provided and understood but is either incorrect or does not have permission to access the account provided on the request. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable. Should the incoming data not be validly determined. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Bad Request. Should the incoming data not be validly determined and an error code results. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error. Server Error. The server was unable to complete the request. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TokenisationResponseModel> directCResTokeniseRequestWithHttpInfo(String uuid, String cres, String threeDSSessionData) throws ApiException {
        okhttp3.Call localVarCall = directCResTokeniseRequestValidateBeforeCall(uuid, cres, threeDSSessionData, null);
        Type localVarReturnType = new TypeToken<TokenisationResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Handles a CRes response from ACS, returning back a token for future authorisation (asynchronously)
     * Used to post from an ACS during a ThreeDSecure direct flow process. The endpoint requires a valid &#x60;threeDSSessionData&#x60; value which defines the unique transaction through its workflow. This endpoint may be used by merchants wishing to perform a &#x60;Direct Post&#x60; integration who wish to handle the challenge flow themselves. 
     * @param uuid An identifier used to track the CReq/CRes cycle. (required)
     * @param cres The CRES from the ACS. (optional)
     * @param threeDSSessionData The session data from the ACS. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A result of a successful tokenisation or authorisation process if called via an XHR method. </td><td>  -  </td></tr>
        <tr><td> 303 </td><td> Redirect. A result of a successful tokenisation or authorisation process, redirecting to the success URL. </td><td>  -  </td></tr>
        <tr><td> 307 </td><td> Redirect. A result of a non-successful tokenisation or authorisation process, redirecting to the failure URL. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. No domain key has been provided and is required for this operation. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The domain key was provided and understood but is either incorrect or does not have permission to access the account provided on the request. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable. Should the incoming data not be validly determined. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Bad Request. Should the incoming data not be validly determined and an error code results. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error. Server Error. The server was unable to complete the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call directCResTokeniseRequestAsync(String uuid, String cres, String threeDSSessionData, final ApiCallback<TokenisationResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = directCResTokeniseRequestValidateBeforeCall(uuid, cres, threeDSSessionData, _callback);
        Type localVarReturnType = new TypeToken<TokenisationResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for directPostAuthRequest
     * @param directPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A result of a successful tokenisation or authorisation process if called via an XHR method. </td><td>  -  </td></tr>
        <tr><td> 303 </td><td> Redirect. A result of a successful tokenisation or authorisation process, redirecting to the success URL. </td><td>  -  </td></tr>
        <tr><td> 307 </td><td> Redirect. A result of a non-successful tokenisation or authorisation process, redirecting to the failure URL. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. No domain key has been provided and is required for this operation. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The domain key was provided and understood but is either incorrect or does not have permission to access the account provided on the request. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable. Should the incoming data not be validly determined. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Bad Request. Should the incoming data not be validly determined and an error code results. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error. Server Error. The server was unable to complete the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call directPostAuthRequestCall(DirectPostRequest directPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = directPostRequest;

        // create path and map variables
        String localVarPath = "/direct/auth";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/x-www-form-urlencoded", "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "cp-api-key", "cp-domain-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call directPostAuthRequestValidateBeforeCall(DirectPostRequest directPostRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'directPostRequest' is set
        if (directPostRequest == null) {
            throw new ApiException("Missing the required parameter 'directPostRequest' when calling directPostAuthRequest(Async)");
        }
        

        okhttp3.Call localVarCall = directPostAuthRequestCall(directPostRequest, _callback);
        return localVarCall;

    }

    /**
     * Direct Post Auth Request
     * Used to initiate a direct post request transaction flow.  &lt;pre class&#x3D;\&quot;inline-code language-bash\&quot;&gt; &lt;code&gt; curl https://api.citypay.com/direct/auth?cp-domain-key&#x3D;n834ytqp84y... \\  -d \&quot;amount&#x3D;7500&amp;identifier&#x3D;example_trans&amp;cardnumber&#x3D;4000000000000002&amp;expmonth&#x3D;9&amp;expyear&#x3D;2028&amp;bill_to_postcode&#x3D;L1+7ZW &lt;/code&gt; &lt;/pre&gt;. 
     * @param directPostRequest  (required)
     * @return AuthResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A result of a successful tokenisation or authorisation process if called via an XHR method. </td><td>  -  </td></tr>
        <tr><td> 303 </td><td> Redirect. A result of a successful tokenisation or authorisation process, redirecting to the success URL. </td><td>  -  </td></tr>
        <tr><td> 307 </td><td> Redirect. A result of a non-successful tokenisation or authorisation process, redirecting to the failure URL. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. No domain key has been provided and is required for this operation. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The domain key was provided and understood but is either incorrect or does not have permission to access the account provided on the request. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable. Should the incoming data not be validly determined. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Bad Request. Should the incoming data not be validly determined and an error code results. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error. Server Error. The server was unable to complete the request. </td><td>  -  </td></tr>
     </table>
     */
    public AuthResponse directPostAuthRequest(DirectPostRequest directPostRequest) throws ApiException {
        ApiResponse<AuthResponse> localVarResp = directPostAuthRequestWithHttpInfo(directPostRequest);
        return localVarResp.getData();
    }

    /**
     * Direct Post Auth Request
     * Used to initiate a direct post request transaction flow.  &lt;pre class&#x3D;\&quot;inline-code language-bash\&quot;&gt; &lt;code&gt; curl https://api.citypay.com/direct/auth?cp-domain-key&#x3D;n834ytqp84y... \\  -d \&quot;amount&#x3D;7500&amp;identifier&#x3D;example_trans&amp;cardnumber&#x3D;4000000000000002&amp;expmonth&#x3D;9&amp;expyear&#x3D;2028&amp;bill_to_postcode&#x3D;L1+7ZW &lt;/code&gt; &lt;/pre&gt;. 
     * @param directPostRequest  (required)
     * @return ApiResponse&lt;AuthResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A result of a successful tokenisation or authorisation process if called via an XHR method. </td><td>  -  </td></tr>
        <tr><td> 303 </td><td> Redirect. A result of a successful tokenisation or authorisation process, redirecting to the success URL. </td><td>  -  </td></tr>
        <tr><td> 307 </td><td> Redirect. A result of a non-successful tokenisation or authorisation process, redirecting to the failure URL. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. No domain key has been provided and is required for this operation. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The domain key was provided and understood but is either incorrect or does not have permission to access the account provided on the request. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable. Should the incoming data not be validly determined. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Bad Request. Should the incoming data not be validly determined and an error code results. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error. Server Error. The server was unable to complete the request. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthResponse> directPostAuthRequestWithHttpInfo(DirectPostRequest directPostRequest) throws ApiException {
        okhttp3.Call localVarCall = directPostAuthRequestValidateBeforeCall(directPostRequest, null);
        Type localVarReturnType = new TypeToken<AuthResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Direct Post Auth Request (asynchronously)
     * Used to initiate a direct post request transaction flow.  &lt;pre class&#x3D;\&quot;inline-code language-bash\&quot;&gt; &lt;code&gt; curl https://api.citypay.com/direct/auth?cp-domain-key&#x3D;n834ytqp84y... \\  -d \&quot;amount&#x3D;7500&amp;identifier&#x3D;example_trans&amp;cardnumber&#x3D;4000000000000002&amp;expmonth&#x3D;9&amp;expyear&#x3D;2028&amp;bill_to_postcode&#x3D;L1+7ZW &lt;/code&gt; &lt;/pre&gt;. 
     * @param directPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A result of a successful tokenisation or authorisation process if called via an XHR method. </td><td>  -  </td></tr>
        <tr><td> 303 </td><td> Redirect. A result of a successful tokenisation or authorisation process, redirecting to the success URL. </td><td>  -  </td></tr>
        <tr><td> 307 </td><td> Redirect. A result of a non-successful tokenisation or authorisation process, redirecting to the failure URL. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. No domain key has been provided and is required for this operation. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The domain key was provided and understood but is either incorrect or does not have permission to access the account provided on the request. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable. Should the incoming data not be validly determined. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Bad Request. Should the incoming data not be validly determined and an error code results. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error. Server Error. The server was unable to complete the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call directPostAuthRequestAsync(DirectPostRequest directPostRequest, final ApiCallback<AuthResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = directPostAuthRequestValidateBeforeCall(directPostRequest, _callback);
        Type localVarReturnType = new TypeToken<AuthResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for directPostTokeniseRequest
     * @param directPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A result of a successful tokenisation or authorisation process if called via an XHR method. </td><td>  -  </td></tr>
        <tr><td> 303 </td><td> Redirect. A result of a successful tokenisation or authorisation process, redirecting to the success URL. </td><td>  -  </td></tr>
        <tr><td> 307 </td><td> Redirect. A result of a non-successful tokenisation or authorisation process, redirecting to the failure URL. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. No domain key has been provided and is required for this operation. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The domain key was provided and understood but is either incorrect or does not have permission to access the account provided on the request. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable. Should the incoming data not be validly determined. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Bad Request. Should the incoming data not be validly determined and an error code results. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error. Server Error. The server was unable to complete the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call directPostTokeniseRequestCall(DirectPostRequest directPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = directPostRequest;

        // create path and map variables
        String localVarPath = "/direct/tokenise";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/x-www-form-urlencoded", "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "cp-api-key", "cp-domain-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call directPostTokeniseRequestValidateBeforeCall(DirectPostRequest directPostRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'directPostRequest' is set
        if (directPostRequest == null) {
            throw new ApiException("Missing the required parameter 'directPostRequest' when calling directPostTokeniseRequest(Async)");
        }
        

        okhttp3.Call localVarCall = directPostTokeniseRequestCall(directPostRequest, _callback);
        return localVarCall;

    }

    /**
     * Direct Post Tokenise Request
     * Used to initiate a direct post request transaction flow.  &lt;pre class&#x3D;\&quot;inline-code language-bash\&quot;&gt; &lt;code&gt; curl https://api.citypay.com/v6/direct?cp-domain-key&#x3D;n834ytqp84y... \\  -d \&quot;amount&#x3D;7500&amp;identifier&#x3D;example_trans&amp;cardnumber&#x3D;4000000000000002&amp;expmonth&#x3D;9&amp;expyear&#x3D;2028&amp;bill_to_postcode&#x3D;L1+7ZW &lt;/code&gt; &lt;/pre&gt;. 
     * @param directPostRequest  (required)
     * @return AuthResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A result of a successful tokenisation or authorisation process if called via an XHR method. </td><td>  -  </td></tr>
        <tr><td> 303 </td><td> Redirect. A result of a successful tokenisation or authorisation process, redirecting to the success URL. </td><td>  -  </td></tr>
        <tr><td> 307 </td><td> Redirect. A result of a non-successful tokenisation or authorisation process, redirecting to the failure URL. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. No domain key has been provided and is required for this operation. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The domain key was provided and understood but is either incorrect or does not have permission to access the account provided on the request. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable. Should the incoming data not be validly determined. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Bad Request. Should the incoming data not be validly determined and an error code results. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error. Server Error. The server was unable to complete the request. </td><td>  -  </td></tr>
     </table>
     */
    public AuthResponse directPostTokeniseRequest(DirectPostRequest directPostRequest) throws ApiException {
        ApiResponse<AuthResponse> localVarResp = directPostTokeniseRequestWithHttpInfo(directPostRequest);
        return localVarResp.getData();
    }

    /**
     * Direct Post Tokenise Request
     * Used to initiate a direct post request transaction flow.  &lt;pre class&#x3D;\&quot;inline-code language-bash\&quot;&gt; &lt;code&gt; curl https://api.citypay.com/v6/direct?cp-domain-key&#x3D;n834ytqp84y... \\  -d \&quot;amount&#x3D;7500&amp;identifier&#x3D;example_trans&amp;cardnumber&#x3D;4000000000000002&amp;expmonth&#x3D;9&amp;expyear&#x3D;2028&amp;bill_to_postcode&#x3D;L1+7ZW &lt;/code&gt; &lt;/pre&gt;. 
     * @param directPostRequest  (required)
     * @return ApiResponse&lt;AuthResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A result of a successful tokenisation or authorisation process if called via an XHR method. </td><td>  -  </td></tr>
        <tr><td> 303 </td><td> Redirect. A result of a successful tokenisation or authorisation process, redirecting to the success URL. </td><td>  -  </td></tr>
        <tr><td> 307 </td><td> Redirect. A result of a non-successful tokenisation or authorisation process, redirecting to the failure URL. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. No domain key has been provided and is required for this operation. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The domain key was provided and understood but is either incorrect or does not have permission to access the account provided on the request. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable. Should the incoming data not be validly determined. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Bad Request. Should the incoming data not be validly determined and an error code results. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error. Server Error. The server was unable to complete the request. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthResponse> directPostTokeniseRequestWithHttpInfo(DirectPostRequest directPostRequest) throws ApiException {
        okhttp3.Call localVarCall = directPostTokeniseRequestValidateBeforeCall(directPostRequest, null);
        Type localVarReturnType = new TypeToken<AuthResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Direct Post Tokenise Request (asynchronously)
     * Used to initiate a direct post request transaction flow.  &lt;pre class&#x3D;\&quot;inline-code language-bash\&quot;&gt; &lt;code&gt; curl https://api.citypay.com/v6/direct?cp-domain-key&#x3D;n834ytqp84y... \\  -d \&quot;amount&#x3D;7500&amp;identifier&#x3D;example_trans&amp;cardnumber&#x3D;4000000000000002&amp;expmonth&#x3D;9&amp;expyear&#x3D;2028&amp;bill_to_postcode&#x3D;L1+7ZW &lt;/code&gt; &lt;/pre&gt;. 
     * @param directPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A result of a successful tokenisation or authorisation process if called via an XHR method. </td><td>  -  </td></tr>
        <tr><td> 303 </td><td> Redirect. A result of a successful tokenisation or authorisation process, redirecting to the success URL. </td><td>  -  </td></tr>
        <tr><td> 307 </td><td> Redirect. A result of a non-successful tokenisation or authorisation process, redirecting to the failure URL. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. No domain key has been provided and is required for this operation. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The domain key was provided and understood but is either incorrect or does not have permission to access the account provided on the request. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable. Should the incoming data not be validly determined. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Bad Request. Should the incoming data not be validly determined and an error code results. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error. Server Error. The server was unable to complete the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call directPostTokeniseRequestAsync(DirectPostRequest directPostRequest, final ApiCallback<AuthResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = directPostTokeniseRequestValidateBeforeCall(directPostRequest, _callback);
        Type localVarReturnType = new TypeToken<AuthResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tokenRequest
     * @param directTokenAuthRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A result of an authorisation process if called via an XHR method. </td><td>  -  </td></tr>
        <tr><td> 303 </td><td> Redirect. A result of a successful tokenisation or authorisation process, redirecting to the success URL. </td><td>  -  </td></tr>
        <tr><td> 307 </td><td> Redirect. A result of a non-successful tokenisation or authorisation process, redirecting to the failure URL. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. No domain key has been provided and is required for this operation. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The domain key was provided and understood but is either incorrect or does not have permission to access the account provided on the request. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable. Should the incoming data not be validly determined. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Bad Request. Should the incoming data not be validly determined and an error code results. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tokenRequestCall(DirectTokenAuthRequest directTokenAuthRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = directTokenAuthRequest;

        // create path and map variables
        String localVarPath = "/direct/token";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/x-www-form-urlencoded", "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "cp-api-key", "cp-domain-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tokenRequestValidateBeforeCall(DirectTokenAuthRequest directTokenAuthRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'directTokenAuthRequest' is set
        if (directTokenAuthRequest == null) {
            throw new ApiException("Missing the required parameter 'directTokenAuthRequest' when calling tokenRequest(Async)");
        }
        

        okhttp3.Call localVarCall = tokenRequestCall(directTokenAuthRequest, _callback);
        return localVarCall;

    }

    /**
     * Direct Post Token Request
     * Perform a request for authorisation for a previously generated token. This flow will return an authorisation response stating that the transaction was approved or declined. 
     * @param directTokenAuthRequest  (required)
     * @return AuthResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A result of an authorisation process if called via an XHR method. </td><td>  -  </td></tr>
        <tr><td> 303 </td><td> Redirect. A result of a successful tokenisation or authorisation process, redirecting to the success URL. </td><td>  -  </td></tr>
        <tr><td> 307 </td><td> Redirect. A result of a non-successful tokenisation or authorisation process, redirecting to the failure URL. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. No domain key has been provided and is required for this operation. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The domain key was provided and understood but is either incorrect or does not have permission to access the account provided on the request. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable. Should the incoming data not be validly determined. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Bad Request. Should the incoming data not be validly determined and an error code results. </td><td>  -  </td></tr>
     </table>
     */
    public AuthResponse tokenRequest(DirectTokenAuthRequest directTokenAuthRequest) throws ApiException {
        ApiResponse<AuthResponse> localVarResp = tokenRequestWithHttpInfo(directTokenAuthRequest);
        return localVarResp.getData();
    }

    /**
     * Direct Post Token Request
     * Perform a request for authorisation for a previously generated token. This flow will return an authorisation response stating that the transaction was approved or declined. 
     * @param directTokenAuthRequest  (required)
     * @return ApiResponse&lt;AuthResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A result of an authorisation process if called via an XHR method. </td><td>  -  </td></tr>
        <tr><td> 303 </td><td> Redirect. A result of a successful tokenisation or authorisation process, redirecting to the success URL. </td><td>  -  </td></tr>
        <tr><td> 307 </td><td> Redirect. A result of a non-successful tokenisation or authorisation process, redirecting to the failure URL. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. No domain key has been provided and is required for this operation. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The domain key was provided and understood but is either incorrect or does not have permission to access the account provided on the request. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable. Should the incoming data not be validly determined. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Bad Request. Should the incoming data not be validly determined and an error code results. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthResponse> tokenRequestWithHttpInfo(DirectTokenAuthRequest directTokenAuthRequest) throws ApiException {
        okhttp3.Call localVarCall = tokenRequestValidateBeforeCall(directTokenAuthRequest, null);
        Type localVarReturnType = new TypeToken<AuthResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Direct Post Token Request (asynchronously)
     * Perform a request for authorisation for a previously generated token. This flow will return an authorisation response stating that the transaction was approved or declined. 
     * @param directTokenAuthRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A result of an authorisation process if called via an XHR method. </td><td>  -  </td></tr>
        <tr><td> 303 </td><td> Redirect. A result of a successful tokenisation or authorisation process, redirecting to the success URL. </td><td>  -  </td></tr>
        <tr><td> 307 </td><td> Redirect. A result of a non-successful tokenisation or authorisation process, redirecting to the failure URL. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. No domain key has been provided and is required for this operation. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The domain key was provided and understood but is either incorrect or does not have permission to access the account provided on the request. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable. Should the incoming data not be validly determined. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Bad Request. Should the incoming data not be validly determined and an error code results. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tokenRequestAsync(DirectTokenAuthRequest directTokenAuthRequest, final ApiCallback<AuthResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = tokenRequestValidateBeforeCall(directTokenAuthRequest, _callback);
        Type localVarReturnType = new TypeToken<AuthResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
