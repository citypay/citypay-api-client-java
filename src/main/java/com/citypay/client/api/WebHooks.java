/*
 * CityPay Payment API
 *  Welcome to the CityPay API, a robust HTTP API payment solution designed for seamless server-to-server  transactional processing. Our API facilitates a wide array of payment operations, catering to diverse business needs.  Whether you're integrating Internet payments, handling Mail Order/Telephone Order (MOTO) transactions, managing  Subscriptions with Recurring and Continuous Authority payments, or navigating the complexities of 3-D Secure  authentication, our API is equipped to support your requirements. Additionally, we offer functionalities for  Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids, and Completion processing, alongside the capability  for tokenised payments.  ## Compliance and Security Overview <aside class=\"notice\">   Ensuring the security of payment transactions and compliance with industry standards is paramount. Our API is    designed with stringent security measures and compliance protocols to safeguard sensitive information and meet    the rigorous requirements of Visa, MasterCard, and the PCI Security Standards Council. </aside>  ### Key Compliance and Security Measures  * **TLS Encryption**: All data transmissions must utilise TLS version 1.2 or higher, employing [strong cryptography](#enabled-tls-ciphers). Our infrastructure strictly enforces this requirement to maintain the integrity and confidentiality of data in transit. We conduct regular scans and assessments of our TLS endpoints to identify and mitigate vulnerabilities. * **Data Storage Prohibitions**: Storing sensitive cardholder data (CHD), such as the card security code (CSC) or primary account number (PAN), is strictly prohibited. Our API is designed to minimize your exposure to sensitive data, thereby reducing your compliance burden. * **Data Masking**: For consumer protection and compliance, full card numbers must not be displayed on receipts or any customer-facing materials. Our API automatically masks PANs, displaying only the last four digits to facilitate safe receipt generation. * **Network Scans**: If your application is web-based, regular scans of your hosting environment are mandatory to identify and rectify potential vulnerabilities. This proactive measure is crucial for maintaining a secure and compliant online presence. * **PCI Compliance**: Adherence to PCI DSS standards is not optional; it's a requirement for operating securely and legally in the payments ecosystem. For detailed information on compliance requirements and resources, please visit the PCI Security Standards Council website [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/). * **Request Validation**: Our API includes mechanisms to verify the legitimacy of each request, ensuring it pertains to a valid account and originates from a trusted source. We leverage remote IP address verification alongside sophisticated application firewall technologies to thwart a wide array of common security threats.  ## Getting Started Before integrating with the CityPay API, ensure your application and development practices align with the outlined compliance and security measures. This preparatory step is crucial for a smooth integration process and the long-term success of your payment processing operations.  For further details on API endpoints, request/response formats, and code examples, proceed to the subsequent sections of our documentation. Our aim is to provide you with all the necessary tools and information to integrate our payment processing capabilities seamlessly into your application.  Thank you for choosing CityPay API. We look forward to supporting your payment processing needs with our secure, compliant, and versatile API solution. 
 *
 * Contact: support@citypay.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.citypay.client.api;

import com.citypay.client.ApiCallback;
import com.citypay.client.ApiClient;
import com.citypay.client.ApiException;
import com.citypay.client.ApiResponse;
import com.citypay.client.Configuration;
import com.citypay.client.Pair;
import com.citypay.client.ProgressRequestBody;
import com.citypay.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.citypay.client.model.Acknowledgement;
import com.citypay.client.model.Error;
import com.citypay.client.model.WebHookChannelCreateRequest;
import com.citypay.client.model.WebHookChannelCreateResponse;
import com.citypay.client.model.WebHookChannelDeleteRequest;
import com.citypay.client.model.WebHookSubscriptionRequest;
import com.citypay.client.model.WebHookSubscriptionResponse;
import com.citypay.client.model.WebHookUnsubscribeRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WebHooks {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WebHooks() {
        this(Configuration.getDefaultApiClient());
    }

    public WebHooks(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for webHookChannelCreateRequest
     * @param webHookChannelCreateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created a new web hook channel. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Should the incoming data not be validly determined. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. No api key has been provided and is required for this operation. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The api key was provided and understood but is either incorrect or does not have permission to access the account provided on the request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity. Should a failure occur that prevents processing of the API call. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error. The server was unable to complete the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webHookChannelCreateRequestCall(@javax.annotation.Nonnull WebHookChannelCreateRequest webHookChannelCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = webHookChannelCreateRequest;

        // create path and map variables
        String localVarPath = "/hooks/channel/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "cp-api-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webHookChannelCreateRequestValidateBeforeCall(@javax.annotation.Nonnull WebHookChannelCreateRequest webHookChannelCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webHookChannelCreateRequest' is set
        if (webHookChannelCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'webHookChannelCreateRequest' when calling webHookChannelCreateRequest(Async)");
        }

        return webHookChannelCreateRequestCall(webHookChannelCreateRequest, _callback);

    }

    /**
     * Web Hook Channel Create Request
     * A WebHookChannel is required to establish a connection with our event notification system. The channel serves as the communication link between your application and the events generated by the payment gateway. When you register a WebHookChannel, you&#39;re defining the endpoint where we will deliver notifications, such as payment events.  The WebHookChannel encapsulates important configuration details like the endpoint type (e.g., HTTP), the client ID, and security parameters. However, the channel itself does not specify which events will be sent but should be considered as the pipeline for receiving those events. After registering a channel, you can then configure triggers separately using a subscription request to define which specific payment events should flow through this channel. 
     * @param webHookChannelCreateRequest  (required)
     * @return WebHookChannelCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created a new web hook channel. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Should the incoming data not be validly determined. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. No api key has been provided and is required for this operation. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The api key was provided and understood but is either incorrect or does not have permission to access the account provided on the request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity. Should a failure occur that prevents processing of the API call. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error. The server was unable to complete the request. </td><td>  -  </td></tr>
     </table>
     */
    public WebHookChannelCreateResponse webHookChannelCreateRequest(@javax.annotation.Nonnull WebHookChannelCreateRequest webHookChannelCreateRequest) throws ApiException {
        ApiResponse<WebHookChannelCreateResponse> localVarResp = webHookChannelCreateRequestWithHttpInfo(webHookChannelCreateRequest);
        return localVarResp.getData();
    }

    /**
     * Web Hook Channel Create Request
     * A WebHookChannel is required to establish a connection with our event notification system. The channel serves as the communication link between your application and the events generated by the payment gateway. When you register a WebHookChannel, you&#39;re defining the endpoint where we will deliver notifications, such as payment events.  The WebHookChannel encapsulates important configuration details like the endpoint type (e.g., HTTP), the client ID, and security parameters. However, the channel itself does not specify which events will be sent but should be considered as the pipeline for receiving those events. After registering a channel, you can then configure triggers separately using a subscription request to define which specific payment events should flow through this channel. 
     * @param webHookChannelCreateRequest  (required)
     * @return ApiResponse&lt;WebHookChannelCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created a new web hook channel. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Should the incoming data not be validly determined. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. No api key has been provided and is required for this operation. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The api key was provided and understood but is either incorrect or does not have permission to access the account provided on the request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity. Should a failure occur that prevents processing of the API call. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error. The server was unable to complete the request. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebHookChannelCreateResponse> webHookChannelCreateRequestWithHttpInfo(@javax.annotation.Nonnull WebHookChannelCreateRequest webHookChannelCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = webHookChannelCreateRequestValidateBeforeCall(webHookChannelCreateRequest, null);
        Type localVarReturnType = new TypeToken<WebHookChannelCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Web Hook Channel Create Request (asynchronously)
     * A WebHookChannel is required to establish a connection with our event notification system. The channel serves as the communication link between your application and the events generated by the payment gateway. When you register a WebHookChannel, you&#39;re defining the endpoint where we will deliver notifications, such as payment events.  The WebHookChannel encapsulates important configuration details like the endpoint type (e.g., HTTP), the client ID, and security parameters. However, the channel itself does not specify which events will be sent but should be considered as the pipeline for receiving those events. After registering a channel, you can then configure triggers separately using a subscription request to define which specific payment events should flow through this channel. 
     * @param webHookChannelCreateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created a new web hook channel. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Should the incoming data not be validly determined. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. No api key has been provided and is required for this operation. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The api key was provided and understood but is either incorrect or does not have permission to access the account provided on the request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity. Should a failure occur that prevents processing of the API call. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error. The server was unable to complete the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webHookChannelCreateRequestAsync(@javax.annotation.Nonnull WebHookChannelCreateRequest webHookChannelCreateRequest, final ApiCallback<WebHookChannelCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = webHookChannelCreateRequestValidateBeforeCall(webHookChannelCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<WebHookChannelCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webHookChannelDeleteRequest
     * @param webHookChannelDeleteRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result of deleting the web hook channel. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Should the incoming data not be validly determined. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. No api key has been provided and is required for this operation. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The api key was provided and understood but is either incorrect or does not have permission to access the account provided on the request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity. Should a failure occur that prevents processing of the API call. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error. The server was unable to complete the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webHookChannelDeleteRequestCall(@javax.annotation.Nonnull WebHookChannelDeleteRequest webHookChannelDeleteRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = webHookChannelDeleteRequest;

        // create path and map variables
        String localVarPath = "/hooks/channel/delete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "cp-api-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webHookChannelDeleteRequestValidateBeforeCall(@javax.annotation.Nonnull WebHookChannelDeleteRequest webHookChannelDeleteRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webHookChannelDeleteRequest' is set
        if (webHookChannelDeleteRequest == null) {
            throw new ApiException("Missing the required parameter 'webHookChannelDeleteRequest' when calling webHookChannelDeleteRequest(Async)");
        }

        return webHookChannelDeleteRequestCall(webHookChannelDeleteRequest, _callback);

    }

    /**
     * Web Hook Channel Delete Request
     * The WebHookChannelDeleteRequest allows you to remove an existing WebHookChannel from the event notification system.  By specifying the channel ID, you can deactivate the communication link between your application and the payment  gateway’s event system. Deleting a channel effectively halts any further notifications being sent to the associated  endpoint, ensuring that no additional events are processed through that channel. 
     * @param webHookChannelDeleteRequest  (required)
     * @return Acknowledgement
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result of deleting the web hook channel. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Should the incoming data not be validly determined. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. No api key has been provided and is required for this operation. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The api key was provided and understood but is either incorrect or does not have permission to access the account provided on the request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity. Should a failure occur that prevents processing of the API call. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error. The server was unable to complete the request. </td><td>  -  </td></tr>
     </table>
     */
    public Acknowledgement webHookChannelDeleteRequest(@javax.annotation.Nonnull WebHookChannelDeleteRequest webHookChannelDeleteRequest) throws ApiException {
        ApiResponse<Acknowledgement> localVarResp = webHookChannelDeleteRequestWithHttpInfo(webHookChannelDeleteRequest);
        return localVarResp.getData();
    }

    /**
     * Web Hook Channel Delete Request
     * The WebHookChannelDeleteRequest allows you to remove an existing WebHookChannel from the event notification system.  By specifying the channel ID, you can deactivate the communication link between your application and the payment  gateway’s event system. Deleting a channel effectively halts any further notifications being sent to the associated  endpoint, ensuring that no additional events are processed through that channel. 
     * @param webHookChannelDeleteRequest  (required)
     * @return ApiResponse&lt;Acknowledgement&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result of deleting the web hook channel. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Should the incoming data not be validly determined. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. No api key has been provided and is required for this operation. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The api key was provided and understood but is either incorrect or does not have permission to access the account provided on the request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity. Should a failure occur that prevents processing of the API call. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error. The server was unable to complete the request. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Acknowledgement> webHookChannelDeleteRequestWithHttpInfo(@javax.annotation.Nonnull WebHookChannelDeleteRequest webHookChannelDeleteRequest) throws ApiException {
        okhttp3.Call localVarCall = webHookChannelDeleteRequestValidateBeforeCall(webHookChannelDeleteRequest, null);
        Type localVarReturnType = new TypeToken<Acknowledgement>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Web Hook Channel Delete Request (asynchronously)
     * The WebHookChannelDeleteRequest allows you to remove an existing WebHookChannel from the event notification system.  By specifying the channel ID, you can deactivate the communication link between your application and the payment  gateway’s event system. Deleting a channel effectively halts any further notifications being sent to the associated  endpoint, ensuring that no additional events are processed through that channel. 
     * @param webHookChannelDeleteRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result of deleting the web hook channel. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Should the incoming data not be validly determined. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. No api key has been provided and is required for this operation. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The api key was provided and understood but is either incorrect or does not have permission to access the account provided on the request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity. Should a failure occur that prevents processing of the API call. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error. The server was unable to complete the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webHookChannelDeleteRequestAsync(@javax.annotation.Nonnull WebHookChannelDeleteRequest webHookChannelDeleteRequest, final ApiCallback<Acknowledgement> _callback) throws ApiException {

        okhttp3.Call localVarCall = webHookChannelDeleteRequestValidateBeforeCall(webHookChannelDeleteRequest, _callback);
        Type localVarReturnType = new TypeToken<Acknowledgement>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webHookSubscriptionRequest
     * @param webHookSubscriptionRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Subscribe a new web hook. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Should the incoming data not be validly determined. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. No api key has been provided and is required for this operation. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The api key was provided and understood but is either incorrect or does not have permission to access the account provided on the request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity. Should a failure occur that prevents processing of the API call. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error. The server was unable to complete the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webHookSubscriptionRequestCall(@javax.annotation.Nonnull WebHookSubscriptionRequest webHookSubscriptionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = webHookSubscriptionRequest;

        // create path and map variables
        String localVarPath = "/hooks/subscribe";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "cp-api-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webHookSubscriptionRequestValidateBeforeCall(@javax.annotation.Nonnull WebHookSubscriptionRequest webHookSubscriptionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webHookSubscriptionRequest' is set
        if (webHookSubscriptionRequest == null) {
            throw new ApiException("Missing the required parameter 'webHookSubscriptionRequest' when calling webHookSubscriptionRequest(Async)");
        }

        return webHookSubscriptionRequestCall(webHookSubscriptionRequest, _callback);

    }

    /**
     * Web Hook Subscription Request
     * The WebHookSubscriptionRequest is used to define and activate event triggers for an existing WebHookChannel. This  request specifies the events or conditions that your application wants to be notified about, ensuring that only  relevant event data flows through the channel. 
     * @param webHookSubscriptionRequest  (required)
     * @return WebHookSubscriptionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Subscribe a new web hook. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Should the incoming data not be validly determined. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. No api key has been provided and is required for this operation. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The api key was provided and understood but is either incorrect or does not have permission to access the account provided on the request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity. Should a failure occur that prevents processing of the API call. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error. The server was unable to complete the request. </td><td>  -  </td></tr>
     </table>
     */
    public WebHookSubscriptionResponse webHookSubscriptionRequest(@javax.annotation.Nonnull WebHookSubscriptionRequest webHookSubscriptionRequest) throws ApiException {
        ApiResponse<WebHookSubscriptionResponse> localVarResp = webHookSubscriptionRequestWithHttpInfo(webHookSubscriptionRequest);
        return localVarResp.getData();
    }

    /**
     * Web Hook Subscription Request
     * The WebHookSubscriptionRequest is used to define and activate event triggers for an existing WebHookChannel. This  request specifies the events or conditions that your application wants to be notified about, ensuring that only  relevant event data flows through the channel. 
     * @param webHookSubscriptionRequest  (required)
     * @return ApiResponse&lt;WebHookSubscriptionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Subscribe a new web hook. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Should the incoming data not be validly determined. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. No api key has been provided and is required for this operation. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The api key was provided and understood but is either incorrect or does not have permission to access the account provided on the request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity. Should a failure occur that prevents processing of the API call. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error. The server was unable to complete the request. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebHookSubscriptionResponse> webHookSubscriptionRequestWithHttpInfo(@javax.annotation.Nonnull WebHookSubscriptionRequest webHookSubscriptionRequest) throws ApiException {
        okhttp3.Call localVarCall = webHookSubscriptionRequestValidateBeforeCall(webHookSubscriptionRequest, null);
        Type localVarReturnType = new TypeToken<WebHookSubscriptionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Web Hook Subscription Request (asynchronously)
     * The WebHookSubscriptionRequest is used to define and activate event triggers for an existing WebHookChannel. This  request specifies the events or conditions that your application wants to be notified about, ensuring that only  relevant event data flows through the channel. 
     * @param webHookSubscriptionRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Subscribe a new web hook. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Should the incoming data not be validly determined. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. No api key has been provided and is required for this operation. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The api key was provided and understood but is either incorrect or does not have permission to access the account provided on the request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity. Should a failure occur that prevents processing of the API call. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error. The server was unable to complete the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webHookSubscriptionRequestAsync(@javax.annotation.Nonnull WebHookSubscriptionRequest webHookSubscriptionRequest, final ApiCallback<WebHookSubscriptionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = webHookSubscriptionRequestValidateBeforeCall(webHookSubscriptionRequest, _callback);
        Type localVarReturnType = new TypeToken<WebHookSubscriptionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webHookUnsubscribeRequest
     * @param webHookUnsubscribeRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Unsubscribes a web hook. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Should the incoming data not be validly determined. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. No api key has been provided and is required for this operation. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The api key was provided and understood but is either incorrect or does not have permission to access the account provided on the request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity. Should a failure occur that prevents processing of the API call. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error. The server was unable to complete the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webHookUnsubscribeRequestCall(@javax.annotation.Nonnull WebHookUnsubscribeRequest webHookUnsubscribeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = webHookUnsubscribeRequest;

        // create path and map variables
        String localVarPath = "/hooks/unsubscribe";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "cp-api-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webHookUnsubscribeRequestValidateBeforeCall(@javax.annotation.Nonnull WebHookUnsubscribeRequest webHookUnsubscribeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webHookUnsubscribeRequest' is set
        if (webHookUnsubscribeRequest == null) {
            throw new ApiException("Missing the required parameter 'webHookUnsubscribeRequest' when calling webHookUnsubscribeRequest(Async)");
        }

        return webHookUnsubscribeRequestCall(webHookUnsubscribeRequest, _callback);

    }

    /**
     * Web Hook Unsubscribe Request
     * The WebHookUnsubscribeRequest is used to remove an existing webhook subscription from the system. This allows clients  to stop receiving event notifications for specific webhook subscriptions that are no longer needed. 
     * @param webHookUnsubscribeRequest  (required)
     * @return Acknowledgement
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Unsubscribes a web hook. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Should the incoming data not be validly determined. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. No api key has been provided and is required for this operation. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The api key was provided and understood but is either incorrect or does not have permission to access the account provided on the request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity. Should a failure occur that prevents processing of the API call. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error. The server was unable to complete the request. </td><td>  -  </td></tr>
     </table>
     */
    public Acknowledgement webHookUnsubscribeRequest(@javax.annotation.Nonnull WebHookUnsubscribeRequest webHookUnsubscribeRequest) throws ApiException {
        ApiResponse<Acknowledgement> localVarResp = webHookUnsubscribeRequestWithHttpInfo(webHookUnsubscribeRequest);
        return localVarResp.getData();
    }

    /**
     * Web Hook Unsubscribe Request
     * The WebHookUnsubscribeRequest is used to remove an existing webhook subscription from the system. This allows clients  to stop receiving event notifications for specific webhook subscriptions that are no longer needed. 
     * @param webHookUnsubscribeRequest  (required)
     * @return ApiResponse&lt;Acknowledgement&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Unsubscribes a web hook. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Should the incoming data not be validly determined. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. No api key has been provided and is required for this operation. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The api key was provided and understood but is either incorrect or does not have permission to access the account provided on the request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity. Should a failure occur that prevents processing of the API call. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error. The server was unable to complete the request. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Acknowledgement> webHookUnsubscribeRequestWithHttpInfo(@javax.annotation.Nonnull WebHookUnsubscribeRequest webHookUnsubscribeRequest) throws ApiException {
        okhttp3.Call localVarCall = webHookUnsubscribeRequestValidateBeforeCall(webHookUnsubscribeRequest, null);
        Type localVarReturnType = new TypeToken<Acknowledgement>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Web Hook Unsubscribe Request (asynchronously)
     * The WebHookUnsubscribeRequest is used to remove an existing webhook subscription from the system. This allows clients  to stop receiving event notifications for specific webhook subscriptions that are no longer needed. 
     * @param webHookUnsubscribeRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Unsubscribes a web hook. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Should the incoming data not be validly determined. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. No api key has been provided and is required for this operation. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The api key was provided and understood but is either incorrect or does not have permission to access the account provided on the request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity. Should a failure occur that prevents processing of the API call. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error. The server was unable to complete the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webHookUnsubscribeRequestAsync(@javax.annotation.Nonnull WebHookUnsubscribeRequest webHookUnsubscribeRequest, final ApiCallback<Acknowledgement> _callback) throws ApiException {

        okhttp3.Call localVarCall = webHookUnsubscribeRequestValidateBeforeCall(webHookUnsubscribeRequest, _callback);
        Type localVarReturnType = new TypeToken<Acknowledgement>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
