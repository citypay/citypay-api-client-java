/*
 * CityPay Payment API
 *  Welcome to the CityPay API, a robust HTTP API payment solution designed for seamless server-to-server  transactional processing. Our API facilitates a wide array of payment operations, catering to diverse business needs.  Whether you're integrating Internet payments, handling Mail Order/Telephone Order (MOTO) transactions, managing  Subscriptions with Recurring and Continuous Authority payments, or navigating the complexities of 3-D Secure  authentication, our API is equipped to support your requirements. Additionally, we offer functionalities for  Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids, and Completion processing, alongside the capability  for tokenised payments.  ## Compliance and Security Overview <aside class=\"notice\">   Ensuring the security of payment transactions and compliance with industry standards is paramount. Our API is    designed with stringent security measures and compliance protocols to safeguard sensitive information and meet    the rigorous requirements of Visa, MasterCard, and the PCI Security Standards Council. </aside>  ### Key Compliance and Security Measures  * **TLS Encryption**: All data transmissions must utilise TLS version 1.2 or higher, employing [strong cryptography](#enabled-tls-ciphers). Our infrastructure strictly enforces this requirement to maintain the integrity and confidentiality of data in transit. We conduct regular scans and assessments of our TLS endpoints to identify and mitigate vulnerabilities. * **Data Storage Prohibitions**: Storing sensitive cardholder data (CHD), such as the card security code (CSC) or primary account number (PAN), is strictly prohibited. Our API is designed to minimize your exposure to sensitive data, thereby reducing your compliance burden. * **Data Masking**: For consumer protection and compliance, full card numbers must not be displayed on receipts or any customer-facing materials. Our API automatically masks PANs, displaying only the last four digits to facilitate safe receipt generation. * **Network Scans**: If your application is web-based, regular scans of your hosting environment are mandatory to identify and rectify potential vulnerabilities. This proactive measure is crucial for maintaining a secure and compliant online presence. * **PCI Compliance**: Adherence to PCI DSS standards is not optional; it's a requirement for operating securely and legally in the payments ecosystem. For detailed information on compliance requirements and resources, please visit the PCI Security Standards Council website [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/). * **Request Validation**: Our API includes mechanisms to verify the legitimacy of each request, ensuring it pertains to a valid account and originates from a trusted source. We leverage remote IP address verification alongside sophisticated application firewall technologies to thwart a wide array of common security threats.  ## Getting Started Before integrating with the CityPay API, ensure your application and development practices align with the outlined compliance and security measures. This preparatory step is crucial for a smooth integration process and the long-term success of your payment processing operations.  For further details on API endpoints, request/response formats, and code examples, proceed to the subsequent sections of our documentation. Our aim is to provide you with all the necessary tools and information to integrate our payment processing capabilities seamlessly into your application.  Thank you for choosing CityPay API. We look forward to supporting your payment processing needs with our secure, compliant, and versatile API solution. 
 *
 * Contact: support@citypay.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.citypay.client.api;

import com.citypay.client.ApiCallback;
import com.citypay.client.ApiClient;
import com.citypay.client.ApiException;
import com.citypay.client.ApiResponse;
import com.citypay.client.Configuration;
import com.citypay.client.Pair;
import com.citypay.client.ProgressRequestBody;
import com.citypay.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.citypay.client.model.BatchTransactionReportRequest;
import com.citypay.client.model.BatchTransactionReportResponse;
import com.citypay.client.model.Error;
import com.citypay.client.model.MerchantBatchReportRequest;
import com.citypay.client.model.MerchantBatchReportResponse;
import com.citypay.client.model.MerchantBatchResponse;
import com.citypay.client.model.RemittanceReportRequest;
import com.citypay.client.model.RemittanceReportResponse;
import com.citypay.client.model.RemittedClientData;
import com.citypay.client.model.TransactionReportRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ReportingApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ReportingApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ReportingApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for batchedTransactionReportRequest
     * @param merchantid A merchant ID (MID) for which data is requested. This field allows for filtering of the request by a specific merchant account. (required)
     * @param batchNo The batch number that is being requested. (required)
     * @param batchTransactionReportRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A report of the transactions listed on batches. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Should the incoming data not be validly determined. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. No api key has been provided and is required for this operation. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The api key was provided and understood but is either incorrect or does not have permission to access the account provided on the request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity. Should a failure occur that prevents processing of the API call. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error. The server was unable to complete the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call batchedTransactionReportRequestCall(@javax.annotation.Nonnull Integer merchantid, @javax.annotation.Nonnull String batchNo, @javax.annotation.Nonnull BatchTransactionReportRequest batchTransactionReportRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchTransactionReportRequest;

        // create path and map variables
        String localVarPath = "/v6/merchant-batch/{merchantid}/{batch_no}/transactions"
            .replace("{" + "merchantid" + "}", localVarApiClient.escapeString(merchantid.toString()))
            .replace("{" + "batch_no" + "}", localVarApiClient.escapeString(batchNo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "cp-api-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call batchedTransactionReportRequestValidateBeforeCall(@javax.annotation.Nonnull Integer merchantid, @javax.annotation.Nonnull String batchNo, @javax.annotation.Nonnull BatchTransactionReportRequest batchTransactionReportRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'merchantid' is set
        if (merchantid == null) {
            throw new ApiException("Missing the required parameter 'merchantid' when calling batchedTransactionReportRequest(Async)");
        }

        // verify the required parameter 'batchNo' is set
        if (batchNo == null) {
            throw new ApiException("Missing the required parameter 'batchNo' when calling batchedTransactionReportRequest(Async)");
        }

        // verify the required parameter 'batchTransactionReportRequest' is set
        if (batchTransactionReportRequest == null) {
            throw new ApiException("Missing the required parameter 'batchTransactionReportRequest' when calling batchedTransactionReportRequest(Async)");
        }

        return batchedTransactionReportRequestCall(merchantid, batchNo, batchTransactionReportRequest, _callback);

    }

    /**
     * Batch Transaction Report Request
     * Retrieves transactions available on a given batch.
     * @param merchantid A merchant ID (MID) for which data is requested. This field allows for filtering of the request by a specific merchant account. (required)
     * @param batchNo The batch number that is being requested. (required)
     * @param batchTransactionReportRequest  (required)
     * @return BatchTransactionReportResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A report of the transactions listed on batches. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Should the incoming data not be validly determined. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. No api key has been provided and is required for this operation. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The api key was provided and understood but is either incorrect or does not have permission to access the account provided on the request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity. Should a failure occur that prevents processing of the API call. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error. The server was unable to complete the request. </td><td>  -  </td></tr>
     </table>
     */
    public BatchTransactionReportResponse batchedTransactionReportRequest(@javax.annotation.Nonnull Integer merchantid, @javax.annotation.Nonnull String batchNo, @javax.annotation.Nonnull BatchTransactionReportRequest batchTransactionReportRequest) throws ApiException {
        ApiResponse<BatchTransactionReportResponse> localVarResp = batchedTransactionReportRequestWithHttpInfo(merchantid, batchNo, batchTransactionReportRequest);
        return localVarResp.getData();
    }

    /**
     * Batch Transaction Report Request
     * Retrieves transactions available on a given batch.
     * @param merchantid A merchant ID (MID) for which data is requested. This field allows for filtering of the request by a specific merchant account. (required)
     * @param batchNo The batch number that is being requested. (required)
     * @param batchTransactionReportRequest  (required)
     * @return ApiResponse&lt;BatchTransactionReportResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A report of the transactions listed on batches. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Should the incoming data not be validly determined. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. No api key has been provided and is required for this operation. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The api key was provided and understood but is either incorrect or does not have permission to access the account provided on the request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity. Should a failure occur that prevents processing of the API call. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error. The server was unable to complete the request. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BatchTransactionReportResponse> batchedTransactionReportRequestWithHttpInfo(@javax.annotation.Nonnull Integer merchantid, @javax.annotation.Nonnull String batchNo, @javax.annotation.Nonnull BatchTransactionReportRequest batchTransactionReportRequest) throws ApiException {
        okhttp3.Call localVarCall = batchedTransactionReportRequestValidateBeforeCall(merchantid, batchNo, batchTransactionReportRequest, null);
        Type localVarReturnType = new TypeToken<BatchTransactionReportResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Batch Transaction Report Request (asynchronously)
     * Retrieves transactions available on a given batch.
     * @param merchantid A merchant ID (MID) for which data is requested. This field allows for filtering of the request by a specific merchant account. (required)
     * @param batchNo The batch number that is being requested. (required)
     * @param batchTransactionReportRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A report of the transactions listed on batches. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Should the incoming data not be validly determined. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. No api key has been provided and is required for this operation. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The api key was provided and understood but is either incorrect or does not have permission to access the account provided on the request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity. Should a failure occur that prevents processing of the API call. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error. The server was unable to complete the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call batchedTransactionReportRequestAsync(@javax.annotation.Nonnull Integer merchantid, @javax.annotation.Nonnull String batchNo, @javax.annotation.Nonnull BatchTransactionReportRequest batchTransactionReportRequest, final ApiCallback<BatchTransactionReportResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = batchedTransactionReportRequestValidateBeforeCall(merchantid, batchNo, batchTransactionReportRequest, _callback);
        Type localVarReturnType = new TypeToken<BatchTransactionReportResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for merchantBatchReportRequest
     * @param merchantBatchReportRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A report of the batches generated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Should the incoming data not be validly determined. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. No api key has been provided and is required for this operation. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The api key was provided and understood but is either incorrect or does not have permission to access the account provided on the request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity. Should a failure occur that prevents processing of the API call. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error. The server was unable to complete the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call merchantBatchReportRequestCall(@javax.annotation.Nonnull MerchantBatchReportRequest merchantBatchReportRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = merchantBatchReportRequest;

        // create path and map variables
        String localVarPath = "/v6/merchant-batch/report";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "cp-api-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call merchantBatchReportRequestValidateBeforeCall(@javax.annotation.Nonnull MerchantBatchReportRequest merchantBatchReportRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'merchantBatchReportRequest' is set
        if (merchantBatchReportRequest == null) {
            throw new ApiException("Missing the required parameter 'merchantBatchReportRequest' when calling merchantBatchReportRequest(Async)");
        }

        return merchantBatchReportRequestCall(merchantBatchReportRequest, _callback);

    }

    /**
     * Merchant Batch Report Request
     * Retrieves a report of merchant batches within a specified date range.  Batches, which aggregate daily processing activities, are typically generated at &#x60;00:00&#x60; each day.  These batches play a crucial role in the settlement of funds by summarising daily transactions. 
     * @param merchantBatchReportRequest  (required)
     * @return MerchantBatchReportResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A report of the batches generated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Should the incoming data not be validly determined. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. No api key has been provided and is required for this operation. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The api key was provided and understood but is either incorrect or does not have permission to access the account provided on the request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity. Should a failure occur that prevents processing of the API call. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error. The server was unable to complete the request. </td><td>  -  </td></tr>
     </table>
     */
    public MerchantBatchReportResponse merchantBatchReportRequest(@javax.annotation.Nonnull MerchantBatchReportRequest merchantBatchReportRequest) throws ApiException {
        ApiResponse<MerchantBatchReportResponse> localVarResp = merchantBatchReportRequestWithHttpInfo(merchantBatchReportRequest);
        return localVarResp.getData();
    }

    /**
     * Merchant Batch Report Request
     * Retrieves a report of merchant batches within a specified date range.  Batches, which aggregate daily processing activities, are typically generated at &#x60;00:00&#x60; each day.  These batches play a crucial role in the settlement of funds by summarising daily transactions. 
     * @param merchantBatchReportRequest  (required)
     * @return ApiResponse&lt;MerchantBatchReportResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A report of the batches generated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Should the incoming data not be validly determined. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. No api key has been provided and is required for this operation. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The api key was provided and understood but is either incorrect or does not have permission to access the account provided on the request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity. Should a failure occur that prevents processing of the API call. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error. The server was unable to complete the request. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MerchantBatchReportResponse> merchantBatchReportRequestWithHttpInfo(@javax.annotation.Nonnull MerchantBatchReportRequest merchantBatchReportRequest) throws ApiException {
        okhttp3.Call localVarCall = merchantBatchReportRequestValidateBeforeCall(merchantBatchReportRequest, null);
        Type localVarReturnType = new TypeToken<MerchantBatchReportResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Merchant Batch Report Request (asynchronously)
     * Retrieves a report of merchant batches within a specified date range.  Batches, which aggregate daily processing activities, are typically generated at &#x60;00:00&#x60; each day.  These batches play a crucial role in the settlement of funds by summarising daily transactions. 
     * @param merchantBatchReportRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A report of the batches generated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Should the incoming data not be validly determined. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. No api key has been provided and is required for this operation. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The api key was provided and understood but is either incorrect or does not have permission to access the account provided on the request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity. Should a failure occur that prevents processing of the API call. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error. The server was unable to complete the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call merchantBatchReportRequestAsync(@javax.annotation.Nonnull MerchantBatchReportRequest merchantBatchReportRequest, final ApiCallback<MerchantBatchReportResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = merchantBatchReportRequestValidateBeforeCall(merchantBatchReportRequest, _callback);
        Type localVarReturnType = new TypeToken<MerchantBatchReportResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for merchantBatchRequest
     * @param merchantid A merchant ID (MID) for which data is requested. This field allows for filtering of the request by a specific merchant account. (required)
     * @param batchNo The batch number that is being requested. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A report of a single batch. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Should the incoming data not be validly determined. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. No api key has been provided and is required for this operation. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The api key was provided and understood but is either incorrect or does not have permission to access the account provided on the request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity. Should a failure occur that prevents processing of the API call. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error. The server was unable to complete the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call merchantBatchRequestCall(@javax.annotation.Nonnull Integer merchantid, @javax.annotation.Nonnull String batchNo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v6/merchant-batch/{merchantid}/{batch_no}"
            .replace("{" + "merchantid" + "}", localVarApiClient.escapeString(merchantid.toString()))
            .replace("{" + "batch_no" + "}", localVarApiClient.escapeString(batchNo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "cp-api-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call merchantBatchRequestValidateBeforeCall(@javax.annotation.Nonnull Integer merchantid, @javax.annotation.Nonnull String batchNo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'merchantid' is set
        if (merchantid == null) {
            throw new ApiException("Missing the required parameter 'merchantid' when calling merchantBatchRequest(Async)");
        }

        // verify the required parameter 'batchNo' is set
        if (batchNo == null) {
            throw new ApiException("Missing the required parameter 'batchNo' when calling merchantBatchRequest(Async)");
        }

        return merchantBatchRequestCall(merchantid, batchNo, _callback);

    }

    /**
     * Merchant Batch Request
     * Retrieves a report of merchant a merchant batch for a specified batch number.
     * @param merchantid A merchant ID (MID) for which data is requested. This field allows for filtering of the request by a specific merchant account. (required)
     * @param batchNo The batch number that is being requested. (required)
     * @return MerchantBatchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A report of a single batch. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Should the incoming data not be validly determined. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. No api key has been provided and is required for this operation. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The api key was provided and understood but is either incorrect or does not have permission to access the account provided on the request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity. Should a failure occur that prevents processing of the API call. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error. The server was unable to complete the request. </td><td>  -  </td></tr>
     </table>
     */
    public MerchantBatchResponse merchantBatchRequest(@javax.annotation.Nonnull Integer merchantid, @javax.annotation.Nonnull String batchNo) throws ApiException {
        ApiResponse<MerchantBatchResponse> localVarResp = merchantBatchRequestWithHttpInfo(merchantid, batchNo);
        return localVarResp.getData();
    }

    /**
     * Merchant Batch Request
     * Retrieves a report of merchant a merchant batch for a specified batch number.
     * @param merchantid A merchant ID (MID) for which data is requested. This field allows for filtering of the request by a specific merchant account. (required)
     * @param batchNo The batch number that is being requested. (required)
     * @return ApiResponse&lt;MerchantBatchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A report of a single batch. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Should the incoming data not be validly determined. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. No api key has been provided and is required for this operation. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The api key was provided and understood but is either incorrect or does not have permission to access the account provided on the request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity. Should a failure occur that prevents processing of the API call. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error. The server was unable to complete the request. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MerchantBatchResponse> merchantBatchRequestWithHttpInfo(@javax.annotation.Nonnull Integer merchantid, @javax.annotation.Nonnull String batchNo) throws ApiException {
        okhttp3.Call localVarCall = merchantBatchRequestValidateBeforeCall(merchantid, batchNo, null);
        Type localVarReturnType = new TypeToken<MerchantBatchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Merchant Batch Request (asynchronously)
     * Retrieves a report of merchant a merchant batch for a specified batch number.
     * @param merchantid A merchant ID (MID) for which data is requested. This field allows for filtering of the request by a specific merchant account. (required)
     * @param batchNo The batch number that is being requested. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A report of a single batch. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Should the incoming data not be validly determined. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. No api key has been provided and is required for this operation. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The api key was provided and understood but is either incorrect or does not have permission to access the account provided on the request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity. Should a failure occur that prevents processing of the API call. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error. The server was unable to complete the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call merchantBatchRequestAsync(@javax.annotation.Nonnull Integer merchantid, @javax.annotation.Nonnull String batchNo, final ApiCallback<MerchantBatchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = merchantBatchRequestValidateBeforeCall(merchantid, batchNo, _callback);
        Type localVarReturnType = new TypeToken<MerchantBatchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for remittanceRangeReport
     * @param clientid A client Id for which data is requested. (required)
     * @param remittanceReportRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A report of financial remittance data for a range of dates. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Should the incoming data not be validly determined. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. No api key has been provided and is required for this operation. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The api key was provided and understood but is either incorrect or does not have permission to access the account provided on the request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity. Should a failure occur that prevents processing of the API call. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error. The server was unable to complete the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call remittanceRangeReportCall(@javax.annotation.Nonnull String clientid, @javax.annotation.Nonnull RemittanceReportRequest remittanceReportRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = remittanceReportRequest;

        // create path and map variables
        String localVarPath = "/v6/remittance/report/{clientid}"
            .replace("{" + "clientid" + "}", localVarApiClient.escapeString(clientid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "cp-api-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call remittanceRangeReportValidateBeforeCall(@javax.annotation.Nonnull String clientid, @javax.annotation.Nonnull RemittanceReportRequest remittanceReportRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'clientid' is set
        if (clientid == null) {
            throw new ApiException("Missing the required parameter 'clientid' when calling remittanceRangeReport(Async)");
        }

        // verify the required parameter 'remittanceReportRequest' is set
        if (remittanceReportRequest == null) {
            throw new ApiException("Missing the required parameter 'remittanceReportRequest' when calling remittanceRangeReport(Async)");
        }

        return remittanceRangeReportCall(clientid, remittanceReportRequest, _callback);

    }

    /**
     * Remittance Report Request
     * Fetches remittance reports for financial transactions within a specified date range, covering all client-related activities. This report consolidates all batches disbursed to a client, with each remittance summarising the aggregation of batches leading up to settlement. Additionally, the net remittance amount presented in the final settlement will reflect any deductions made by the acquirer. 
     * @param clientid A client Id for which data is requested. (required)
     * @param remittanceReportRequest  (required)
     * @return RemittanceReportResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A report of financial remittance data for a range of dates. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Should the incoming data not be validly determined. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. No api key has been provided and is required for this operation. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The api key was provided and understood but is either incorrect or does not have permission to access the account provided on the request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity. Should a failure occur that prevents processing of the API call. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error. The server was unable to complete the request. </td><td>  -  </td></tr>
     </table>
     */
    public RemittanceReportResponse remittanceRangeReport(@javax.annotation.Nonnull String clientid, @javax.annotation.Nonnull RemittanceReportRequest remittanceReportRequest) throws ApiException {
        ApiResponse<RemittanceReportResponse> localVarResp = remittanceRangeReportWithHttpInfo(clientid, remittanceReportRequest);
        return localVarResp.getData();
    }

    /**
     * Remittance Report Request
     * Fetches remittance reports for financial transactions within a specified date range, covering all client-related activities. This report consolidates all batches disbursed to a client, with each remittance summarising the aggregation of batches leading up to settlement. Additionally, the net remittance amount presented in the final settlement will reflect any deductions made by the acquirer. 
     * @param clientid A client Id for which data is requested. (required)
     * @param remittanceReportRequest  (required)
     * @return ApiResponse&lt;RemittanceReportResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A report of financial remittance data for a range of dates. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Should the incoming data not be validly determined. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. No api key has been provided and is required for this operation. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The api key was provided and understood but is either incorrect or does not have permission to access the account provided on the request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity. Should a failure occur that prevents processing of the API call. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error. The server was unable to complete the request. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RemittanceReportResponse> remittanceRangeReportWithHttpInfo(@javax.annotation.Nonnull String clientid, @javax.annotation.Nonnull RemittanceReportRequest remittanceReportRequest) throws ApiException {
        okhttp3.Call localVarCall = remittanceRangeReportValidateBeforeCall(clientid, remittanceReportRequest, null);
        Type localVarReturnType = new TypeToken<RemittanceReportResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remittance Report Request (asynchronously)
     * Fetches remittance reports for financial transactions within a specified date range, covering all client-related activities. This report consolidates all batches disbursed to a client, with each remittance summarising the aggregation of batches leading up to settlement. Additionally, the net remittance amount presented in the final settlement will reflect any deductions made by the acquirer. 
     * @param clientid A client Id for which data is requested. (required)
     * @param remittanceReportRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A report of financial remittance data for a range of dates. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Should the incoming data not be validly determined. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. No api key has been provided and is required for this operation. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The api key was provided and understood but is either incorrect or does not have permission to access the account provided on the request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity. Should a failure occur that prevents processing of the API call. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error. The server was unable to complete the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call remittanceRangeReportAsync(@javax.annotation.Nonnull String clientid, @javax.annotation.Nonnull RemittanceReportRequest remittanceReportRequest, final ApiCallback<RemittanceReportResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = remittanceRangeReportValidateBeforeCall(clientid, remittanceReportRequest, _callback);
        Type localVarReturnType = new TypeToken<RemittanceReportResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for remittanceReportRequest
     * @param clientid A client Id for which data is requested. (required)
     * @param date Date (YYYY-MM-DD) to filter the request for. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A report of the financial remittance data for a given date. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Should the incoming data not be validly determined. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. No api key has been provided and is required for this operation. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The api key was provided and understood but is either incorrect or does not have permission to access the account provided on the request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity. Should a failure occur that prevents processing of the API call. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error. The server was unable to complete the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call remittanceReportRequestCall(@javax.annotation.Nonnull String clientid, @javax.annotation.Nonnull String date, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v6/remittance/report/{clientid}/{date}"
            .replace("{" + "clientid" + "}", localVarApiClient.escapeString(clientid.toString()))
            .replace("{" + "date" + "}", localVarApiClient.escapeString(date.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "cp-api-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call remittanceReportRequestValidateBeforeCall(@javax.annotation.Nonnull String clientid, @javax.annotation.Nonnull String date, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'clientid' is set
        if (clientid == null) {
            throw new ApiException("Missing the required parameter 'clientid' when calling remittanceReportRequest(Async)");
        }

        // verify the required parameter 'date' is set
        if (date == null) {
            throw new ApiException("Missing the required parameter 'date' when calling remittanceReportRequest(Async)");
        }

        return remittanceReportRequestCall(clientid, date, _callback);

    }

    /**
     * Remittance Date Report Request
     * Fetches remittance reports for financial transactions for a given date,  covering all client-related activities. This report consolidates all batches disbursed to a  client, with each remittance summarising the aggregation of batches leading up to settlement.  Additionally, the net remittance amount presented in the final settlement will reflect any  deductions made by the acquirer.  The process also supports the notion of *today* deferring the date to today&#39;s date or *latest* reflecting the latest remittance date available. 
     * @param clientid A client Id for which data is requested. (required)
     * @param date Date (YYYY-MM-DD) to filter the request for. (required)
     * @return RemittedClientData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A report of the financial remittance data for a given date. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Should the incoming data not be validly determined. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. No api key has been provided and is required for this operation. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The api key was provided and understood but is either incorrect or does not have permission to access the account provided on the request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity. Should a failure occur that prevents processing of the API call. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error. The server was unable to complete the request. </td><td>  -  </td></tr>
     </table>
     */
    public RemittedClientData remittanceReportRequest(@javax.annotation.Nonnull String clientid, @javax.annotation.Nonnull String date) throws ApiException {
        ApiResponse<RemittedClientData> localVarResp = remittanceReportRequestWithHttpInfo(clientid, date);
        return localVarResp.getData();
    }

    /**
     * Remittance Date Report Request
     * Fetches remittance reports for financial transactions for a given date,  covering all client-related activities. This report consolidates all batches disbursed to a  client, with each remittance summarising the aggregation of batches leading up to settlement.  Additionally, the net remittance amount presented in the final settlement will reflect any  deductions made by the acquirer.  The process also supports the notion of *today* deferring the date to today&#39;s date or *latest* reflecting the latest remittance date available. 
     * @param clientid A client Id for which data is requested. (required)
     * @param date Date (YYYY-MM-DD) to filter the request for. (required)
     * @return ApiResponse&lt;RemittedClientData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A report of the financial remittance data for a given date. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Should the incoming data not be validly determined. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. No api key has been provided and is required for this operation. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The api key was provided and understood but is either incorrect or does not have permission to access the account provided on the request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity. Should a failure occur that prevents processing of the API call. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error. The server was unable to complete the request. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RemittedClientData> remittanceReportRequestWithHttpInfo(@javax.annotation.Nonnull String clientid, @javax.annotation.Nonnull String date) throws ApiException {
        okhttp3.Call localVarCall = remittanceReportRequestValidateBeforeCall(clientid, date, null);
        Type localVarReturnType = new TypeToken<RemittedClientData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remittance Date Report Request (asynchronously)
     * Fetches remittance reports for financial transactions for a given date,  covering all client-related activities. This report consolidates all batches disbursed to a  client, with each remittance summarising the aggregation of batches leading up to settlement.  Additionally, the net remittance amount presented in the final settlement will reflect any  deductions made by the acquirer.  The process also supports the notion of *today* deferring the date to today&#39;s date or *latest* reflecting the latest remittance date available. 
     * @param clientid A client Id for which data is requested. (required)
     * @param date Date (YYYY-MM-DD) to filter the request for. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A report of the financial remittance data for a given date. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Should the incoming data not be validly determined. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. No api key has been provided and is required for this operation. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The api key was provided and understood but is either incorrect or does not have permission to access the account provided on the request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity. Should a failure occur that prevents processing of the API call. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error. The server was unable to complete the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call remittanceReportRequestAsync(@javax.annotation.Nonnull String clientid, @javax.annotation.Nonnull String date, final ApiCallback<RemittedClientData> _callback) throws ApiException {

        okhttp3.Call localVarCall = remittanceReportRequestValidateBeforeCall(clientid, date, _callback);
        Type localVarReturnType = new TypeToken<RemittedClientData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transactionReportRequest
     * @param transactionReportRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A report of the transactions processed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Should the incoming data not be validly determined. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. No api key has been provided and is required for this operation. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The api key was provided and understood but is either incorrect or does not have permission to access the account provided on the request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity. Should a failure occur that prevents processing of the API call. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error. The server was unable to complete the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionReportRequestCall(@javax.annotation.Nonnull TransactionReportRequest transactionReportRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transactionReportRequest;

        // create path and map variables
        String localVarPath = "/v6/transactions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "cp-api-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transactionReportRequestValidateBeforeCall(@javax.annotation.Nonnull TransactionReportRequest transactionReportRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transactionReportRequest' is set
        if (transactionReportRequest == null) {
            throw new ApiException("Missing the required parameter 'transactionReportRequest' when calling transactionReportRequest(Async)");
        }

        return transactionReportRequestCall(transactionReportRequest, _callback);

    }

    /**
     * Transaction Report Request
     * Retrieve a paginated report of transaction activity within a specified time range. Supports filters by transaction type,  result state, merchant ID, and allows field selection or predefined response modes for optimal data handling. 
     * @param transactionReportRequest  (required)
     * @return BatchTransactionReportResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A report of the transactions processed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Should the incoming data not be validly determined. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. No api key has been provided and is required for this operation. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The api key was provided and understood but is either incorrect or does not have permission to access the account provided on the request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity. Should a failure occur that prevents processing of the API call. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error. The server was unable to complete the request. </td><td>  -  </td></tr>
     </table>
     */
    public BatchTransactionReportResponse transactionReportRequest(@javax.annotation.Nonnull TransactionReportRequest transactionReportRequest) throws ApiException {
        ApiResponse<BatchTransactionReportResponse> localVarResp = transactionReportRequestWithHttpInfo(transactionReportRequest);
        return localVarResp.getData();
    }

    /**
     * Transaction Report Request
     * Retrieve a paginated report of transaction activity within a specified time range. Supports filters by transaction type,  result state, merchant ID, and allows field selection or predefined response modes for optimal data handling. 
     * @param transactionReportRequest  (required)
     * @return ApiResponse&lt;BatchTransactionReportResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A report of the transactions processed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Should the incoming data not be validly determined. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. No api key has been provided and is required for this operation. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The api key was provided and understood but is either incorrect or does not have permission to access the account provided on the request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity. Should a failure occur that prevents processing of the API call. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error. The server was unable to complete the request. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BatchTransactionReportResponse> transactionReportRequestWithHttpInfo(@javax.annotation.Nonnull TransactionReportRequest transactionReportRequest) throws ApiException {
        okhttp3.Call localVarCall = transactionReportRequestValidateBeforeCall(transactionReportRequest, null);
        Type localVarReturnType = new TypeToken<BatchTransactionReportResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Transaction Report Request (asynchronously)
     * Retrieve a paginated report of transaction activity within a specified time range. Supports filters by transaction type,  result state, merchant ID, and allows field selection or predefined response modes for optimal data handling. 
     * @param transactionReportRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A report of the transactions processed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Should the incoming data not be validly determined. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. No api key has been provided and is required for this operation. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The api key was provided and understood but is either incorrect or does not have permission to access the account provided on the request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity. Should a failure occur that prevents processing of the API call. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error. The server was unable to complete the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionReportRequestAsync(@javax.annotation.Nonnull TransactionReportRequest transactionReportRequest, final ApiCallback<BatchTransactionReportResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = transactionReportRequestValidateBeforeCall(transactionReportRequest, _callback);
        Type localVarReturnType = new TypeToken<BatchTransactionReportResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
