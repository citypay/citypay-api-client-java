/*
 * CityPay Payment API
 *  Welcome to the CityPay API, a robust HTTP API payment solution designed for seamless server-to-server  transactional processing. Our API facilitates a wide array of payment operations, catering to diverse business needs.  Whether you're integrating Internet payments, handling Mail Order/Telephone Order (MOTO) transactions, managing  Subscriptions with Recurring and Continuous Authority payments, or navigating the complexities of 3-D Secure  authentication, our API is equipped to support your requirements. Additionally, we offer functionalities for  Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids, and Completion processing, alongside the capability  for tokenised payments.  ## Compliance and Security Overview <aside class=\"notice\">   Ensuring the security of payment transactions and compliance with industry standards is paramount. Our API is    designed with stringent security measures and compliance protocols to safeguard sensitive information and meet    the rigorous requirements of Visa, MasterCard, and the PCI Security Standards Council. </aside>  ### Key Compliance and Security Measures  * **TLS Encryption**: All data transmissions must utilise TLS version 1.2 or higher, employing [strong cryptography](#enabled-tls-ciphers). Our infrastructure strictly enforces this requirement to maintain the integrity and confidentiality of data in transit. We conduct regular scans and assessments of our TLS endpoints to identify and mitigate vulnerabilities. * **Data Storage Prohibitions**: Storing sensitive cardholder data (CHD), such as the card security code (CSC) or primary account number (PAN), is strictly prohibited. Our API is designed to minimize your exposure to sensitive data, thereby reducing your compliance burden. * **Data Masking**: For consumer protection and compliance, full card numbers must not be displayed on receipts or any customer-facing materials. Our API automatically masks PANs, displaying only the last four digits to facilitate safe receipt generation. * **Network Scans**: If your application is web-based, regular scans of your hosting environment are mandatory to identify and rectify potential vulnerabilities. This proactive measure is crucial for maintaining a secure and compliant online presence. * **PCI Compliance**: Adherence to PCI DSS standards is not optional; it's a requirement for operating securely and legally in the payments ecosystem. For detailed information on compliance requirements and resources, please visit the PCI Security Standards Council website [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/). * **Request Validation**: Our API includes mechanisms to verify the legitimacy of each request, ensuring it pertains to a valid account and originates from a trusted source. We leverage remote IP address verification alongside sophisticated application firewall technologies to thwart a wide array of common security threats.  ## Getting Started Before integrating with the CityPay API, ensure your application and development practices align with the outlined compliance and security measures. This preparatory step is crucial for a smooth integration process and the long-term success of your payment processing operations.  For further details on API endpoints, request/response formats, and code examples, proceed to the subsequent sections of our documentation. Our aim is to provide you with all the necessary tools and information to integrate our payment processing capabilities seamlessly into your application.  Thank you for choosing CityPay API. We look forward to supporting your payment processing needs with our secure, compliant, and versatile API solution. 
 *
 * Contact: support@citypay.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.citypay.client;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.internal.bind.util.ISO8601Utils;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonElement;
import io.gsonfire.GsonFireBuilder;
import io.gsonfire.TypeSelector;

import okio.ByteString;

import java.io.IOException;
import java.io.StringReader;
import java.lang.reflect.Type;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.ParsePosition;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import java.util.Locale;
import java.util.Map;
import java.util.HashMap;

/*
 * A JSON utility class
 *
 * NOTE: in the future, this class may be converted to static, which may break
 *       backward-compatibility
 */
public class JSON {
    private static Gson gson;
    private static boolean isLenientOnJson = false;
    private static DateTypeAdapter dateTypeAdapter = new DateTypeAdapter();
    private static SqlDateTypeAdapter sqlDateTypeAdapter = new SqlDateTypeAdapter();
    private static OffsetDateTimeTypeAdapter offsetDateTimeTypeAdapter = new OffsetDateTimeTypeAdapter();
    private static LocalDateTypeAdapter localDateTypeAdapter = new LocalDateTypeAdapter();
    private static ByteArrayAdapter byteArrayAdapter = new ByteArrayAdapter();

    @SuppressWarnings("unchecked")
    public static GsonBuilder createGson() {
        GsonFireBuilder fireBuilder = new GsonFireBuilder()
        ;
        GsonBuilder builder = fireBuilder.createGsonBuilder();
        return builder;
    }

    private static String getDiscriminatorValue(JsonElement readElement, String discriminatorField) {
        JsonElement element = readElement.getAsJsonObject().get(discriminatorField);
        if (null == element) {
            throw new IllegalArgumentException("missing discriminator field: <" + discriminatorField + ">");
        }
        return element.getAsString();
    }

    /**
     * Returns the Java class that implements the OpenAPI schema for the specified discriminator value.
     *
     * @param classByDiscriminatorValue The map of discriminator values to Java classes.
     * @param discriminatorValue The value of the OpenAPI discriminator in the input data.
     * @return The Java class that implements the OpenAPI schema
     */
    private static Class getClassByDiscriminator(Map classByDiscriminatorValue, String discriminatorValue) {
        Class clazz = (Class) classByDiscriminatorValue.get(discriminatorValue);
        if (null == clazz) {
            throw new IllegalArgumentException("cannot determine model class of name: <" + discriminatorValue + ">");
        }
        return clazz;
    }

    {
        GsonBuilder gsonBuilder = createGson();
        gsonBuilder.registerTypeAdapter(Date.class, dateTypeAdapter);
        gsonBuilder.registerTypeAdapter(java.sql.Date.class, sqlDateTypeAdapter);
        gsonBuilder.registerTypeAdapter(OffsetDateTime.class, offsetDateTimeTypeAdapter);
        gsonBuilder.registerTypeAdapter(LocalDate.class, localDateTypeAdapter);
        gsonBuilder.registerTypeAdapter(byte[].class, byteArrayAdapter);
        gsonBuilder.registerTypeAdapterFactory(new com.citypay.client.model.AccountCreate.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.citypay.client.model.AccountStatus.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.citypay.client.model.Acknowledgement.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.citypay.client.model.AclCheckRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.citypay.client.model.AclCheckResponseModel.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.citypay.client.model.AirlineAdvice.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.citypay.client.model.AirlineSegment.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.citypay.client.model.AuthReference.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.citypay.client.model.AuthReferences.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.citypay.client.model.AuthRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.citypay.client.model.AuthResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.citypay.client.model.AuthenRequired.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.citypay.client.model.Batch.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.citypay.client.model.BatchReportRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.citypay.client.model.BatchReportResponseModel.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.citypay.client.model.BatchTransaction.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.citypay.client.model.BatchTransactionReportRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.citypay.client.model.BatchTransactionReportResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.citypay.client.model.BatchTransactionResultModel.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.citypay.client.model.Bin.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.citypay.client.model.BinLookup.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.citypay.client.model.CResAuthRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.citypay.client.model.CaptureRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.citypay.client.model.Card.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.citypay.client.model.CardHolderAccount.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.citypay.client.model.CardStatus.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.citypay.client.model.ChargeRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.citypay.client.model.CheckBatchStatus.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.citypay.client.model.CheckBatchStatusResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.citypay.client.model.ContactDetails.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.citypay.client.model.Decision.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.citypay.client.model.DirectPostRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.citypay.client.model.DirectTokenAuthRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.citypay.client.model.DomainKeyCheckRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.citypay.client.model.DomainKeyRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.citypay.client.model.DomainKeyResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.citypay.client.model.Error.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.citypay.client.model.EventDataModel.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.citypay.client.model.Exists.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.citypay.client.model.ExternalMPI.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.citypay.client.model.ListMerchantsResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.citypay.client.model.MCC6012.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.citypay.client.model.Merchant.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.citypay.client.model.MerchantBatchReportResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.citypay.client.model.MerchantBatchRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.citypay.client.model.MerchantBatchResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.citypay.client.model.NetSummaryResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.citypay.client.model.PaResAuthRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.citypay.client.model.PaylinkAddress.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.citypay.client.model.PaylinkAdjustmentRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.citypay.client.model.PaylinkAttachmentRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.citypay.client.model.PaylinkAttachmentResult.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.citypay.client.model.PaylinkBillPaymentTokenRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.citypay.client.model.PaylinkCardHolder.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.citypay.client.model.PaylinkCart.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.citypay.client.model.PaylinkCartItemModel.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.citypay.client.model.PaylinkConfig.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.citypay.client.model.PaylinkCustomParam.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.citypay.client.model.PaylinkEmailNotificationPath.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.citypay.client.model.PaylinkErrorCode.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.citypay.client.model.PaylinkFieldGuardModel.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.citypay.client.model.PaylinkPartPayments.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.citypay.client.model.PaylinkResendNotificationRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.citypay.client.model.PaylinkSMSNotificationPath.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.citypay.client.model.PaylinkStateEvent.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.citypay.client.model.PaylinkTokenCreated.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.citypay.client.model.PaylinkTokenRequestModel.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.citypay.client.model.PaylinkTokenStatus.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.citypay.client.model.PaylinkTokenStatusChangeRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.citypay.client.model.PaylinkTokenStatusChangeResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.citypay.client.model.PaylinkUI.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.citypay.client.model.PaymentIntent.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.citypay.client.model.PaymentIntentReference.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.citypay.client.model.Ping.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.citypay.client.model.ProcessBatchRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.citypay.client.model.ProcessBatchResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.citypay.client.model.RefundRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.citypay.client.model.RegisterCard.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.citypay.client.model.RemittanceData.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.citypay.client.model.RemittanceReportRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.citypay.client.model.RemittanceReportResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.citypay.client.model.RemittedClientData.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.citypay.client.model.RequestChallenged.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.citypay.client.model.RetrieveRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.citypay.client.model.ThreeDSecure.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.citypay.client.model.TokenisationResponseModel.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.citypay.client.model.VoidRequest.CustomTypeAdapterFactory());
        gson = gsonBuilder.create();
    }

    /**
     * Get Gson.
     *
     * @return Gson
     */
    public static Gson getGson() {
        return gson;
    }

    /**
     * Set Gson.
     *
     * @param gson Gson
     */
    public static void setGson(Gson gson) {
        JSON.gson = gson;
    }

    public static void setLenientOnJson(boolean lenientOnJson) {
        isLenientOnJson = lenientOnJson;
    }

    /**
     * Serialize the given Java object into JSON string.
     *
     * @param obj Object
     * @return String representation of the JSON
     */
    public static String serialize(Object obj) {
        return gson.toJson(obj);
    }

    /**
     * Deserialize the given JSON string to Java object.
     *
     * @param <T>        Type
     * @param body       The JSON string
     * @param returnType The type to deserialize into
     * @return The deserialized Java object
     */
    @SuppressWarnings("unchecked")
    public static <T> T deserialize(String body, Type returnType) {
        try {
            if (isLenientOnJson) {
                JsonReader jsonReader = new JsonReader(new StringReader(body));
                // see https://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/com/google/gson/stream/JsonReader.html#setLenient(boolean)
                jsonReader.setLenient(true);
                return gson.fromJson(jsonReader, returnType);
            } else {
                return gson.fromJson(body, returnType);
            }
        } catch (JsonParseException e) {
            // Fallback processing when failed to parse JSON form response body:
            // return the response body string directly for the String return type;
            if (returnType.equals(String.class)) {
                return (T) body;
            } else {
                throw (e);
            }
        }
    }

    /**
     * Gson TypeAdapter for Byte Array type
     */
    public static class ByteArrayAdapter extends TypeAdapter<byte[]> {

        @Override
        public void write(JsonWriter out, byte[] value) throws IOException {
            if (value == null) {
                out.nullValue();
            } else {
                out.value(ByteString.of(value).base64());
            }
        }

        @Override
        public byte[] read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String bytesAsBase64 = in.nextString();
                    ByteString byteString = ByteString.decodeBase64(bytesAsBase64);
                    return byteString.toByteArray();
            }
        }
    }

    /**
     * Gson TypeAdapter for JSR310 OffsetDateTime type
     */
    public static class OffsetDateTimeTypeAdapter extends TypeAdapter<OffsetDateTime> {

        private DateTimeFormatter formatter;

        public OffsetDateTimeTypeAdapter() {
            this(DateTimeFormatter.ISO_OFFSET_DATE_TIME);
        }

        public OffsetDateTimeTypeAdapter(DateTimeFormatter formatter) {
            this.formatter = formatter;
        }

        public void setFormat(DateTimeFormatter dateFormat) {
            this.formatter = dateFormat;
        }

        @Override
        public void write(JsonWriter out, OffsetDateTime date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                out.value(formatter.format(date));
            }
        }

        @Override
        public OffsetDateTime read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String date = in.nextString();
                    if (date.endsWith("+0000")) {
                        date = date.substring(0, date.length()-5) + "Z";
                    }
                    return OffsetDateTime.parse(date, formatter);
            }
        }
    }

    /**
     * Gson TypeAdapter for JSR310 LocalDate type
     */
    public static class LocalDateTypeAdapter extends TypeAdapter<LocalDate> {

        private DateTimeFormatter formatter;

        public LocalDateTypeAdapter() {
            this(DateTimeFormatter.ISO_LOCAL_DATE);
        }

        public LocalDateTypeAdapter(DateTimeFormatter formatter) {
            this.formatter = formatter;
        }

        public void setFormat(DateTimeFormatter dateFormat) {
            this.formatter = dateFormat;
        }

        @Override
        public void write(JsonWriter out, LocalDate date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                out.value(formatter.format(date));
            }
        }

        @Override
        public LocalDate read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String date = in.nextString();
                    return LocalDate.parse(date, formatter);
            }
        }
    }

    public static void setOffsetDateTimeFormat(DateTimeFormatter dateFormat) {
        offsetDateTimeTypeAdapter.setFormat(dateFormat);
    }

    public static void setLocalDateFormat(DateTimeFormatter dateFormat) {
        localDateTypeAdapter.setFormat(dateFormat);
    }

    /**
     * Gson TypeAdapter for java.sql.Date type
     * If the dateFormat is null, a simple "yyyy-MM-dd" format will be used
     * (more efficient than SimpleDateFormat).
     */
    public static class SqlDateTypeAdapter extends TypeAdapter<java.sql.Date> {

        private DateFormat dateFormat;

        public SqlDateTypeAdapter() {}

        public SqlDateTypeAdapter(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        public void setFormat(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        @Override
        public void write(JsonWriter out, java.sql.Date date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                String value;
                if (dateFormat != null) {
                    value = dateFormat.format(date);
                } else {
                    value = date.toString();
                }
                out.value(value);
            }
        }

        @Override
        public java.sql.Date read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String date = in.nextString();
                    try {
                        if (dateFormat != null) {
                            return new java.sql.Date(dateFormat.parse(date).getTime());
                        }
                        return new java.sql.Date(ISO8601Utils.parse(date, new ParsePosition(0)).getTime());
                    } catch (ParseException e) {
                        throw new JsonParseException(e);
                    }
            }
        }
    }

    /**
     * Gson TypeAdapter for java.util.Date type
     * If the dateFormat is null, ISO8601Utils will be used.
     */
    public static class DateTypeAdapter extends TypeAdapter<Date> {

        private DateFormat dateFormat;

        public DateTypeAdapter() {}

        public DateTypeAdapter(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        public void setFormat(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        @Override
        public void write(JsonWriter out, Date date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                String value;
                if (dateFormat != null) {
                    value = dateFormat.format(date);
                } else {
                    value = ISO8601Utils.format(date, true);
                }
                out.value(value);
            }
        }

        @Override
        public Date read(JsonReader in) throws IOException {
            try {
                switch (in.peek()) {
                    case NULL:
                        in.nextNull();
                        return null;
                    default:
                        String date = in.nextString();
                        try {
                            if (dateFormat != null) {
                                return dateFormat.parse(date);
                            }
                            return ISO8601Utils.parse(date, new ParsePosition(0));
                        } catch (ParseException e) {
                            throw new JsonParseException(e);
                        }
                }
            } catch (IllegalArgumentException e) {
                throw new JsonParseException(e);
            }
        }
    }

    public static void setDateFormat(DateFormat dateFormat) {
        dateTypeAdapter.setFormat(dateFormat);
    }

    public static void setSqlDateFormat(DateFormat dateFormat) {
        sqlDateTypeAdapter.setFormat(dateFormat);
    }
}
