/*
 * CityPay Payment API
 *  This CityPay API is a HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokinsed payments using Card Holder Accounts.  ## Compliance and Security Your application will need to adhere to PCI-DSS standards to operate safely and to meet requirements set out by  Visa and MasterCard and the PCI Security Standards Council. These include  * Data must be collected using TLS version 1.2 using [strong cryptography](#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive card holder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities. 
 *
 * Contact: support@citypay.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.citypay.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * DirectTokenAuthRequest
 */
public class DirectTokenAuthRequest {
  public static final String SERIALIZED_NAME_NONCE = "nonce";
  @SerializedName(SERIALIZED_NAME_NONCE)
  private String nonce;

  public static final String SERIALIZED_NAME_REDIRECT_FAILURE = "redirect_failure";
  @SerializedName(SERIALIZED_NAME_REDIRECT_FAILURE)
  private String redirectFailure;

  public static final String SERIALIZED_NAME_REDIRECT_SUCCESS = "redirect_success";
  @SerializedName(SERIALIZED_NAME_REDIRECT_SUCCESS)
  private String redirectSuccess;

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  private String token;


  public DirectTokenAuthRequest nonce(String nonce) {
    
    this.nonce = nonce;
    return this;
  }

   /**
   * A random value string which is provided to the API to perform a digest. The value will be used by its UTF-8 byte representation of any digest function. 
   * @return nonce
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0123456789ABCDEF", value = "A random value string which is provided to the API to perform a digest. The value will be used by its UTF-8 byte representation of any digest function. ")

  public String getNonce() {
    return nonce;
  }


  public void setNonce(String nonce) {
    this.nonce = nonce;
  }


  public DirectTokenAuthRequest redirectFailure(String redirectFailure) {
    
    this.redirectFailure = redirectFailure;
    return this;
  }

   /**
   * The URL used to redirect back to your site when a transaction has been rejected or declined. Required if a url-encoded request. 
   * @return redirectFailure
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://pay.mystore.com/continue_failure", value = "The URL used to redirect back to your site when a transaction has been rejected or declined. Required if a url-encoded request. ")

  public String getRedirectFailure() {
    return redirectFailure;
  }


  public void setRedirectFailure(String redirectFailure) {
    this.redirectFailure = redirectFailure;
  }


  public DirectTokenAuthRequest redirectSuccess(String redirectSuccess) {
    
    this.redirectSuccess = redirectSuccess;
    return this;
  }

   /**
   * The URL used to redirect back to your site when a transaction has been authorised. Required if a url-encoded request. 
   * @return redirectSuccess
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://pay.mystore.com/continue_success", value = "The URL used to redirect back to your site when a transaction has been authorised. Required if a url-encoded request. ")

  public String getRedirectSuccess() {
    return redirectSuccess;
  }


  public void setRedirectSuccess(String redirectSuccess) {
    this.redirectSuccess = redirectSuccess;
  }


  public DirectTokenAuthRequest token(String token) {
    
    this.token = token;
    return this;
  }

   /**
   * The token required to process the transaction as presented by the direct post methodology. 
   * @return token
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "ctPCAPyNyCkx3Ry8wGyv8khC3ch2hUSB3Db..Qzr", value = "The token required to process the transaction as presented by the direct post methodology. ")

  public String getToken() {
    return token;
  }


  public void setToken(String token) {
    this.token = token;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DirectTokenAuthRequest directTokenAuthRequest = (DirectTokenAuthRequest) o;
    return Objects.equals(this.nonce, directTokenAuthRequest.nonce) &&
        Objects.equals(this.redirectFailure, directTokenAuthRequest.redirectFailure) &&
        Objects.equals(this.redirectSuccess, directTokenAuthRequest.redirectSuccess) &&
        Objects.equals(this.token, directTokenAuthRequest.token);
  }

  @Override
  public int hashCode() {
    return Objects.hash(nonce, redirectFailure, redirectSuccess, token);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DirectTokenAuthRequest {\n");
    sb.append("    nonce: ").append(toIndentedString(nonce)).append("\n");
    sb.append("    redirectFailure: ").append(toIndentedString(redirectFailure)).append("\n");
    sb.append("    redirectSuccess: ").append(toIndentedString(redirectSuccess)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

