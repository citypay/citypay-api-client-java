/*
 * CityPay Payment API
 *  This CityPay API is a HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokinsed payments using Card Holder Accounts.  ## Compliance and Security Your application will need to adhere to PCI-DSS standards to operate safely and to meet requirements set out by  Visa and MasterCard and the PCI Security Standards Council. These include  * Data must be collected using TLS version 1.2 using [strong cryptography](#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive card holder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities. 
 *
 * Contact: support@citypay.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.citypay.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.citypay.client.model.PaylinkAddress;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.citypay.client.JSON;

/**
 * PaylinkCardHolder
 */
public class PaylinkCardHolder {
  public static final String SERIALIZED_NAME_ACCEPT_HEADERS = "accept_headers";
  @SerializedName(SERIALIZED_NAME_ACCEPT_HEADERS)
  private String acceptHeaders;

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private PaylinkAddress address;

  public static final String SERIALIZED_NAME_COMPANY = "company";
  @SerializedName(SERIALIZED_NAME_COMPANY)
  private String company;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_FIRSTNAME = "firstname";
  @SerializedName(SERIALIZED_NAME_FIRSTNAME)
  private String firstname;

  public static final String SERIALIZED_NAME_LASTNAME = "lastname";
  @SerializedName(SERIALIZED_NAME_LASTNAME)
  private String lastname;

  public static final String SERIALIZED_NAME_MOBILE_NO = "mobile_no";
  @SerializedName(SERIALIZED_NAME_MOBILE_NO)
  private String mobileNo;

  public static final String SERIALIZED_NAME_REMOTE_ADDR = "remote_addr";
  @SerializedName(SERIALIZED_NAME_REMOTE_ADDR)
  private String remoteAddr;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_USER_AGENT = "user_agent";
  @SerializedName(SERIALIZED_NAME_USER_AGENT)
  private String userAgent;

  public PaylinkCardHolder() {
  }

  public PaylinkCardHolder acceptHeaders(String acceptHeaders) {
    
    this.acceptHeaders = acceptHeaders;
    return this;
  }

   /**
   * The accept headers string generated by the Customer Browser. This field may be used to lock the payment process to the customer&#39;s browser. If the customer were to attempt to use a different browser an error will be generated.
   * @return acceptHeaders
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The accept headers string generated by the Customer Browser. This field may be used to lock the payment process to the customer's browser. If the customer were to attempt to use a different browser an error will be generated.")

  public String getAcceptHeaders() {
    return acceptHeaders;
  }


  public void setAcceptHeaders(String acceptHeaders) {
    this.acceptHeaders = acceptHeaders;
  }


  public PaylinkCardHolder address(PaylinkAddress address) {
    
    this.address = address;
    return this;
  }

   /**
   * Get address
   * @return address
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PaylinkAddress getAddress() {
    return address;
  }


  public void setAddress(PaylinkAddress address) {
    this.address = address;
  }


  public PaylinkCardHolder company(String company) {
    
    this.company = company;
    return this;
  }

   /**
   * The company name for the card holder.
   * @return company
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Acme Ltd", value = "The company name for the card holder.")

  public String getCompany() {
    return company;
  }


  public void setCompany(String company) {
    this.company = company;
  }


  public PaylinkCardHolder email(String email) {
    
    this.email = email;
    return this;
  }

   /**
   * The cardholder&#39;s email address. This field can be used to send a receipt to the payment cardholder. If this value is not supplied, no email will be sent.
   * @return email
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "card.holder@citypay.com", value = "The cardholder's email address. This field can be used to send a receipt to the payment cardholder. If this value is not supplied, no email will be sent.")

  public String getEmail() {
    return email;
  }


  public void setEmail(String email) {
    this.email = email;
  }


  public PaylinkCardHolder firstname(String firstname) {
    
    this.firstname = firstname;
    return this;
  }

   /**
   * The first name of the card holder.
   * @return firstname
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "John", value = "The first name of the card holder.")

  public String getFirstname() {
    return firstname;
  }


  public void setFirstname(String firstname) {
    this.firstname = firstname;
  }


  public PaylinkCardHolder lastname(String lastname) {
    
    this.lastname = lastname;
    return this;
  }

   /**
   * The last name or surname of the card holder.
   * @return lastname
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Smith", value = "The last name or surname of the card holder.")

  public String getLastname() {
    return lastname;
  }


  public void setLastname(String lastname) {
    this.lastname = lastname;
  }


  public PaylinkCardHolder mobileNo(String mobileNo) {
    
    this.mobileNo = mobileNo;
    return this;
  }

   /**
   * The mobile number of the cardholder. This can be used for data collection via the Paylink Payment Form or to send an SMS on completion of a transaction. This feature is a licensable option and is not configured by default.
   * @return mobileNo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "447790123456", value = "The mobile number of the cardholder. This can be used for data collection via the Paylink Payment Form or to send an SMS on completion of a transaction. This feature is a licensable option and is not configured by default.")

  public String getMobileNo() {
    return mobileNo;
  }


  public void setMobileNo(String mobileNo) {
    this.mobileNo = mobileNo;
  }


  public PaylinkCardHolder remoteAddr(String remoteAddr) {
    
    this.remoteAddr = remoteAddr;
    return this;
  }

   /**
   * Specifies the remote IP address of the customer&#39;s browser. This field may be used to lock the payment form to the customer&#39;s IP address. Should the address change or a malicious third party attempted to hijack the transaction, an error will be generated.
   * @return remoteAddr
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the remote IP address of the customer's browser. This field may be used to lock the payment form to the customer's IP address. Should the address change or a malicious third party attempted to hijack the transaction, an error will be generated.")

  public String getRemoteAddr() {
    return remoteAddr;
  }


  public void setRemoteAddr(String remoteAddr) {
    this.remoteAddr = remoteAddr;
  }


  public PaylinkCardHolder title(String title) {
    
    this.title = title;
    return this;
  }

   /**
   * A title for the card holder such as Mr, Mrs, Ms, M. Mme. etc.
   * @return title
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Mr", value = "A title for the card holder such as Mr, Mrs, Ms, M. Mme. etc.")

  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    this.title = title;
  }


  public PaylinkCardHolder userAgent(String userAgent) {
    
    this.userAgent = userAgent;
    return this;
  }

   /**
   * Specifies the user agent string of the Customer Browser. This field may be used to lock the payment form to the browser. Should a different user agent attempt to process the transaction or a malicious third party attempted to hijack the transaction, an error is generated.
   * @return userAgent
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the user agent string of the Customer Browser. This field may be used to lock the payment form to the browser. Should a different user agent attempt to process the transaction or a malicious third party attempted to hijack the transaction, an error is generated.")

  public String getUserAgent() {
    return userAgent;
  }


  public void setUserAgent(String userAgent) {
    this.userAgent = userAgent;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaylinkCardHolder paylinkCardHolder = (PaylinkCardHolder) o;
    return Objects.equals(this.acceptHeaders, paylinkCardHolder.acceptHeaders) &&
        Objects.equals(this.address, paylinkCardHolder.address) &&
        Objects.equals(this.company, paylinkCardHolder.company) &&
        Objects.equals(this.email, paylinkCardHolder.email) &&
        Objects.equals(this.firstname, paylinkCardHolder.firstname) &&
        Objects.equals(this.lastname, paylinkCardHolder.lastname) &&
        Objects.equals(this.mobileNo, paylinkCardHolder.mobileNo) &&
        Objects.equals(this.remoteAddr, paylinkCardHolder.remoteAddr) &&
        Objects.equals(this.title, paylinkCardHolder.title) &&
        Objects.equals(this.userAgent, paylinkCardHolder.userAgent);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acceptHeaders, address, company, email, firstname, lastname, mobileNo, remoteAddr, title, userAgent);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaylinkCardHolder {\n");
    sb.append("    acceptHeaders: ").append(toIndentedString(acceptHeaders)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    company: ").append(toIndentedString(company)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    firstname: ").append(toIndentedString(firstname)).append("\n");
    sb.append("    lastname: ").append(toIndentedString(lastname)).append("\n");
    sb.append("    mobileNo: ").append(toIndentedString(mobileNo)).append("\n");
    sb.append("    remoteAddr: ").append(toIndentedString(remoteAddr)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    userAgent: ").append(toIndentedString(userAgent)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accept_headers");
    openapiFields.add("address");
    openapiFields.add("company");
    openapiFields.add("email");
    openapiFields.add("firstname");
    openapiFields.add("lastname");
    openapiFields.add("mobile_no");
    openapiFields.add("remote_addr");
    openapiFields.add("title");
    openapiFields.add("user_agent");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PaylinkCardHolder
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (PaylinkCardHolder.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in PaylinkCardHolder is not found in the empty JSON string", PaylinkCardHolder.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!PaylinkCardHolder.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PaylinkCardHolder` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("accept_headers") != null && !jsonObj.get("accept_headers").isJsonNull()) && !jsonObj.get("accept_headers").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accept_headers` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accept_headers").toString()));
      }
      // validate the optional field `address`
      if (jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) {
        PaylinkAddress.validateJsonObject(jsonObj.getAsJsonObject("address"));
      }
      if ((jsonObj.get("company") != null && !jsonObj.get("company").isJsonNull()) && !jsonObj.get("company").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `company` to be a primitive type in the JSON string but got `%s`", jsonObj.get("company").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("firstname") != null && !jsonObj.get("firstname").isJsonNull()) && !jsonObj.get("firstname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstname").toString()));
      }
      if ((jsonObj.get("lastname") != null && !jsonObj.get("lastname").isJsonNull()) && !jsonObj.get("lastname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastname").toString()));
      }
      if ((jsonObj.get("mobile_no") != null && !jsonObj.get("mobile_no").isJsonNull()) && !jsonObj.get("mobile_no").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mobile_no` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mobile_no").toString()));
      }
      if ((jsonObj.get("remote_addr") != null && !jsonObj.get("remote_addr").isJsonNull()) && !jsonObj.get("remote_addr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `remote_addr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("remote_addr").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("user_agent") != null && !jsonObj.get("user_agent").isJsonNull()) && !jsonObj.get("user_agent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_agent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_agent").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PaylinkCardHolder.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PaylinkCardHolder' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PaylinkCardHolder> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PaylinkCardHolder.class));

       return (TypeAdapter<T>) new TypeAdapter<PaylinkCardHolder>() {
           @Override
           public void write(JsonWriter out, PaylinkCardHolder value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PaylinkCardHolder read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PaylinkCardHolder given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PaylinkCardHolder
  * @throws IOException if the JSON string is invalid with respect to PaylinkCardHolder
  */
  public static PaylinkCardHolder fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PaylinkCardHolder.class);
  }

 /**
  * Convert an instance of PaylinkCardHolder to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

