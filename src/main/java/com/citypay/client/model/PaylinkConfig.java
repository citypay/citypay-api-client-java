/*
 * CityPay Payment API
 *  Welcome to the CityPay API, a robust HTTP API payment solution designed for seamless server-to-server  transactional processing. Our API facilitates a wide array of payment operations, catering to diverse business needs.  Whether you're integrating Internet payments, handling Mail Order/Telephone Order (MOTO) transactions, managing  Subscriptions with Recurring and Continuous Authority payments, or navigating the complexities of 3-D Secure  authentication, our API is equipped to support your requirements. Additionally, we offer functionalities for  Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids, and Completion processing, alongside the capability  for tokenised payments.  ## Compliance and Security Overview <aside class=\"notice\">   Ensuring the security of payment transactions and compliance with industry standards is paramount. Our API is    designed with stringent security measures and compliance protocols to safeguard sensitive information and meet    the rigorous requirements of Visa, MasterCard, and the PCI Security Standards Council. </aside>  ### Key Compliance and Security Measures  * **TLS Encryption**: All data transmissions must utilise TLS version 1.2 or higher, employing [strong cryptography](#enabled-tls-ciphers). Our infrastructure strictly enforces this requirement to maintain the integrity and confidentiality of data in transit. We conduct regular scans and assessments of our TLS endpoints to identify and mitigate vulnerabilities. * **Data Storage Prohibitions**: Storing sensitive cardholder data (CHD), such as the card security code (CSC) or primary account number (PAN), is strictly prohibited. Our API is designed to minimize your exposure to sensitive data, thereby reducing your compliance burden. * **Data Masking**: For consumer protection and compliance, full card numbers must not be displayed on receipts or any customer-facing materials. Our API automatically masks PANs, displaying only the last four digits to facilitate safe receipt generation. * **Network Scans**: If your application is web-based, regular scans of your hosting environment are mandatory to identify and rectify potential vulnerabilities. This proactive measure is crucial for maintaining a secure and compliant online presence. * **PCI Compliance**: Adherence to PCI DSS standards is not optional; it's a requirement for operating securely and legally in the payments ecosystem. For detailed information on compliance requirements and resources, please visit the PCI Security Standards Council website [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/). * **Request Validation**: Our API includes mechanisms to verify the legitimacy of each request, ensuring it pertains to a valid account and originates from a trusted source. We leverage remote IP address verification alongside sophisticated application firewall technologies to thwart a wide array of common security threats.  ## Getting Started Before integrating with the CityPay API, ensure your application and development practices align with the outlined compliance and security measures. This preparatory step is crucial for a smooth integration process and the long-term success of your payment processing operations.  For further details on API endpoints, request/response formats, and code examples, proceed to the subsequent sections of our documentation. Our aim is to provide you with all the necessary tools and information to integrate our payment processing capabilities seamlessly into your application.  Thank you for choosing CityPay API. We look forward to supporting your payment processing needs with our secure, compliant, and versatile API solution. 
 *
 * Contact: support@citypay.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.citypay.client.model;

import java.util.Objects;
import com.citypay.client.model.PaylinkCustomParam;
import com.citypay.client.model.PaylinkFieldGuardModel;
import com.citypay.client.model.PaylinkPartPayments;
import com.citypay.client.model.PaylinkUI;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.citypay.client.JSON;

/**
 * PaylinkConfig
 */
public class PaylinkConfig {
  public static final String SERIALIZED_NAME_ACS_MODE = "acs_mode";
  @SerializedName(SERIALIZED_NAME_ACS_MODE)
  private String acsMode;

  public static final String SERIALIZED_NAME_CUSTOM_PARAMS = "custom_params";
  @SerializedName(SERIALIZED_NAME_CUSTOM_PARAMS)
  private List<PaylinkCustomParam> customParams;

  public static final String SERIALIZED_NAME_DESCRIPTOR = "descriptor";
  @SerializedName(SERIALIZED_NAME_DESCRIPTOR)
  private String descriptor;

  public static final String SERIALIZED_NAME_EXPIRE_IN = "expire_in";
  @SerializedName(SERIALIZED_NAME_EXPIRE_IN)
  private String expireIn;

  public static final String SERIALIZED_NAME_FIELD_GUARD = "field_guard";
  @SerializedName(SERIALIZED_NAME_FIELD_GUARD)
  private List<PaylinkFieldGuardModel> fieldGuard;

  public static final String SERIALIZED_NAME_LOCK_PARAMS = "lock_params";
  @SerializedName(SERIALIZED_NAME_LOCK_PARAMS)
  private List<String> lockParams;

  public static final String SERIALIZED_NAME_MERCH_LOGO = "merch_logo";
  @SerializedName(SERIALIZED_NAME_MERCH_LOGO)
  private String merchLogo;

  public static final String SERIALIZED_NAME_MERCH_TERMS = "merch_terms";
  @SerializedName(SERIALIZED_NAME_MERCH_TERMS)
  private String merchTerms;

  public static final String SERIALIZED_NAME_OPTIONS = "options";
  @SerializedName(SERIALIZED_NAME_OPTIONS)
  private List<String> options;

  public static final String SERIALIZED_NAME_PART_PAYMENTS = "part_payments";
  @SerializedName(SERIALIZED_NAME_PART_PAYMENTS)
  private PaylinkPartPayments partPayments;

  public static final String SERIALIZED_NAME_PASS_THROUGH_DATA = "pass_through_data";
  @SerializedName(SERIALIZED_NAME_PASS_THROUGH_DATA)
  private Map<String, String> passThroughData = new HashMap<>();

  public static final String SERIALIZED_NAME_PASS_THROUGH_HEADERS = "pass_through_headers";
  @SerializedName(SERIALIZED_NAME_PASS_THROUGH_HEADERS)
  private Map<String, String> passThroughHeaders = new HashMap<>();

  public static final String SERIALIZED_NAME_POSTBACK = "postback";
  @SerializedName(SERIALIZED_NAME_POSTBACK)
  private String postback;

  public static final String SERIALIZED_NAME_POSTBACK_PASSWORD = "postback_password";
  @SerializedName(SERIALIZED_NAME_POSTBACK_PASSWORD)
  private String postbackPassword;

  public static final String SERIALIZED_NAME_POSTBACK_POLICY = "postback_policy";
  @SerializedName(SERIALIZED_NAME_POSTBACK_POLICY)
  private String postbackPolicy;

  public static final String SERIALIZED_NAME_POSTBACK_USERNAME = "postback_username";
  @SerializedName(SERIALIZED_NAME_POSTBACK_USERNAME)
  private String postbackUsername;

  public static final String SERIALIZED_NAME_REDIRECT_DELAY = "redirect_delay";
  @SerializedName(SERIALIZED_NAME_REDIRECT_DELAY)
  private Integer redirectDelay;

  public static final String SERIALIZED_NAME_REDIRECT_FAILURE = "redirect_failure";
  @SerializedName(SERIALIZED_NAME_REDIRECT_FAILURE)
  private String redirectFailure;

  public static final String SERIALIZED_NAME_REDIRECT_SUCCESS = "redirect_success";
  @SerializedName(SERIALIZED_NAME_REDIRECT_SUCCESS)
  private String redirectSuccess;

  public static final String SERIALIZED_NAME_RENDERER = "renderer";
  @SerializedName(SERIALIZED_NAME_RENDERER)
  private String renderer;

  public static final String SERIALIZED_NAME_RETURN_PARAMS = "return_params";
  @SerializedName(SERIALIZED_NAME_RETURN_PARAMS)
  private Boolean returnParams;

  public static final String SERIALIZED_NAME_UI = "ui";
  @SerializedName(SERIALIZED_NAME_UI)
  private PaylinkUI ui;

  public PaylinkConfig() {
  }

  public PaylinkConfig acsMode(String acsMode) {
    this.acsMode = acsMode;
    return this;
  }

   /**
   * Specifies the approach to be adopted by the Paylink form when displaying a 3-D Secure challenge window. The values may be  iframe: shows the 3-D Secure ACS in an iframe dialog, neatly embedding it in Paylink. This provides a more seamless flow for the cardholder who is able to validate and authenticate their card using a dialog provided by their card issuer.  inline: an inline mode transfers the full browser window to the authentication server, allowing the payment cardholder to see their payment card issuer&#39;s URL and the certificate status in the browser. If you request an iframe mode and the browser width is deemed as being small (&lt; 768px) then an inline mode will be enforced. This is to ensure that mobile users have an improved user experience. 
   * @return acsMode
  **/
  @javax.annotation.Nullable
  public String getAcsMode() {
    return acsMode;
  }

  public void setAcsMode(String acsMode) {
    this.acsMode = acsMode;
  }


  public PaylinkConfig customParams(List<PaylinkCustomParam> customParams) {
    this.customParams = customParams;
    return this;
  }

  public PaylinkConfig addCustomParamsItem(PaylinkCustomParam customParamsItem) {
    if (this.customParams == null) {
      this.customParams = new ArrayList<>();
    }
    this.customParams.add(customParamsItem);
    return this;
  }

   /**
   * Get customParams
   * @return customParams
  **/
  @javax.annotation.Nullable
  public List<PaylinkCustomParam> getCustomParams() {
    return customParams;
  }

  public void setCustomParams(List<PaylinkCustomParam> customParams) {
    this.customParams = customParams;
  }


  public PaylinkConfig descriptor(String descriptor) {
    this.descriptor = descriptor;
    return this;
  }

   /**
   * Directly specify the merchant descriptor used for the transaction to be displayed on the payment page.
   * @return descriptor
  **/
  @javax.annotation.Nullable
  public String getDescriptor() {
    return descriptor;
  }

  public void setDescriptor(String descriptor) {
    this.descriptor = descriptor;
  }


  public PaylinkConfig expireIn(String expireIn) {
    this.expireIn = expireIn;
    return this;
  }

   /**
   * Specifies a period of time in seconds after which the token cannot be used. A value of 0 defines that the token will never expire. The API will convert an expiry time based on a string value. For instance:   s - Time in seconds, for example 90s.   m - Time in minutes, for example 20m.   h - Time in hours, for example 4h.   w - Time in weeks, for example 4w.   M - Time in months, for example 6M.   y - Time in years, for example 1y.   Defaults to 30 minutes. 
   * @return expireIn
  **/
  @javax.annotation.Nullable
  public String getExpireIn() {
    return expireIn;
  }

  public void setExpireIn(String expireIn) {
    this.expireIn = expireIn;
  }


  public PaylinkConfig fieldGuard(List<PaylinkFieldGuardModel> fieldGuard) {
    this.fieldGuard = fieldGuard;
    return this;
  }

  public PaylinkConfig addFieldGuardItem(PaylinkFieldGuardModel fieldGuardItem) {
    if (this.fieldGuard == null) {
      this.fieldGuard = new ArrayList<>();
    }
    this.fieldGuard.add(fieldGuardItem);
    return this;
  }

   /**
   * Get fieldGuard
   * @return fieldGuard
  **/
  @javax.annotation.Nullable
  public List<PaylinkFieldGuardModel> getFieldGuard() {
    return fieldGuard;
  }

  public void setFieldGuard(List<PaylinkFieldGuardModel> fieldGuard) {
    this.fieldGuard = fieldGuard;
  }


  public PaylinkConfig lockParams(List<String> lockParams) {
    this.lockParams = lockParams;
    return this;
  }

  public PaylinkConfig addLockParamsItem(String lockParamsItem) {
    if (this.lockParams == null) {
      this.lockParams = new ArrayList<>();
    }
    this.lockParams.add(lockParamsItem);
    return this;
  }

   /**
   * Get lockParams
   * @return lockParams
  **/
  @javax.annotation.Nullable
  public List<String> getLockParams() {
    return lockParams;
  }

  public void setLockParams(List<String> lockParams) {
    this.lockParams = lockParams;
  }


  public PaylinkConfig merchLogo(String merchLogo) {
    this.merchLogo = merchLogo;
    return this;
  }

   /**
   * A URL of a logo to include in the form. The URL should be delivered using HTTPS.
   * @return merchLogo
  **/
  @javax.annotation.Nullable
  public String getMerchLogo() {
    return merchLogo;
  }

  public void setMerchLogo(String merchLogo) {
    this.merchLogo = merchLogo;
  }


  public PaylinkConfig merchTerms(String merchTerms) {
    this.merchTerms = merchTerms;
    return this;
  }

   /**
   * A URL of the merchant terms and conditions for payment. If a value is supplied, a checkbox will be required to be completed to confirm that the cardholder agrees to these conditions before payment. A modal dialogue is displayed with the content of the conditions displayed.
   * @return merchTerms
  **/
  @javax.annotation.Nullable
  public String getMerchTerms() {
    return merchTerms;
  }

  public void setMerchTerms(String merchTerms) {
    this.merchTerms = merchTerms;
  }


  public PaylinkConfig options(List<String> options) {
    this.options = options;
    return this;
  }

  public PaylinkConfig addOptionsItem(String optionsItem) {
    if (this.options == null) {
      this.options = new ArrayList<>();
    }
    this.options.add(optionsItem);
    return this;
  }

   /**
   * Get options
   * @return options
  **/
  @javax.annotation.Nullable
  public List<String> getOptions() {
    return options;
  }

  public void setOptions(List<String> options) {
    this.options = options;
  }


  public PaylinkConfig partPayments(PaylinkPartPayments partPayments) {
    this.partPayments = partPayments;
    return this;
  }

   /**
   * Get partPayments
   * @return partPayments
  **/
  @javax.annotation.Nullable
  public PaylinkPartPayments getPartPayments() {
    return partPayments;
  }

  public void setPartPayments(PaylinkPartPayments partPayments) {
    this.partPayments = partPayments;
  }


  public PaylinkConfig passThroughData(Map<String, String> passThroughData) {
    this.passThroughData = passThroughData;
    return this;
  }

  public PaylinkConfig putPassThroughDataItem(String key, String passThroughDataItem) {
    if (this.passThroughData == null) {
      this.passThroughData = new HashMap<>();
    }
    this.passThroughData.put(key, passThroughDataItem);
    return this;
  }

   /**
   * Get passThroughData
   * @return passThroughData
  **/
  @javax.annotation.Nullable
  public Map<String, String> getPassThroughData() {
    return passThroughData;
  }

  public void setPassThroughData(Map<String, String> passThroughData) {
    this.passThroughData = passThroughData;
  }


  public PaylinkConfig passThroughHeaders(Map<String, String> passThroughHeaders) {
    this.passThroughHeaders = passThroughHeaders;
    return this;
  }

  public PaylinkConfig putPassThroughHeadersItem(String key, String passThroughHeadersItem) {
    if (this.passThroughHeaders == null) {
      this.passThroughHeaders = new HashMap<>();
    }
    this.passThroughHeaders.put(key, passThroughHeadersItem);
    return this;
  }

   /**
   * Get passThroughHeaders
   * @return passThroughHeaders
  **/
  @javax.annotation.Nullable
  public Map<String, String> getPassThroughHeaders() {
    return passThroughHeaders;
  }

  public void setPassThroughHeaders(Map<String, String> passThroughHeaders) {
    this.passThroughHeaders = passThroughHeaders;
  }


  public PaylinkConfig postback(String postback) {
    this.postback = postback;
    return this;
  }

   /**
   * Specifies a URL to use for a call back when the payment is completed. see Postback Handling }.
   * @return postback
  **/
  @javax.annotation.Nullable
  public String getPostback() {
    return postback;
  }

  public void setPostback(String postback) {
    this.postback = postback;
  }


  public PaylinkConfig postbackPassword(String postbackPassword) {
    this.postbackPassword = postbackPassword;
    return this;
  }

   /**
   * A password to be added to the postback for HTTP Basic Authentication.
   * @return postbackPassword
  **/
  @javax.annotation.Nullable
  public String getPostbackPassword() {
    return postbackPassword;
  }

  public void setPostbackPassword(String postbackPassword) {
    this.postbackPassword = postbackPassword;
  }


  public PaylinkConfig postbackPolicy(String postbackPolicy) {
    this.postbackPolicy = postbackPolicy;
    return this;
  }

   /**
   * The policy setting for the postback see Postback Handling.
   * @return postbackPolicy
  **/
  @javax.annotation.Nullable
  public String getPostbackPolicy() {
    return postbackPolicy;
  }

  public void setPostbackPolicy(String postbackPolicy) {
    this.postbackPolicy = postbackPolicy;
  }


  public PaylinkConfig postbackUsername(String postbackUsername) {
    this.postbackUsername = postbackUsername;
    return this;
  }

   /**
   * A username to be added to the postback for HTTP Basic Authentication.
   * @return postbackUsername
  **/
  @javax.annotation.Nullable
  public String getPostbackUsername() {
    return postbackUsername;
  }

  public void setPostbackUsername(String postbackUsername) {
    this.postbackUsername = postbackUsername;
  }


  public PaylinkConfig redirectDelay(Integer redirectDelay) {
    this.redirectDelay = redirectDelay;
    return this;
  }

   /**
   * A value which can delay the redirection in seconds. A value of 0 will redirect immediately.
   * @return redirectDelay
  **/
  @javax.annotation.Nullable
  public Integer getRedirectDelay() {
    return redirectDelay;
  }

  public void setRedirectDelay(Integer redirectDelay) {
    this.redirectDelay = redirectDelay;
  }


  public PaylinkConfig redirectFailure(String redirectFailure) {
    this.redirectFailure = redirectFailure;
    return this;
  }

   /**
   * A URL which the browser is redirected to on non-completion of a transaction.
   * @return redirectFailure
  **/
  @javax.annotation.Nullable
  public String getRedirectFailure() {
    return redirectFailure;
  }

  public void setRedirectFailure(String redirectFailure) {
    this.redirectFailure = redirectFailure;
  }


  public PaylinkConfig redirectSuccess(String redirectSuccess) {
    this.redirectSuccess = redirectSuccess;
    return this;
  }

   /**
   * A URL which the browser is redirected to on authorisation of a transaction.
   * @return redirectSuccess
  **/
  @javax.annotation.Nullable
  public String getRedirectSuccess() {
    return redirectSuccess;
  }

  public void setRedirectSuccess(String redirectSuccess) {
    this.redirectSuccess = redirectSuccess;
  }


  public PaylinkConfig renderer(String renderer) {
    this.renderer = renderer;
    return this;
  }

   /**
   * The Paylink renderer engine to use.
   * @return renderer
  **/
  @javax.annotation.Nullable
  public String getRenderer() {
    return renderer;
  }

  public void setRenderer(String renderer) {
    this.renderer = renderer;
  }


  public PaylinkConfig returnParams(Boolean returnParams) {
    this.returnParams = returnParams;
    return this;
  }

   /**
   * If a value of true is specified, any redirection will include the transaction result in parameters. It is recommended to use the postback integration rather than redirection parameters.
   * @return returnParams
  **/
  @javax.annotation.Nullable
  public Boolean isReturnParams() {
    return returnParams;
  }

  public void setReturnParams(Boolean returnParams) {
    this.returnParams = returnParams;
  }


  public PaylinkConfig ui(PaylinkUI ui) {
    this.ui = ui;
    return this;
  }

   /**
   * Get ui
   * @return ui
  **/
  @javax.annotation.Nullable
  public PaylinkUI getUi() {
    return ui;
  }

  public void setUi(PaylinkUI ui) {
    this.ui = ui;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaylinkConfig paylinkConfig = (PaylinkConfig) o;
    return Objects.equals(this.acsMode, paylinkConfig.acsMode) &&
        Objects.equals(this.customParams, paylinkConfig.customParams) &&
        Objects.equals(this.descriptor, paylinkConfig.descriptor) &&
        Objects.equals(this.expireIn, paylinkConfig.expireIn) &&
        Objects.equals(this.fieldGuard, paylinkConfig.fieldGuard) &&
        Objects.equals(this.lockParams, paylinkConfig.lockParams) &&
        Objects.equals(this.merchLogo, paylinkConfig.merchLogo) &&
        Objects.equals(this.merchTerms, paylinkConfig.merchTerms) &&
        Objects.equals(this.options, paylinkConfig.options) &&
        Objects.equals(this.partPayments, paylinkConfig.partPayments) &&
        Objects.equals(this.passThroughData, paylinkConfig.passThroughData) &&
        Objects.equals(this.passThroughHeaders, paylinkConfig.passThroughHeaders) &&
        Objects.equals(this.postback, paylinkConfig.postback) &&
        Objects.equals(this.postbackPassword, paylinkConfig.postbackPassword) &&
        Objects.equals(this.postbackPolicy, paylinkConfig.postbackPolicy) &&
        Objects.equals(this.postbackUsername, paylinkConfig.postbackUsername) &&
        Objects.equals(this.redirectDelay, paylinkConfig.redirectDelay) &&
        Objects.equals(this.redirectFailure, paylinkConfig.redirectFailure) &&
        Objects.equals(this.redirectSuccess, paylinkConfig.redirectSuccess) &&
        Objects.equals(this.renderer, paylinkConfig.renderer) &&
        Objects.equals(this.returnParams, paylinkConfig.returnParams) &&
        Objects.equals(this.ui, paylinkConfig.ui);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acsMode, customParams, descriptor, expireIn, fieldGuard, lockParams, merchLogo, merchTerms, options, partPayments, passThroughData, passThroughHeaders, postback, postbackPassword, postbackPolicy, postbackUsername, redirectDelay, redirectFailure, redirectSuccess, renderer, returnParams, ui);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaylinkConfig {\n");
    sb.append("    acsMode: ").append(toIndentedString(acsMode)).append("\n");
    sb.append("    customParams: ").append(toIndentedString(customParams)).append("\n");
    sb.append("    descriptor: ").append(toIndentedString(descriptor)).append("\n");
    sb.append("    expireIn: ").append(toIndentedString(expireIn)).append("\n");
    sb.append("    fieldGuard: ").append(toIndentedString(fieldGuard)).append("\n");
    sb.append("    lockParams: ").append(toIndentedString(lockParams)).append("\n");
    sb.append("    merchLogo: ").append(toIndentedString(merchLogo)).append("\n");
    sb.append("    merchTerms: ").append(toIndentedString(merchTerms)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    partPayments: ").append(toIndentedString(partPayments)).append("\n");
    sb.append("    passThroughData: ").append(toIndentedString(passThroughData)).append("\n");
    sb.append("    passThroughHeaders: ").append(toIndentedString(passThroughHeaders)).append("\n");
    sb.append("    postback: ").append(toIndentedString(postback)).append("\n");
    sb.append("    postbackPassword: ").append(toIndentedString(postbackPassword)).append("\n");
    sb.append("    postbackPolicy: ").append(toIndentedString(postbackPolicy)).append("\n");
    sb.append("    postbackUsername: ").append(toIndentedString(postbackUsername)).append("\n");
    sb.append("    redirectDelay: ").append(toIndentedString(redirectDelay)).append("\n");
    sb.append("    redirectFailure: ").append(toIndentedString(redirectFailure)).append("\n");
    sb.append("    redirectSuccess: ").append(toIndentedString(redirectSuccess)).append("\n");
    sb.append("    renderer: ").append(toIndentedString(renderer)).append("\n");
    sb.append("    returnParams: ").append(toIndentedString(returnParams)).append("\n");
    sb.append("    ui: ").append(toIndentedString(ui)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("acs_mode");
    openapiFields.add("custom_params");
    openapiFields.add("descriptor");
    openapiFields.add("expire_in");
    openapiFields.add("field_guard");
    openapiFields.add("lock_params");
    openapiFields.add("merch_logo");
    openapiFields.add("merch_terms");
    openapiFields.add("options");
    openapiFields.add("part_payments");
    openapiFields.add("pass_through_data");
    openapiFields.add("pass_through_headers");
    openapiFields.add("postback");
    openapiFields.add("postback_password");
    openapiFields.add("postback_policy");
    openapiFields.add("postback_username");
    openapiFields.add("redirect_delay");
    openapiFields.add("redirect_failure");
    openapiFields.add("redirect_success");
    openapiFields.add("renderer");
    openapiFields.add("return_params");
    openapiFields.add("ui");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to PaylinkConfig
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PaylinkConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PaylinkConfig is not found in the empty JSON string", PaylinkConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PaylinkConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PaylinkConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("acs_mode") != null && !jsonObj.get("acs_mode").isJsonNull()) && !jsonObj.get("acs_mode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `acs_mode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("acs_mode").toString()));
      }
      if (jsonObj.get("custom_params") != null && !jsonObj.get("custom_params").isJsonNull()) {
        JsonArray jsonArraycustomParams = jsonObj.getAsJsonArray("custom_params");
        if (jsonArraycustomParams != null) {
          // ensure the json data is an array
          if (!jsonObj.get("custom_params").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `custom_params` to be an array in the JSON string but got `%s`", jsonObj.get("custom_params").toString()));
          }

          // validate the optional field `custom_params` (array)
          for (int i = 0; i < jsonArraycustomParams.size(); i++) {
            PaylinkCustomParam.validateJsonElement(jsonArraycustomParams.get(i));
          };
        }
      }
      if ((jsonObj.get("descriptor") != null && !jsonObj.get("descriptor").isJsonNull()) && !jsonObj.get("descriptor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `descriptor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("descriptor").toString()));
      }
      if ((jsonObj.get("expire_in") != null && !jsonObj.get("expire_in").isJsonNull()) && !jsonObj.get("expire_in").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expire_in` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expire_in").toString()));
      }
      if (jsonObj.get("field_guard") != null && !jsonObj.get("field_guard").isJsonNull()) {
        JsonArray jsonArrayfieldGuard = jsonObj.getAsJsonArray("field_guard");
        if (jsonArrayfieldGuard != null) {
          // ensure the json data is an array
          if (!jsonObj.get("field_guard").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `field_guard` to be an array in the JSON string but got `%s`", jsonObj.get("field_guard").toString()));
          }

          // validate the optional field `field_guard` (array)
          for (int i = 0; i < jsonArrayfieldGuard.size(); i++) {
            PaylinkFieldGuardModel.validateJsonElement(jsonArrayfieldGuard.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("lock_params") != null && !jsonObj.get("lock_params").isJsonNull() && !jsonObj.get("lock_params").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `lock_params` to be an array in the JSON string but got `%s`", jsonObj.get("lock_params").toString()));
      }
      if ((jsonObj.get("merch_logo") != null && !jsonObj.get("merch_logo").isJsonNull()) && !jsonObj.get("merch_logo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merch_logo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merch_logo").toString()));
      }
      if ((jsonObj.get("merch_terms") != null && !jsonObj.get("merch_terms").isJsonNull()) && !jsonObj.get("merch_terms").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merch_terms` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merch_terms").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("options") != null && !jsonObj.get("options").isJsonNull() && !jsonObj.get("options").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `options` to be an array in the JSON string but got `%s`", jsonObj.get("options").toString()));
      }
      // validate the optional field `part_payments`
      if (jsonObj.get("part_payments") != null && !jsonObj.get("part_payments").isJsonNull()) {
        PaylinkPartPayments.validateJsonElement(jsonObj.get("part_payments"));
      }
      if ((jsonObj.get("postback") != null && !jsonObj.get("postback").isJsonNull()) && !jsonObj.get("postback").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postback` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postback").toString()));
      }
      if ((jsonObj.get("postback_password") != null && !jsonObj.get("postback_password").isJsonNull()) && !jsonObj.get("postback_password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postback_password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postback_password").toString()));
      }
      if ((jsonObj.get("postback_policy") != null && !jsonObj.get("postback_policy").isJsonNull()) && !jsonObj.get("postback_policy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postback_policy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postback_policy").toString()));
      }
      if ((jsonObj.get("postback_username") != null && !jsonObj.get("postback_username").isJsonNull()) && !jsonObj.get("postback_username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postback_username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postback_username").toString()));
      }
      if ((jsonObj.get("redirect_failure") != null && !jsonObj.get("redirect_failure").isJsonNull()) && !jsonObj.get("redirect_failure").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `redirect_failure` to be a primitive type in the JSON string but got `%s`", jsonObj.get("redirect_failure").toString()));
      }
      if ((jsonObj.get("redirect_success") != null && !jsonObj.get("redirect_success").isJsonNull()) && !jsonObj.get("redirect_success").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `redirect_success` to be a primitive type in the JSON string but got `%s`", jsonObj.get("redirect_success").toString()));
      }
      if ((jsonObj.get("renderer") != null && !jsonObj.get("renderer").isJsonNull()) && !jsonObj.get("renderer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `renderer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("renderer").toString()));
      }
      // validate the optional field `ui`
      if (jsonObj.get("ui") != null && !jsonObj.get("ui").isJsonNull()) {
        PaylinkUI.validateJsonElement(jsonObj.get("ui"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PaylinkConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PaylinkConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PaylinkConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PaylinkConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<PaylinkConfig>() {
           @Override
           public void write(JsonWriter out, PaylinkConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PaylinkConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PaylinkConfig given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PaylinkConfig
  * @throws IOException if the JSON string is invalid with respect to PaylinkConfig
  */
  public static PaylinkConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PaylinkConfig.class);
  }

 /**
  * Convert an instance of PaylinkConfig to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

