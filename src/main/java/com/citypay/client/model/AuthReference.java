/*
 * CityPay Payment API
 *  This CityPay API is an HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokenized payments using cardholder Accounts.  ## Compliance and Security Your application will need to adhere to PCI-DSS standards to operate safely and to meet requirements set out by  Visa and MasterCard and the PCI Security Standards Council. These include  * Data must be collected using TLS version 1.2 using [strong cryptography](https://citypay.github.io/api-docs/payment-api/#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive cardholder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities. 
 *
 * Contact: support@citypay.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.citypay.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.citypay.client.JSON;

/**
 * AuthReference
 */
public class AuthReference {
  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private String amount;

  public static final String SERIALIZED_NAME_AMOUNT_VALUE = "amount_value";
  @SerializedName(SERIALIZED_NAME_AMOUNT_VALUE)
  private Integer amountValue;

  public static final String SERIALIZED_NAME_ATRN = "atrn";
  @SerializedName(SERIALIZED_NAME_ATRN)
  private String atrn;

  public static final String SERIALIZED_NAME_AUTHCODE = "authcode";
  @SerializedName(SERIALIZED_NAME_AUTHCODE)
  private String authcode;

  public static final String SERIALIZED_NAME_BATCHNO = "batchno";
  @SerializedName(SERIALIZED_NAME_BATCHNO)
  private String batchno;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_DATETIME = "datetime";
  @SerializedName(SERIALIZED_NAME_DATETIME)
  private OffsetDateTime datetime;

  public static final String SERIALIZED_NAME_IDENTIFIER = "identifier";
  @SerializedName(SERIALIZED_NAME_IDENTIFIER)
  private String identifier;

  public static final String SERIALIZED_NAME_MASKEDPAN = "maskedpan";
  @SerializedName(SERIALIZED_NAME_MASKEDPAN)
  private String maskedpan;

  public static final String SERIALIZED_NAME_MERCHANTID = "merchantid";
  @SerializedName(SERIALIZED_NAME_MERCHANTID)
  private Integer merchantid;

  public static final String SERIALIZED_NAME_RESULT = "result";
  @SerializedName(SERIALIZED_NAME_RESULT)
  private String result;

  public static final String SERIALIZED_NAME_TRANS_STATUS = "trans_status";
  @SerializedName(SERIALIZED_NAME_TRANS_STATUS)
  private String transStatus;

  public static final String SERIALIZED_NAME_TRANS_TYPE = "trans_type";
  @SerializedName(SERIALIZED_NAME_TRANS_TYPE)
  private String transType;

  public static final String SERIALIZED_NAME_TRANSNO = "transno";
  @SerializedName(SERIALIZED_NAME_TRANSNO)
  private Integer transno;

  public AuthReference() {
  }

  public AuthReference amount(String amount) {
    this.amount = amount;
    return this;
  }

   /**
   * The amount of the transaction in decimal currency format.
   * @return amount
  **/
  @javax.annotation.Nullable
  public String getAmount() {
    return amount;
  }

  public void setAmount(String amount) {
    this.amount = amount;
  }


  public AuthReference amountValue(Integer amountValue) {
    this.amountValue = amountValue;
    return this;
  }

   /**
   * The amount of the transaction in integer/request format.
   * @return amountValue
  **/
  @javax.annotation.Nullable
  public Integer getAmountValue() {
    return amountValue;
  }

  public void setAmountValue(Integer amountValue) {
    this.amountValue = amountValue;
  }


  public AuthReference atrn(String atrn) {
    this.atrn = atrn;
    return this;
  }

   /**
   * A reference number provided by the acquiring services.
   * @return atrn
  **/
  @javax.annotation.Nullable
  public String getAtrn() {
    return atrn;
  }

  public void setAtrn(String atrn) {
    this.atrn = atrn;
  }


  public AuthReference authcode(String authcode) {
    this.authcode = authcode;
    return this;
  }

   /**
   * The authorisation code of the transaction returned by the acquirer or card issuer.
   * @return authcode
  **/
  @javax.annotation.Nullable
  public String getAuthcode() {
    return authcode;
  }

  public void setAuthcode(String authcode) {
    this.authcode = authcode;
  }


  public AuthReference batchno(String batchno) {
    this.batchno = batchno;
    return this;
  }

   /**
   * A batch number which the transaction has been end of day batched towards.
   * @return batchno
  **/
  @javax.annotation.Nullable
  public String getBatchno() {
    return batchno;
  }

  public void setBatchno(String batchno) {
    this.batchno = batchno;
  }


  public AuthReference currency(String currency) {
    this.currency = currency;
    return this;
  }

   /**
   * The currency of the transaction in ISO 4217 code format.
   * @return currency
  **/
  @javax.annotation.Nullable
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public AuthReference datetime(OffsetDateTime datetime) {
    this.datetime = datetime;
    return this;
  }

   /**
   * The date and time of the transaction.
   * @return datetime
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getDatetime() {
    return datetime;
  }

  public void setDatetime(OffsetDateTime datetime) {
    this.datetime = datetime;
  }


  public AuthReference identifier(String identifier) {
    this.identifier = identifier;
    return this;
  }

   /**
   * The identifier of the transaction used to process the transaction.
   * @return identifier
  **/
  @javax.annotation.Nullable
  public String getIdentifier() {
    return identifier;
  }

  public void setIdentifier(String identifier) {
    this.identifier = identifier;
  }


  public AuthReference maskedpan(String maskedpan) {
    this.maskedpan = maskedpan;
    return this;
  }

   /**
   * A masking of the card number which was used to process the tranasction.
   * @return maskedpan
  **/
  @javax.annotation.Nullable
  public String getMaskedpan() {
    return maskedpan;
  }

  public void setMaskedpan(String maskedpan) {
    this.maskedpan = maskedpan;
  }


  public AuthReference merchantid(Integer merchantid) {
    this.merchantid = merchantid;
    return this;
  }

   /**
   * The merchant id of the transaction result.
   * @return merchantid
  **/
  @javax.annotation.Nullable
  public Integer getMerchantid() {
    return merchantid;
  }

  public void setMerchantid(Integer merchantid) {
    this.merchantid = merchantid;
  }


  public AuthReference result(String result) {
    this.result = result;
    return this;
  }

   /**
   * The result of the transaction.
   * @return result
  **/
  @javax.annotation.Nullable
  public String getResult() {
    return result;
  }

  public void setResult(String result) {
    this.result = result;
  }


  public AuthReference transStatus(String transStatus) {
    this.transStatus = transStatus;
    return this;
  }

   /**
   * The current status of the transaction through it&#39;s lifecycle.
   * @return transStatus
  **/
  @javax.annotation.Nullable
  public String getTransStatus() {
    return transStatus;
  }

  public void setTransStatus(String transStatus) {
    this.transStatus = transStatus;
  }


  public AuthReference transType(String transType) {
    this.transType = transType;
    return this;
  }

   /**
   * The type of transaction that was processed.
   * @return transType
  **/
  @javax.annotation.Nullable
  public String getTransType() {
    return transType;
  }

  public void setTransType(String transType) {
    this.transType = transType;
  }


  public AuthReference transno(Integer transno) {
    this.transno = transno;
    return this;
  }

   /**
   * The transaction number of the transaction.
   * @return transno
  **/
  @javax.annotation.Nullable
  public Integer getTransno() {
    return transno;
  }

  public void setTransno(Integer transno) {
    this.transno = transno;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AuthReference authReference = (AuthReference) o;
    return Objects.equals(this.amount, authReference.amount) &&
        Objects.equals(this.amountValue, authReference.amountValue) &&
        Objects.equals(this.atrn, authReference.atrn) &&
        Objects.equals(this.authcode, authReference.authcode) &&
        Objects.equals(this.batchno, authReference.batchno) &&
        Objects.equals(this.currency, authReference.currency) &&
        Objects.equals(this.datetime, authReference.datetime) &&
        Objects.equals(this.identifier, authReference.identifier) &&
        Objects.equals(this.maskedpan, authReference.maskedpan) &&
        Objects.equals(this.merchantid, authReference.merchantid) &&
        Objects.equals(this.result, authReference.result) &&
        Objects.equals(this.transStatus, authReference.transStatus) &&
        Objects.equals(this.transType, authReference.transType) &&
        Objects.equals(this.transno, authReference.transno);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, amountValue, atrn, authcode, batchno, currency, datetime, identifier, maskedpan, merchantid, result, transStatus, transType, transno);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AuthReference {\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    amountValue: ").append(toIndentedString(amountValue)).append("\n");
    sb.append("    atrn: ").append(toIndentedString(atrn)).append("\n");
    sb.append("    authcode: ").append(toIndentedString(authcode)).append("\n");
    sb.append("    batchno: ").append(toIndentedString(batchno)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    datetime: ").append(toIndentedString(datetime)).append("\n");
    sb.append("    identifier: ").append(toIndentedString(identifier)).append("\n");
    sb.append("    maskedpan: ").append(toIndentedString(maskedpan)).append("\n");
    sb.append("    merchantid: ").append(toIndentedString(merchantid)).append("\n");
    sb.append("    result: ").append(toIndentedString(result)).append("\n");
    sb.append("    transStatus: ").append(toIndentedString(transStatus)).append("\n");
    sb.append("    transType: ").append(toIndentedString(transType)).append("\n");
    sb.append("    transno: ").append(toIndentedString(transno)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amount");
    openapiFields.add("amount_value");
    openapiFields.add("atrn");
    openapiFields.add("authcode");
    openapiFields.add("batchno");
    openapiFields.add("currency");
    openapiFields.add("datetime");
    openapiFields.add("identifier");
    openapiFields.add("maskedpan");
    openapiFields.add("merchantid");
    openapiFields.add("result");
    openapiFields.add("trans_status");
    openapiFields.add("trans_type");
    openapiFields.add("transno");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to AuthReference
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AuthReference.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AuthReference is not found in the empty JSON string", AuthReference.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AuthReference.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AuthReference` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("amount") != null && !jsonObj.get("amount").isJsonNull()) && !jsonObj.get("amount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `amount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("amount").toString()));
      }
      if ((jsonObj.get("atrn") != null && !jsonObj.get("atrn").isJsonNull()) && !jsonObj.get("atrn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `atrn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("atrn").toString()));
      }
      if ((jsonObj.get("authcode") != null && !jsonObj.get("authcode").isJsonNull()) && !jsonObj.get("authcode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authcode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authcode").toString()));
      }
      if ((jsonObj.get("batchno") != null && !jsonObj.get("batchno").isJsonNull()) && !jsonObj.get("batchno").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `batchno` to be a primitive type in the JSON string but got `%s`", jsonObj.get("batchno").toString()));
      }
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if ((jsonObj.get("identifier") != null && !jsonObj.get("identifier").isJsonNull()) && !jsonObj.get("identifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `identifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("identifier").toString()));
      }
      if ((jsonObj.get("maskedpan") != null && !jsonObj.get("maskedpan").isJsonNull()) && !jsonObj.get("maskedpan").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maskedpan` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maskedpan").toString()));
      }
      if ((jsonObj.get("result") != null && !jsonObj.get("result").isJsonNull()) && !jsonObj.get("result").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `result` to be a primitive type in the JSON string but got `%s`", jsonObj.get("result").toString()));
      }
      if ((jsonObj.get("trans_status") != null && !jsonObj.get("trans_status").isJsonNull()) && !jsonObj.get("trans_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trans_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trans_status").toString()));
      }
      if ((jsonObj.get("trans_type") != null && !jsonObj.get("trans_type").isJsonNull()) && !jsonObj.get("trans_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trans_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trans_type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AuthReference.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AuthReference' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AuthReference> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AuthReference.class));

       return (TypeAdapter<T>) new TypeAdapter<AuthReference>() {
           @Override
           public void write(JsonWriter out, AuthReference value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AuthReference read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AuthReference given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AuthReference
  * @throws IOException if the JSON string is invalid with respect to AuthReference
  */
  public static AuthReference fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AuthReference.class);
  }

 /**
  * Convert an instance of AuthReference to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

