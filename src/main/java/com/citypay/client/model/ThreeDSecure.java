/*
 * CityPay Payment API
 *  Welcome to the CityPay API, a robust HTTP API payment solution designed for seamless server-to-server  transactional processing. Our API facilitates a wide array of payment operations, catering to diverse business needs.  Whether you're integrating Internet payments, handling Mail Order/Telephone Order (MOTO) transactions, managing  Subscriptions with Recurring and Continuous Authority payments, or navigating the complexities of 3-D Secure  authentication, our API is equipped to support your requirements. Additionally, we offer functionalities for  Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids, and Completion processing, alongside the capability  for tokenised payments.  ## Compliance and Security Overview <aside class=\"notice\">   Ensuring the security of payment transactions and compliance with industry standards is paramount. Our API is    designed with stringent security measures and compliance protocols to safeguard sensitive information and meet    the rigorous requirements of Visa, MasterCard, and the PCI Security Standards Council. </aside>  ### Key Compliance and Security Measures  * **TLS Encryption**: All data transmissions must utilise TLS version 1.2 or higher, employing [strong cryptography](#enabled-tls-ciphers). Our infrastructure strictly enforces this requirement to maintain the integrity and confidentiality of data in transit. We conduct regular scans and assessments of our TLS endpoints to identify and mitigate vulnerabilities. * **Data Storage Prohibitions**: Storing sensitive cardholder data (CHD), such as the card security code (CSC) or primary account number (PAN), is strictly prohibited. Our API is designed to minimize your exposure to sensitive data, thereby reducing your compliance burden. * **Data Masking**: For consumer protection and compliance, full card numbers must not be displayed on receipts or any customer-facing materials. Our API automatically masks PANs, displaying only the last four digits to facilitate safe receipt generation. * **Network Scans**: If your application is web-based, regular scans of your hosting environment are mandatory to identify and rectify potential vulnerabilities. This proactive measure is crucial for maintaining a secure and compliant online presence. * **PCI Compliance**: Adherence to PCI DSS standards is not optional; it's a requirement for operating securely and legally in the payments ecosystem. For detailed information on compliance requirements and resources, please visit the PCI Security Standards Council website [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/). * **Request Validation**: Our API includes mechanisms to verify the legitimacy of each request, ensuring it pertains to a valid account and originates from a trusted source. We leverage remote IP address verification alongside sophisticated application firewall technologies to thwart a wide array of common security threats.  ## Getting Started Before integrating with the CityPay API, ensure your application and development practices align with the outlined compliance and security measures. This preparatory step is crucial for a smooth integration process and the long-term success of your payment processing operations.  For further details on API endpoints, request/response formats, and code examples, proceed to the subsequent sections of our documentation. Our aim is to provide you with all the necessary tools and information to integrate our payment processing capabilities seamlessly into your application.  Thank you for choosing CityPay API. We look forward to supporting your payment processing needs with our secure, compliant, and versatile API solution. 
 *
 * Contact: support@citypay.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.citypay.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.citypay.client.JSON;

/**
 * ThreeDSecure
 */
public class ThreeDSecure {
  public static final String SERIALIZED_NAME_ACCEPT_HEADERS = "accept_headers";
  @SerializedName(SERIALIZED_NAME_ACCEPT_HEADERS)
  @javax.annotation.Nullable
  private String acceptHeaders;

  public static final String SERIALIZED_NAME_BROWSER_COLOR_DEPTH = "browserColorDepth";
  @SerializedName(SERIALIZED_NAME_BROWSER_COLOR_DEPTH)
  @javax.annotation.Nullable
  private String browserColorDepth;

  public static final String SERIALIZED_NAME_BROWSER_I_P = "browserIP";
  @SerializedName(SERIALIZED_NAME_BROWSER_I_P)
  @javax.annotation.Nullable
  private String browserIP;

  public static final String SERIALIZED_NAME_BROWSER_JAVA_ENABLED = "browserJavaEnabled";
  @SerializedName(SERIALIZED_NAME_BROWSER_JAVA_ENABLED)
  @javax.annotation.Nullable
  private String browserJavaEnabled;

  public static final String SERIALIZED_NAME_BROWSER_LANGUAGE = "browserLanguage";
  @SerializedName(SERIALIZED_NAME_BROWSER_LANGUAGE)
  @javax.annotation.Nullable
  private String browserLanguage;

  public static final String SERIALIZED_NAME_BROWSER_SCREEN_HEIGHT = "browserScreenHeight";
  @SerializedName(SERIALIZED_NAME_BROWSER_SCREEN_HEIGHT)
  @javax.annotation.Nullable
  private String browserScreenHeight;

  public static final String SERIALIZED_NAME_BROWSER_SCREEN_WIDTH = "browserScreenWidth";
  @SerializedName(SERIALIZED_NAME_BROWSER_SCREEN_WIDTH)
  @javax.annotation.Nullable
  private String browserScreenWidth;

  public static final String SERIALIZED_NAME_BROWSER_T_Z = "browserTZ";
  @SerializedName(SERIALIZED_NAME_BROWSER_T_Z)
  @javax.annotation.Nullable
  private String browserTZ;

  public static final String SERIALIZED_NAME_CP_BX = "cp_bx";
  @SerializedName(SERIALIZED_NAME_CP_BX)
  @javax.annotation.Nullable
  private String cpBx;

  public static final String SERIALIZED_NAME_DOWNGRADE1 = "downgrade1";
  @SerializedName(SERIALIZED_NAME_DOWNGRADE1)
  @javax.annotation.Nullable
  private Boolean downgrade1;

  public static final String SERIALIZED_NAME_MERCHANT_TERMURL = "merchant_termurl";
  @SerializedName(SERIALIZED_NAME_MERCHANT_TERMURL)
  @javax.annotation.Nullable
  private String merchantTermurl;

  public static final String SERIALIZED_NAME_TDS_POLICY = "tds_policy";
  @SerializedName(SERIALIZED_NAME_TDS_POLICY)
  @javax.annotation.Nullable
  private String tdsPolicy;

  public static final String SERIALIZED_NAME_USER_AGENT = "user_agent";
  @SerializedName(SERIALIZED_NAME_USER_AGENT)
  @javax.annotation.Nullable
  private String userAgent;

  public ThreeDSecure() {
  }

  public ThreeDSecure acceptHeaders(@javax.annotation.Nullable String acceptHeaders) {
    this.acceptHeaders = acceptHeaders;
    return this;
  }

  /**
   * Required for 3DSv1. Optional if the &#x60;cp_bx&#x60; value is provided otherwise required for 3Dv2 processing operating in browser authentication mode.  The &#x60;cp_bx&#x60; value will override any value supplied to this field.  The content of the HTTP accept header as sent to the merchant from the cardholder&#39;s user agent.  This value will be validated by the ACS when the card holder authenticates themselves to verify that no intermediary is performing this action. Required for 3DSv1. 
   * @return acceptHeaders
   */
  @javax.annotation.Nullable
  public String getAcceptHeaders() {
    return acceptHeaders;
  }

  public void setAcceptHeaders(@javax.annotation.Nullable String acceptHeaders) {
    this.acceptHeaders = acceptHeaders;
  }


  public ThreeDSecure browserColorDepth(@javax.annotation.Nullable String browserColorDepth) {
    this.browserColorDepth = browserColorDepth;
    return this;
  }

  /**
   * BrowserColorDepth field used for 3DSv2 browser enablement. Recommendation is to use citypay.js and the &#x60;bx&#x60; function to gather this value.
   * @return browserColorDepth
   */
  @javax.annotation.Nullable
  public String getBrowserColorDepth() {
    return browserColorDepth;
  }

  public void setBrowserColorDepth(@javax.annotation.Nullable String browserColorDepth) {
    this.browserColorDepth = browserColorDepth;
  }


  public ThreeDSecure browserIP(@javax.annotation.Nullable String browserIP) {
    this.browserIP = browserIP;
    return this;
  }

  /**
   * BrowserIP field used for 3DSv2 browser enablement. Recommendation is to use citypay.js and the &#x60;bx&#x60; function to gather this value.
   * @return browserIP
   */
  @javax.annotation.Nullable
  public String getBrowserIP() {
    return browserIP;
  }

  public void setBrowserIP(@javax.annotation.Nullable String browserIP) {
    this.browserIP = browserIP;
  }


  public ThreeDSecure browserJavaEnabled(@javax.annotation.Nullable String browserJavaEnabled) {
    this.browserJavaEnabled = browserJavaEnabled;
    return this;
  }

  /**
   * BrowserJavaEnabled field used for 3DSv2 browser enablement. Recommendation is to use citypay.js and the &#x60;bx&#x60; function to gather this value.
   * @return browserJavaEnabled
   */
  @javax.annotation.Nullable
  public String getBrowserJavaEnabled() {
    return browserJavaEnabled;
  }

  public void setBrowserJavaEnabled(@javax.annotation.Nullable String browserJavaEnabled) {
    this.browserJavaEnabled = browserJavaEnabled;
  }


  public ThreeDSecure browserLanguage(@javax.annotation.Nullable String browserLanguage) {
    this.browserLanguage = browserLanguage;
    return this;
  }

  /**
   * BrowserLanguage field used for 3DSv2 browser enablement. Recommendation is to use citypay.js and the &#x60;bx&#x60; function to gather this value.
   * @return browserLanguage
   */
  @javax.annotation.Nullable
  public String getBrowserLanguage() {
    return browserLanguage;
  }

  public void setBrowserLanguage(@javax.annotation.Nullable String browserLanguage) {
    this.browserLanguage = browserLanguage;
  }


  public ThreeDSecure browserScreenHeight(@javax.annotation.Nullable String browserScreenHeight) {
    this.browserScreenHeight = browserScreenHeight;
    return this;
  }

  /**
   * BrowserScreenHeight field used for 3DSv2 browser enablement. Recommendation is to use citypay.js and the &#x60;bx&#x60; function to gather this value.
   * @return browserScreenHeight
   */
  @javax.annotation.Nullable
  public String getBrowserScreenHeight() {
    return browserScreenHeight;
  }

  public void setBrowserScreenHeight(@javax.annotation.Nullable String browserScreenHeight) {
    this.browserScreenHeight = browserScreenHeight;
  }


  public ThreeDSecure browserScreenWidth(@javax.annotation.Nullable String browserScreenWidth) {
    this.browserScreenWidth = browserScreenWidth;
    return this;
  }

  /**
   * BrowserScreenWidth field used for 3DSv2 browser enablement. Recommendation is to use citypay.js and the &#x60;bx&#x60; function to gather this value.
   * @return browserScreenWidth
   */
  @javax.annotation.Nullable
  public String getBrowserScreenWidth() {
    return browserScreenWidth;
  }

  public void setBrowserScreenWidth(@javax.annotation.Nullable String browserScreenWidth) {
    this.browserScreenWidth = browserScreenWidth;
  }


  public ThreeDSecure browserTZ(@javax.annotation.Nullable String browserTZ) {
    this.browserTZ = browserTZ;
    return this;
  }

  /**
   * BrowserTZ offset field used for 3DSv2 browser enablement. Recommendation is to use citypay.js and the &#x60;bx&#x60; function to gather this value.
   * @return browserTZ
   */
  @javax.annotation.Nullable
  public String getBrowserTZ() {
    return browserTZ;
  }

  public void setBrowserTZ(@javax.annotation.Nullable String browserTZ) {
    this.browserTZ = browserTZ;
  }


  public ThreeDSecure cpBx(@javax.annotation.Nullable String cpBx) {
    this.cpBx = cpBx;
    return this;
  }

  /**
   * Required for 3DSv2.  Browser extension value produced by the citypay.js &#x60;bx&#x60; function. See [https://sandbox.citypay.com/3dsv2/bx](https://sandbox.citypay.com/3dsv2/bx) for  details. 
   * @return cpBx
   */
  @javax.annotation.Nullable
  public String getCpBx() {
    return cpBx;
  }

  public void setCpBx(@javax.annotation.Nullable String cpBx) {
    this.cpBx = cpBx;
  }


  public ThreeDSecure downgrade1(@javax.annotation.Nullable Boolean downgrade1) {
    this.downgrade1 = downgrade1;
    return this;
  }

  /**
   * Where a merchant is configured for 3DSv2, setting this option will attempt to downgrade the transaction to  3DSv1. 
   * @return downgrade1
   */
  @javax.annotation.Nullable
  public Boolean isDowngrade1() {
    return downgrade1;
  }

  public void setDowngrade1(@javax.annotation.Nullable Boolean downgrade1) {
    this.downgrade1 = downgrade1;
  }


  public ThreeDSecure merchantTermurl(@javax.annotation.Nullable String merchantTermurl) {
    this.merchantTermurl = merchantTermurl;
    return this;
  }

  /**
   * A controller URL for 3D-Secure processing that any response from an authentication request or challenge request should be sent to.  The controller should forward on the response from the URL back via this API for subsequent processing. 
   * @return merchantTermurl
   */
  @javax.annotation.Nullable
  public String getMerchantTermurl() {
    return merchantTermurl;
  }

  public void setMerchantTermurl(@javax.annotation.Nullable String merchantTermurl) {
    this.merchantTermurl = merchantTermurl;
  }


  public ThreeDSecure tdsPolicy(@javax.annotation.Nullable String tdsPolicy) {
    this.tdsPolicy = tdsPolicy;
    return this;
  }

  /**
   * A policy value which determines whether ThreeDSecure is enforced or bypassed. Note that this will only work for e-commerce transactions and accounts that have 3DSecure enabled and fully registered with Visa, MasterCard or American Express. It is useful when transactions may be wanted to bypass processing rules.  Note that this may affect the liability shift of transactions and may occur a higher fee with the acquiring bank.  Values are   &#x60;0&#x60; for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.   &#x60;1&#x60; for an enforced policy. Transactions will be enabled for 3DS processing   &#x60;2&#x60; to bypass. Transactions that are bypassed will switch off 3DS processing. 
   * @return tdsPolicy
   */
  @javax.annotation.Nullable
  public String getTdsPolicy() {
    return tdsPolicy;
  }

  public void setTdsPolicy(@javax.annotation.Nullable String tdsPolicy) {
    this.tdsPolicy = tdsPolicy;
  }


  public ThreeDSecure userAgent(@javax.annotation.Nullable String userAgent) {
    this.userAgent = userAgent;
    return this;
  }

  /**
   * Required for 3DSv1.  Optional if the &#x60;cp_bx&#x60; value is provided otherwise required 3Dv2 processing operating in browser authentication mode.  The &#x60;cp_bx&#x60; value will override any value supplied to this field.  The content of the HTTP user-agent header as sent to the merchant from the cardholder&#39;s user agent.  This value will be validated by the ACS when the card holder authenticates themselves to verify that no intermediary is performing this action. Required for 3DSv1. 
   * @return userAgent
   */
  @javax.annotation.Nullable
  public String getUserAgent() {
    return userAgent;
  }

  public void setUserAgent(@javax.annotation.Nullable String userAgent) {
    this.userAgent = userAgent;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ThreeDSecure instance itself
   */
  public ThreeDSecure putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ThreeDSecure threeDSecure = (ThreeDSecure) o;
    return Objects.equals(this.acceptHeaders, threeDSecure.acceptHeaders) &&
        Objects.equals(this.browserColorDepth, threeDSecure.browserColorDepth) &&
        Objects.equals(this.browserIP, threeDSecure.browserIP) &&
        Objects.equals(this.browserJavaEnabled, threeDSecure.browserJavaEnabled) &&
        Objects.equals(this.browserLanguage, threeDSecure.browserLanguage) &&
        Objects.equals(this.browserScreenHeight, threeDSecure.browserScreenHeight) &&
        Objects.equals(this.browserScreenWidth, threeDSecure.browserScreenWidth) &&
        Objects.equals(this.browserTZ, threeDSecure.browserTZ) &&
        Objects.equals(this.cpBx, threeDSecure.cpBx) &&
        Objects.equals(this.downgrade1, threeDSecure.downgrade1) &&
        Objects.equals(this.merchantTermurl, threeDSecure.merchantTermurl) &&
        Objects.equals(this.tdsPolicy, threeDSecure.tdsPolicy) &&
        Objects.equals(this.userAgent, threeDSecure.userAgent)&&
        Objects.equals(this.additionalProperties, threeDSecure.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acceptHeaders, browserColorDepth, browserIP, browserJavaEnabled, browserLanguage, browserScreenHeight, browserScreenWidth, browserTZ, cpBx, downgrade1, merchantTermurl, tdsPolicy, userAgent, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ThreeDSecure {\n");
    sb.append("    acceptHeaders: ").append(toIndentedString(acceptHeaders)).append("\n");
    sb.append("    browserColorDepth: ").append(toIndentedString(browserColorDepth)).append("\n");
    sb.append("    browserIP: ").append(toIndentedString(browserIP)).append("\n");
    sb.append("    browserJavaEnabled: ").append(toIndentedString(browserJavaEnabled)).append("\n");
    sb.append("    browserLanguage: ").append(toIndentedString(browserLanguage)).append("\n");
    sb.append("    browserScreenHeight: ").append(toIndentedString(browserScreenHeight)).append("\n");
    sb.append("    browserScreenWidth: ").append(toIndentedString(browserScreenWidth)).append("\n");
    sb.append("    browserTZ: ").append(toIndentedString(browserTZ)).append("\n");
    sb.append("    cpBx: ").append(toIndentedString(cpBx)).append("\n");
    sb.append("    downgrade1: ").append(toIndentedString(downgrade1)).append("\n");
    sb.append("    merchantTermurl: ").append(toIndentedString(merchantTermurl)).append("\n");
    sb.append("    tdsPolicy: ").append(toIndentedString(tdsPolicy)).append("\n");
    sb.append("    userAgent: ").append(toIndentedString(userAgent)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accept_headers");
    openapiFields.add("browserColorDepth");
    openapiFields.add("browserIP");
    openapiFields.add("browserJavaEnabled");
    openapiFields.add("browserLanguage");
    openapiFields.add("browserScreenHeight");
    openapiFields.add("browserScreenWidth");
    openapiFields.add("browserTZ");
    openapiFields.add("cp_bx");
    openapiFields.add("downgrade1");
    openapiFields.add("merchant_termurl");
    openapiFields.add("tds_policy");
    openapiFields.add("user_agent");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ThreeDSecure
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ThreeDSecure.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ThreeDSecure is not found in the empty JSON string", ThreeDSecure.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accept_headers") != null && !jsonObj.get("accept_headers").isJsonNull()) && !jsonObj.get("accept_headers").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accept_headers` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accept_headers").toString()));
      }
      if ((jsonObj.get("browserColorDepth") != null && !jsonObj.get("browserColorDepth").isJsonNull()) && !jsonObj.get("browserColorDepth").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `browserColorDepth` to be a primitive type in the JSON string but got `%s`", jsonObj.get("browserColorDepth").toString()));
      }
      if ((jsonObj.get("browserIP") != null && !jsonObj.get("browserIP").isJsonNull()) && !jsonObj.get("browserIP").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `browserIP` to be a primitive type in the JSON string but got `%s`", jsonObj.get("browserIP").toString()));
      }
      if ((jsonObj.get("browserJavaEnabled") != null && !jsonObj.get("browserJavaEnabled").isJsonNull()) && !jsonObj.get("browserJavaEnabled").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `browserJavaEnabled` to be a primitive type in the JSON string but got `%s`", jsonObj.get("browserJavaEnabled").toString()));
      }
      if ((jsonObj.get("browserLanguage") != null && !jsonObj.get("browserLanguage").isJsonNull()) && !jsonObj.get("browserLanguage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `browserLanguage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("browserLanguage").toString()));
      }
      if ((jsonObj.get("browserScreenHeight") != null && !jsonObj.get("browserScreenHeight").isJsonNull()) && !jsonObj.get("browserScreenHeight").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `browserScreenHeight` to be a primitive type in the JSON string but got `%s`", jsonObj.get("browserScreenHeight").toString()));
      }
      if ((jsonObj.get("browserScreenWidth") != null && !jsonObj.get("browserScreenWidth").isJsonNull()) && !jsonObj.get("browserScreenWidth").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `browserScreenWidth` to be a primitive type in the JSON string but got `%s`", jsonObj.get("browserScreenWidth").toString()));
      }
      if ((jsonObj.get("browserTZ") != null && !jsonObj.get("browserTZ").isJsonNull()) && !jsonObj.get("browserTZ").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `browserTZ` to be a primitive type in the JSON string but got `%s`", jsonObj.get("browserTZ").toString()));
      }
      if ((jsonObj.get("cp_bx") != null && !jsonObj.get("cp_bx").isJsonNull()) && !jsonObj.get("cp_bx").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cp_bx` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cp_bx").toString()));
      }
      if ((jsonObj.get("merchant_termurl") != null && !jsonObj.get("merchant_termurl").isJsonNull()) && !jsonObj.get("merchant_termurl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchant_termurl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchant_termurl").toString()));
      }
      if ((jsonObj.get("tds_policy") != null && !jsonObj.get("tds_policy").isJsonNull()) && !jsonObj.get("tds_policy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tds_policy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tds_policy").toString()));
      }
      if ((jsonObj.get("user_agent") != null && !jsonObj.get("user_agent").isJsonNull()) && !jsonObj.get("user_agent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_agent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_agent").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ThreeDSecure.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ThreeDSecure' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ThreeDSecure> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ThreeDSecure.class));

       return (TypeAdapter<T>) new TypeAdapter<ThreeDSecure>() {
           @Override
           public void write(JsonWriter out, ThreeDSecure value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ThreeDSecure read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             ThreeDSecure instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ThreeDSecure given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ThreeDSecure
   * @throws IOException if the JSON string is invalid with respect to ThreeDSecure
   */
  public static ThreeDSecure fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ThreeDSecure.class);
  }

  /**
   * Convert an instance of ThreeDSecure to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

