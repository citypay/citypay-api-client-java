/*
 * CityPay Payment API
 *  This CityPay API is a HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokinsed payments using Card Holder Accounts.  ## Compliance and Security <aside class=\"notice\">   Before we begin a reminder that your application will need to adhere to PCI-DSS standards to operate safely   and to meet requirements set out by Visa and MasterCard and the PCI Security Standards Council including: </aside>  * Data must be collected using TLS version 1.2 using [strong cryptography](#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive card holder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities. 
 *
 * The version of the OpenAPI document: 6.0.0
 * Contact: support@citypay.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.citypay.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * ThreeDSecure
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2020-08-04T15:49:38.101Z[GMT]")
public class ThreeDSecure {
  public static final String SERIALIZED_NAME_ACCEPT_HEADERS = "accept_headers";
  @SerializedName(SERIALIZED_NAME_ACCEPT_HEADERS)
  private String acceptHeaders;

  public static final String SERIALIZED_NAME_DOWNGRADE1 = "downgrade1";
  @SerializedName(SERIALIZED_NAME_DOWNGRADE1)
  private Boolean downgrade1;

  public static final String SERIALIZED_NAME_MERCHANT_TERMURL = "merchant_termurl";
  @SerializedName(SERIALIZED_NAME_MERCHANT_TERMURL)
  private String merchantTermurl;

  public static final String SERIALIZED_NAME_TDS_POLICY = "tds_policy";
  @SerializedName(SERIALIZED_NAME_TDS_POLICY)
  private String tdsPolicy;

  public static final String SERIALIZED_NAME_USER_AGENT = "user_agent";
  @SerializedName(SERIALIZED_NAME_USER_AGENT)
  private String userAgent;


  public ThreeDSecure acceptHeaders(String acceptHeaders) {
    
    this.acceptHeaders = acceptHeaders;
    return this;
  }

   /**
   * The content of the HTTP accept header as sent to the merchant from the cardholder&#39;s user agent. This value will be validated by the ACS when the card holder authenticates themselves to verify that no intermediary is performing this action. Required for 3DSv1. 
   * @return acceptHeaders
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*_/_*;q=0.8,application/signed-exchange;v=b3;q=0.9", value = "The content of the HTTP accept header as sent to the merchant from the cardholder's user agent. This value will be validated by the ACS when the card holder authenticates themselves to verify that no intermediary is performing this action. Required for 3DSv1. ")

  public String getAcceptHeaders() {
    return acceptHeaders;
  }


  public void setAcceptHeaders(String acceptHeaders) {
    this.acceptHeaders = acceptHeaders;
  }


  public ThreeDSecure downgrade1(Boolean downgrade1) {
    
    this.downgrade1 = downgrade1;
    return this;
  }

   /**
   * Where a merchant is configured for 3DSv2, setting this option will attempt to downgrade the transaction to  3DSv1. 
   * @return downgrade1
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Where a merchant is configured for 3DSv2, setting this option will attempt to downgrade the transaction to  3DSv1. ")

  public Boolean isDowngrade1() {
    return downgrade1;
  }


  public void setDowngrade1(Boolean downgrade1) {
    this.downgrade1 = downgrade1;
  }


  public ThreeDSecure merchantTermurl(String merchantTermurl) {
    
    this.merchantTermurl = merchantTermurl;
    return this;
  }

   /**
   * A controller URL for 3D-Secure processing that any response from an authentication request or challenge request should be sent to.  The controller should forward on the response from the URL back via this API for subsequent processing. Required if 3DSv1 or 3DSv2 is required. 
   * @return merchantTermurl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A controller URL for 3D-Secure processing that any response from an authentication request or challenge request should be sent to.  The controller should forward on the response from the URL back via this API for subsequent processing. Required if 3DSv1 or 3DSv2 is required. ")

  public String getMerchantTermurl() {
    return merchantTermurl;
  }


  public void setMerchantTermurl(String merchantTermurl) {
    this.merchantTermurl = merchantTermurl;
  }


  public ThreeDSecure tdsPolicy(String tdsPolicy) {
    
    this.tdsPolicy = tdsPolicy;
    return this;
  }

   /**
   * A policy value which determines whether ThreeDSecure is enforced or bypassed. Note that this will only work for e-commerce transactions and accounts that have 3DSecure enabled and fully registered with Visa, MasterCard or American Express. It is useful when transactions may be wanted to bypass processing rules.  Note that this may affect the liability shift of transactions and may occur a higher fee with the acquiring bank.  Values are  &#x60;0&#x60; for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.  &#x60;1&#x60; for an enforced policy. Transactions will be enabled for 3DS processing  &#x60;2&#x60; to bypass. Transactions that are bypassed will switch off 3DS processing. 
   * @return tdsPolicy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A policy value which determines whether ThreeDSecure is enforced or bypassed. Note that this will only work for e-commerce transactions and accounts that have 3DSecure enabled and fully registered with Visa, MasterCard or American Express. It is useful when transactions may be wanted to bypass processing rules.  Note that this may affect the liability shift of transactions and may occur a higher fee with the acquiring bank.  Values are  `0` for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.  `1` for an enforced policy. Transactions will be enabled for 3DS processing  `2` to bypass. Transactions that are bypassed will switch off 3DS processing. ")

  public String getTdsPolicy() {
    return tdsPolicy;
  }


  public void setTdsPolicy(String tdsPolicy) {
    this.tdsPolicy = tdsPolicy;
  }


  public ThreeDSecure userAgent(String userAgent) {
    
    this.userAgent = userAgent;
    return this;
  }

   /**
   * The content of the HTTP user-agent header as sent to the merchant from the cardholder&#39;s user agent. This value will be validated by the ACS when the card holder authenticates themselves to verify that no intermediary is performing this action. Required for 3DSv1. 
   * @return userAgent
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36", value = "The content of the HTTP user-agent header as sent to the merchant from the cardholder's user agent. This value will be validated by the ACS when the card holder authenticates themselves to verify that no intermediary is performing this action. Required for 3DSv1. ")

  public String getUserAgent() {
    return userAgent;
  }


  public void setUserAgent(String userAgent) {
    this.userAgent = userAgent;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ThreeDSecure threeDSecure = (ThreeDSecure) o;
    return Objects.equals(this.acceptHeaders, threeDSecure.acceptHeaders) &&
        Objects.equals(this.downgrade1, threeDSecure.downgrade1) &&
        Objects.equals(this.merchantTermurl, threeDSecure.merchantTermurl) &&
        Objects.equals(this.tdsPolicy, threeDSecure.tdsPolicy) &&
        Objects.equals(this.userAgent, threeDSecure.userAgent);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acceptHeaders, downgrade1, merchantTermurl, tdsPolicy, userAgent);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ThreeDSecure {\n");
    sb.append("    acceptHeaders: ").append(toIndentedString(acceptHeaders)).append("\n");
    sb.append("    downgrade1: ").append(toIndentedString(downgrade1)).append("\n");
    sb.append("    merchantTermurl: ").append(toIndentedString(merchantTermurl)).append("\n");
    sb.append("    tdsPolicy: ").append(toIndentedString(tdsPolicy)).append("\n");
    sb.append("    userAgent: ").append(toIndentedString(userAgent)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

