/*
 * CityPay Payment API
 *  This CityPay API is a HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokinsed payments using Card Holder Accounts.  ## Compliance and Security Your application will need to adhere to PCI-DSS standards to operate safely and to meet requirements set out by  Visa and MasterCard and the PCI Security Standards Council. These include  * Data must be collected using TLS version 1.2 using [strong cryptography](#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive card holder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities. 
 *
 * Contact: support@citypay.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.citypay.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.citypay.client.JSON;

/**
 * ThreeDSecure
 */
public class ThreeDSecure {
  public static final String SERIALIZED_NAME_ACCEPT_HEADERS = "accept_headers";
  @SerializedName(SERIALIZED_NAME_ACCEPT_HEADERS)
  private String acceptHeaders;

  public static final String SERIALIZED_NAME_BROWSER_COLOR_DEPTH = "browserColorDepth";
  @SerializedName(SERIALIZED_NAME_BROWSER_COLOR_DEPTH)
  private String browserColorDepth;

  public static final String SERIALIZED_NAME_BROWSER_I_P = "browserIP";
  @SerializedName(SERIALIZED_NAME_BROWSER_I_P)
  private String browserIP;

  public static final String SERIALIZED_NAME_BROWSER_JAVA_ENABLED = "browserJavaEnabled";
  @SerializedName(SERIALIZED_NAME_BROWSER_JAVA_ENABLED)
  private String browserJavaEnabled;

  public static final String SERIALIZED_NAME_BROWSER_LANGUAGE = "browserLanguage";
  @SerializedName(SERIALIZED_NAME_BROWSER_LANGUAGE)
  private String browserLanguage;

  public static final String SERIALIZED_NAME_BROWSER_SCREEN_HEIGHT = "browserScreenHeight";
  @SerializedName(SERIALIZED_NAME_BROWSER_SCREEN_HEIGHT)
  private String browserScreenHeight;

  public static final String SERIALIZED_NAME_BROWSER_SCREEN_WIDTH = "browserScreenWidth";
  @SerializedName(SERIALIZED_NAME_BROWSER_SCREEN_WIDTH)
  private String browserScreenWidth;

  public static final String SERIALIZED_NAME_BROWSER_T_Z = "browserTZ";
  @SerializedName(SERIALIZED_NAME_BROWSER_T_Z)
  private String browserTZ;

  public static final String SERIALIZED_NAME_CP_BX = "cp_bx";
  @SerializedName(SERIALIZED_NAME_CP_BX)
  private String cpBx;

  public static final String SERIALIZED_NAME_DOWNGRADE1 = "downgrade1";
  @SerializedName(SERIALIZED_NAME_DOWNGRADE1)
  private Boolean downgrade1;

  public static final String SERIALIZED_NAME_MERCHANT_TERMURL = "merchant_termurl";
  @SerializedName(SERIALIZED_NAME_MERCHANT_TERMURL)
  private String merchantTermurl;

  public static final String SERIALIZED_NAME_TDS_POLICY = "tds_policy";
  @SerializedName(SERIALIZED_NAME_TDS_POLICY)
  private String tdsPolicy;

  public static final String SERIALIZED_NAME_USER_AGENT = "user_agent";
  @SerializedName(SERIALIZED_NAME_USER_AGENT)
  private String userAgent;

  public ThreeDSecure() {
  }

  public ThreeDSecure acceptHeaders(String acceptHeaders) {
    
    this.acceptHeaders = acceptHeaders;
    return this;
  }

   /**
   * Required for 3DSv1. Optional if the &#x60;cp_bx&#x60; value is provided otherwise required for 3Dv2 processing operating in browser authentication mode.  The &#x60;cp_bx&#x60; value will override any value supplied to this field.  The content of the HTTP accept header as sent to the merchant from the cardholder&#39;s user agent.  This value will be validated by the ACS when the card holder authenticates themselves to verify that no intermediary is performing this action. Required for 3DSv1. 
   * @return acceptHeaders
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*_/_*;q=0.8,application/signed-exchange;v=b3;q=0.9", value = "Required for 3DSv1. Optional if the `cp_bx` value is provided otherwise required for 3Dv2 processing operating in browser authentication mode.  The `cp_bx` value will override any value supplied to this field.  The content of the HTTP accept header as sent to the merchant from the cardholder's user agent.  This value will be validated by the ACS when the card holder authenticates themselves to verify that no intermediary is performing this action. Required for 3DSv1. ")

  public String getAcceptHeaders() {
    return acceptHeaders;
  }


  public void setAcceptHeaders(String acceptHeaders) {
    this.acceptHeaders = acceptHeaders;
  }


  public ThreeDSecure browserColorDepth(String browserColorDepth) {
    
    this.browserColorDepth = browserColorDepth;
    return this;
  }

   /**
   * BrowserColorDepth field used for 3DSv2 browser enablement. Recommendation is to use citypay.js and the &#x60;bx&#x60; function to gather this value.
   * @return browserColorDepth
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "BrowserColorDepth field used for 3DSv2 browser enablement. Recommendation is to use citypay.js and the `bx` function to gather this value.")

  public String getBrowserColorDepth() {
    return browserColorDepth;
  }


  public void setBrowserColorDepth(String browserColorDepth) {
    this.browserColorDepth = browserColorDepth;
  }


  public ThreeDSecure browserIP(String browserIP) {
    
    this.browserIP = browserIP;
    return this;
  }

   /**
   * BrowserIP field used for 3DSv2 browser enablement. Recommendation is to use citypay.js and the &#x60;bx&#x60; function to gather this value.
   * @return browserIP
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "BrowserIP field used for 3DSv2 browser enablement. Recommendation is to use citypay.js and the `bx` function to gather this value.")

  public String getBrowserIP() {
    return browserIP;
  }


  public void setBrowserIP(String browserIP) {
    this.browserIP = browserIP;
  }


  public ThreeDSecure browserJavaEnabled(String browserJavaEnabled) {
    
    this.browserJavaEnabled = browserJavaEnabled;
    return this;
  }

   /**
   * BrowserJavaEnabled field used for 3DSv2 browser enablement. Recommendation is to use citypay.js and the &#x60;bx&#x60; function to gather this value.
   * @return browserJavaEnabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "BrowserJavaEnabled field used for 3DSv2 browser enablement. Recommendation is to use citypay.js and the `bx` function to gather this value.")

  public String getBrowserJavaEnabled() {
    return browserJavaEnabled;
  }


  public void setBrowserJavaEnabled(String browserJavaEnabled) {
    this.browserJavaEnabled = browserJavaEnabled;
  }


  public ThreeDSecure browserLanguage(String browserLanguage) {
    
    this.browserLanguage = browserLanguage;
    return this;
  }

   /**
   * BrowserLanguage field used for 3DSv2 browser enablement. Recommendation is to use citypay.js and the &#x60;bx&#x60; function to gather this value.
   * @return browserLanguage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "BrowserLanguage field used for 3DSv2 browser enablement. Recommendation is to use citypay.js and the `bx` function to gather this value.")

  public String getBrowserLanguage() {
    return browserLanguage;
  }


  public void setBrowserLanguage(String browserLanguage) {
    this.browserLanguage = browserLanguage;
  }


  public ThreeDSecure browserScreenHeight(String browserScreenHeight) {
    
    this.browserScreenHeight = browserScreenHeight;
    return this;
  }

   /**
   * BrowserScreenHeight field used for 3DSv2 browser enablement. Recommendation is to use citypay.js and the &#x60;bx&#x60; function to gather this value.
   * @return browserScreenHeight
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "BrowserScreenHeight field used for 3DSv2 browser enablement. Recommendation is to use citypay.js and the `bx` function to gather this value.")

  public String getBrowserScreenHeight() {
    return browserScreenHeight;
  }


  public void setBrowserScreenHeight(String browserScreenHeight) {
    this.browserScreenHeight = browserScreenHeight;
  }


  public ThreeDSecure browserScreenWidth(String browserScreenWidth) {
    
    this.browserScreenWidth = browserScreenWidth;
    return this;
  }

   /**
   * BrowserScreenWidth field used for 3DSv2 browser enablement. Recommendation is to use citypay.js and the &#x60;bx&#x60; function to gather this value.
   * @return browserScreenWidth
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "BrowserScreenWidth field used for 3DSv2 browser enablement. Recommendation is to use citypay.js and the `bx` function to gather this value.")

  public String getBrowserScreenWidth() {
    return browserScreenWidth;
  }


  public void setBrowserScreenWidth(String browserScreenWidth) {
    this.browserScreenWidth = browserScreenWidth;
  }


  public ThreeDSecure browserTZ(String browserTZ) {
    
    this.browserTZ = browserTZ;
    return this;
  }

   /**
   * BrowserTZ field used for 3DSv2 browser enablement. Recommendation is to use citypay.js and the &#x60;bx&#x60; function to gather this value.
   * @return browserTZ
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "BrowserTZ field used for 3DSv2 browser enablement. Recommendation is to use citypay.js and the `bx` function to gather this value.")

  public String getBrowserTZ() {
    return browserTZ;
  }


  public void setBrowserTZ(String browserTZ) {
    this.browserTZ = browserTZ;
  }


  public ThreeDSecure cpBx(String cpBx) {
    
    this.cpBx = cpBx;
    return this;
  }

   /**
   * Required for 3DSv2.  Browser extension value produced by the citypay.js &#x60;bx&#x60; function. See [https://sandbox.citypay.com/3dsv2/bx](https://sandbox.citypay.com/3dsv2/bx) for  details. 
   * @return cpBx
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "FjaW50b3NoOyBJbnRlbCBNYWMgT1MgWCAx...", value = "Required for 3DSv2.  Browser extension value produced by the citypay.js `bx` function. See [https://sandbox.citypay.com/3dsv2/bx](https://sandbox.citypay.com/3dsv2/bx) for  details. ")

  public String getCpBx() {
    return cpBx;
  }


  public void setCpBx(String cpBx) {
    this.cpBx = cpBx;
  }


  public ThreeDSecure downgrade1(Boolean downgrade1) {
    
    this.downgrade1 = downgrade1;
    return this;
  }

   /**
   * Where a merchant is configured for 3DSv2, setting this option will attempt to downgrade the transaction to  3DSv1. 
   * @return downgrade1
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Where a merchant is configured for 3DSv2, setting this option will attempt to downgrade the transaction to  3DSv1. ")

  public Boolean isDowngrade1() {
    return downgrade1;
  }


  public void setDowngrade1(Boolean downgrade1) {
    this.downgrade1 = downgrade1;
  }


  public ThreeDSecure merchantTermurl(String merchantTermurl) {
    
    this.merchantTermurl = merchantTermurl;
    return this;
  }

   /**
   * A controller URL for 3D-Secure processing that any response from an authentication request or challenge request should be sent to.  The controller should forward on the response from the URL back via this API for subsequent processing. 
   * @return merchantTermurl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://mysite.com/acs/return", value = "A controller URL for 3D-Secure processing that any response from an authentication request or challenge request should be sent to.  The controller should forward on the response from the URL back via this API for subsequent processing. ")

  public String getMerchantTermurl() {
    return merchantTermurl;
  }


  public void setMerchantTermurl(String merchantTermurl) {
    this.merchantTermurl = merchantTermurl;
  }


  public ThreeDSecure tdsPolicy(String tdsPolicy) {
    
    this.tdsPolicy = tdsPolicy;
    return this;
  }

   /**
   * A policy value which determines whether ThreeDSecure is enforced or bypassed. Note that this will only work for e-commerce transactions and accounts that have 3DSecure enabled and fully registered with Visa, MasterCard or American Express. It is useful when transactions may be wanted to bypass processing rules.  Note that this may affect the liability shift of transactions and may occur a higher fee with the acquiring bank.  Values are   &#x60;0&#x60; for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.   &#x60;1&#x60; for an enforced policy. Transactions will be enabled for 3DS processing   &#x60;2&#x60; to bypass. Transactions that are bypassed will switch off 3DS processing. 
   * @return tdsPolicy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A policy value which determines whether ThreeDSecure is enforced or bypassed. Note that this will only work for e-commerce transactions and accounts that have 3DSecure enabled and fully registered with Visa, MasterCard or American Express. It is useful when transactions may be wanted to bypass processing rules.  Note that this may affect the liability shift of transactions and may occur a higher fee with the acquiring bank.  Values are   `0` for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.   `1` for an enforced policy. Transactions will be enabled for 3DS processing   `2` to bypass. Transactions that are bypassed will switch off 3DS processing. ")

  public String getTdsPolicy() {
    return tdsPolicy;
  }


  public void setTdsPolicy(String tdsPolicy) {
    this.tdsPolicy = tdsPolicy;
  }


  public ThreeDSecure userAgent(String userAgent) {
    
    this.userAgent = userAgent;
    return this;
  }

   /**
   * Required for 3DSv1.  Optional if the &#x60;cp_bx&#x60; value is provided otherwise required 3Dv2 processing operating in browser authentication mode.  The &#x60;cp_bx&#x60; value will override any value supplied to this field.  The content of the HTTP user-agent header as sent to the merchant from the cardholder&#39;s user agent.  This value will be validated by the ACS when the card holder authenticates themselves to verify that no intermediary is performing this action. Required for 3DSv1. 
   * @return userAgent
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36", value = "Required for 3DSv1.  Optional if the `cp_bx` value is provided otherwise required 3Dv2 processing operating in browser authentication mode.  The `cp_bx` value will override any value supplied to this field.  The content of the HTTP user-agent header as sent to the merchant from the cardholder's user agent.  This value will be validated by the ACS when the card holder authenticates themselves to verify that no intermediary is performing this action. Required for 3DSv1. ")

  public String getUserAgent() {
    return userAgent;
  }


  public void setUserAgent(String userAgent) {
    this.userAgent = userAgent;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ThreeDSecure threeDSecure = (ThreeDSecure) o;
    return Objects.equals(this.acceptHeaders, threeDSecure.acceptHeaders) &&
        Objects.equals(this.browserColorDepth, threeDSecure.browserColorDepth) &&
        Objects.equals(this.browserIP, threeDSecure.browserIP) &&
        Objects.equals(this.browserJavaEnabled, threeDSecure.browserJavaEnabled) &&
        Objects.equals(this.browserLanguage, threeDSecure.browserLanguage) &&
        Objects.equals(this.browserScreenHeight, threeDSecure.browserScreenHeight) &&
        Objects.equals(this.browserScreenWidth, threeDSecure.browserScreenWidth) &&
        Objects.equals(this.browserTZ, threeDSecure.browserTZ) &&
        Objects.equals(this.cpBx, threeDSecure.cpBx) &&
        Objects.equals(this.downgrade1, threeDSecure.downgrade1) &&
        Objects.equals(this.merchantTermurl, threeDSecure.merchantTermurl) &&
        Objects.equals(this.tdsPolicy, threeDSecure.tdsPolicy) &&
        Objects.equals(this.userAgent, threeDSecure.userAgent);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acceptHeaders, browserColorDepth, browserIP, browserJavaEnabled, browserLanguage, browserScreenHeight, browserScreenWidth, browserTZ, cpBx, downgrade1, merchantTermurl, tdsPolicy, userAgent);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ThreeDSecure {\n");
    sb.append("    acceptHeaders: ").append(toIndentedString(acceptHeaders)).append("\n");
    sb.append("    browserColorDepth: ").append(toIndentedString(browserColorDepth)).append("\n");
    sb.append("    browserIP: ").append(toIndentedString(browserIP)).append("\n");
    sb.append("    browserJavaEnabled: ").append(toIndentedString(browserJavaEnabled)).append("\n");
    sb.append("    browserLanguage: ").append(toIndentedString(browserLanguage)).append("\n");
    sb.append("    browserScreenHeight: ").append(toIndentedString(browserScreenHeight)).append("\n");
    sb.append("    browserScreenWidth: ").append(toIndentedString(browserScreenWidth)).append("\n");
    sb.append("    browserTZ: ").append(toIndentedString(browserTZ)).append("\n");
    sb.append("    cpBx: ").append(toIndentedString(cpBx)).append("\n");
    sb.append("    downgrade1: ").append(toIndentedString(downgrade1)).append("\n");
    sb.append("    merchantTermurl: ").append(toIndentedString(merchantTermurl)).append("\n");
    sb.append("    tdsPolicy: ").append(toIndentedString(tdsPolicy)).append("\n");
    sb.append("    userAgent: ").append(toIndentedString(userAgent)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accept_headers");
    openapiFields.add("browserColorDepth");
    openapiFields.add("browserIP");
    openapiFields.add("browserJavaEnabled");
    openapiFields.add("browserLanguage");
    openapiFields.add("browserScreenHeight");
    openapiFields.add("browserScreenWidth");
    openapiFields.add("browserTZ");
    openapiFields.add("cp_bx");
    openapiFields.add("downgrade1");
    openapiFields.add("merchant_termurl");
    openapiFields.add("tds_policy");
    openapiFields.add("user_agent");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ThreeDSecure
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ThreeDSecure.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ThreeDSecure is not found in the empty JSON string", ThreeDSecure.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ThreeDSecure.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ThreeDSecure` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("accept_headers") != null && !jsonObj.get("accept_headers").isJsonNull()) && !jsonObj.get("accept_headers").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accept_headers` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accept_headers").toString()));
      }
      if ((jsonObj.get("browserColorDepth") != null && !jsonObj.get("browserColorDepth").isJsonNull()) && !jsonObj.get("browserColorDepth").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `browserColorDepth` to be a primitive type in the JSON string but got `%s`", jsonObj.get("browserColorDepth").toString()));
      }
      if ((jsonObj.get("browserIP") != null && !jsonObj.get("browserIP").isJsonNull()) && !jsonObj.get("browserIP").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `browserIP` to be a primitive type in the JSON string but got `%s`", jsonObj.get("browserIP").toString()));
      }
      if ((jsonObj.get("browserJavaEnabled") != null && !jsonObj.get("browserJavaEnabled").isJsonNull()) && !jsonObj.get("browserJavaEnabled").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `browserJavaEnabled` to be a primitive type in the JSON string but got `%s`", jsonObj.get("browserJavaEnabled").toString()));
      }
      if ((jsonObj.get("browserLanguage") != null && !jsonObj.get("browserLanguage").isJsonNull()) && !jsonObj.get("browserLanguage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `browserLanguage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("browserLanguage").toString()));
      }
      if ((jsonObj.get("browserScreenHeight") != null && !jsonObj.get("browserScreenHeight").isJsonNull()) && !jsonObj.get("browserScreenHeight").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `browserScreenHeight` to be a primitive type in the JSON string but got `%s`", jsonObj.get("browserScreenHeight").toString()));
      }
      if ((jsonObj.get("browserScreenWidth") != null && !jsonObj.get("browserScreenWidth").isJsonNull()) && !jsonObj.get("browserScreenWidth").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `browserScreenWidth` to be a primitive type in the JSON string but got `%s`", jsonObj.get("browserScreenWidth").toString()));
      }
      if ((jsonObj.get("browserTZ") != null && !jsonObj.get("browserTZ").isJsonNull()) && !jsonObj.get("browserTZ").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `browserTZ` to be a primitive type in the JSON string but got `%s`", jsonObj.get("browserTZ").toString()));
      }
      if ((jsonObj.get("cp_bx") != null && !jsonObj.get("cp_bx").isJsonNull()) && !jsonObj.get("cp_bx").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cp_bx` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cp_bx").toString()));
      }
      if ((jsonObj.get("merchant_termurl") != null && !jsonObj.get("merchant_termurl").isJsonNull()) && !jsonObj.get("merchant_termurl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchant_termurl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchant_termurl").toString()));
      }
      if ((jsonObj.get("tds_policy") != null && !jsonObj.get("tds_policy").isJsonNull()) && !jsonObj.get("tds_policy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tds_policy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tds_policy").toString()));
      }
      if ((jsonObj.get("user_agent") != null && !jsonObj.get("user_agent").isJsonNull()) && !jsonObj.get("user_agent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_agent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_agent").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ThreeDSecure.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ThreeDSecure' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ThreeDSecure> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ThreeDSecure.class));

       return (TypeAdapter<T>) new TypeAdapter<ThreeDSecure>() {
           @Override
           public void write(JsonWriter out, ThreeDSecure value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ThreeDSecure read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ThreeDSecure given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ThreeDSecure
  * @throws IOException if the JSON string is invalid with respect to ThreeDSecure
  */
  public static ThreeDSecure fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ThreeDSecure.class);
  }

 /**
  * Convert an instance of ThreeDSecure to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

