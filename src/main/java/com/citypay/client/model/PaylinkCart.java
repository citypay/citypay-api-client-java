/*
 * CityPay Payment API
 *  This CityPay API is a HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokinsed payments using Card Holder Accounts.  ## Compliance and Security Your application will need to adhere to PCI-DSS standards to operate safely and to meet requirements set out by  Visa and MasterCard and the PCI Security Standards Council. These include  * Data must be collected using TLS version 1.2 using [strong cryptography](#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive card holder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities. 
 *
 * Contact: support@citypay.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.citypay.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.citypay.client.model.PaylinkCartItemModel;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.citypay.client.JSON;

/**
 * PaylinkCart
 */
public class PaylinkCart {
  public static final String SERIALIZED_NAME_CONTENTS = "contents";
  @SerializedName(SERIALIZED_NAME_CONTENTS)
  private List<PaylinkCartItemModel> contents = null;

  public static final String SERIALIZED_NAME_COUPON = "coupon";
  @SerializedName(SERIALIZED_NAME_COUPON)
  private String coupon;

  public static final String SERIALIZED_NAME_MODE = "mode";
  @SerializedName(SERIALIZED_NAME_MODE)
  private Integer mode;

  public static final String SERIALIZED_NAME_PRODUCT_DESCRIPTION = "product_description";
  @SerializedName(SERIALIZED_NAME_PRODUCT_DESCRIPTION)
  private String productDescription;

  public static final String SERIALIZED_NAME_PRODUCT_INFORMATION = "product_information";
  @SerializedName(SERIALIZED_NAME_PRODUCT_INFORMATION)
  private String productInformation;

  public static final String SERIALIZED_NAME_SHIPPING = "shipping";
  @SerializedName(SERIALIZED_NAME_SHIPPING)
  private Integer shipping;

  public static final String SERIALIZED_NAME_TAX = "tax";
  @SerializedName(SERIALIZED_NAME_TAX)
  private Integer tax;

  public PaylinkCart() {
  }

  public PaylinkCart contents(List<PaylinkCartItemModel> contents) {
    
    this.contents = contents;
    return this;
  }

  public PaylinkCart addContentsItem(PaylinkCartItemModel contentsItem) {
    if (this.contents == null) {
      this.contents = new ArrayList<>();
    }
    this.contents.add(contentsItem);
    return this;
  }

   /**
   * Get contents
   * @return contents
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<PaylinkCartItemModel> getContents() {
    return contents;
  }


  public void setContents(List<PaylinkCartItemModel> contents) {
    this.contents = contents;
  }


  public PaylinkCart coupon(String coupon) {
    
    this.coupon = coupon;
    return this;
  }

   /**
   * A coupon redeemed with the transaction.
   * @return coupon
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A coupon redeemed with the transaction.")

  public String getCoupon() {
    return coupon;
  }


  public void setCoupon(String coupon) {
    this.coupon = coupon;
  }


  public PaylinkCart mode(Integer mode) {
    
    this.mode = mode;
    return this;
  }

   /**
   * The mode field specifies the behaviour or functionality of the cart.  Valid values are:   0 - No cart - No cart is shown  1 - Read-only - The cart is shown with a breakdown of the item details provided by objects in the contents array.  2 - Selection cart - The cart is shown as a drop-down box of available cart items that the customer can a single item select from.  3 - Dynamic cart - a text box is rendered to enable the operator to input an amount.  4 - Multi cart - The cart is displayed with items rendered with selectable quantities. 
   * @return mode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The mode field specifies the behaviour or functionality of the cart.  Valid values are:   0 - No cart - No cart is shown  1 - Read-only - The cart is shown with a breakdown of the item details provided by objects in the contents array.  2 - Selection cart - The cart is shown as a drop-down box of available cart items that the customer can a single item select from.  3 - Dynamic cart - a text box is rendered to enable the operator to input an amount.  4 - Multi cart - The cart is displayed with items rendered with selectable quantities. ")

  public Integer getMode() {
    return mode;
  }


  public void setMode(Integer mode) {
    this.mode = mode;
  }


  public PaylinkCart productDescription(String productDescription) {
    
    this.productDescription = productDescription;
    return this;
  }

   /**
   * Specifies a description about the product or service that is the subject of the transaction. It will be rendered in the header of the page with no labels.
   * @return productDescription
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies a description about the product or service that is the subject of the transaction. It will be rendered in the header of the page with no labels.")

  public String getProductDescription() {
    return productDescription;
  }


  public void setProductDescription(String productDescription) {
    this.productDescription = productDescription;
  }


  public PaylinkCart productInformation(String productInformation) {
    
    this.productInformation = productInformation;
    return this;
  }

   /**
   * Specifies information about the product or service that is the subject of the transaction. It will be rendered in the header of the page.
   * @return productInformation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies information about the product or service that is the subject of the transaction. It will be rendered in the header of the page.")

  public String getProductInformation() {
    return productInformation;
  }


  public void setProductInformation(String productInformation) {
    this.productInformation = productInformation;
  }


  public PaylinkCart shipping(Integer shipping) {
    
    this.shipping = shipping;
    return this;
  }

   /**
   * The shipping amount of the transaction in the lowest denomination of currency.
   * @return shipping
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The shipping amount of the transaction in the lowest denomination of currency.")

  public Integer getShipping() {
    return shipping;
  }


  public void setShipping(Integer shipping) {
    this.shipping = shipping;
  }


  public PaylinkCart tax(Integer tax) {
    
    this.tax = tax;
    return this;
  }

   /**
   * The tax amount of the transaction in the lowest denomination of currency.
   * @return tax
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The tax amount of the transaction in the lowest denomination of currency.")

  public Integer getTax() {
    return tax;
  }


  public void setTax(Integer tax) {
    this.tax = tax;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaylinkCart paylinkCart = (PaylinkCart) o;
    return Objects.equals(this.contents, paylinkCart.contents) &&
        Objects.equals(this.coupon, paylinkCart.coupon) &&
        Objects.equals(this.mode, paylinkCart.mode) &&
        Objects.equals(this.productDescription, paylinkCart.productDescription) &&
        Objects.equals(this.productInformation, paylinkCart.productInformation) &&
        Objects.equals(this.shipping, paylinkCart.shipping) &&
        Objects.equals(this.tax, paylinkCart.tax);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contents, coupon, mode, productDescription, productInformation, shipping, tax);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaylinkCart {\n");
    sb.append("    contents: ").append(toIndentedString(contents)).append("\n");
    sb.append("    coupon: ").append(toIndentedString(coupon)).append("\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("    productDescription: ").append(toIndentedString(productDescription)).append("\n");
    sb.append("    productInformation: ").append(toIndentedString(productInformation)).append("\n");
    sb.append("    shipping: ").append(toIndentedString(shipping)).append("\n");
    sb.append("    tax: ").append(toIndentedString(tax)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("contents");
    openapiFields.add("coupon");
    openapiFields.add("mode");
    openapiFields.add("product_description");
    openapiFields.add("product_information");
    openapiFields.add("shipping");
    openapiFields.add("tax");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PaylinkCart
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (PaylinkCart.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in PaylinkCart is not found in the empty JSON string", PaylinkCart.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!PaylinkCart.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PaylinkCart` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      JsonArray jsonArraycontents = jsonObj.getAsJsonArray("contents");
      if (jsonArraycontents != null) {
        // ensure the json data is an array
        if (!jsonObj.get("contents").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `contents` to be an array in the JSON string but got `%s`", jsonObj.get("contents").toString()));
        }

        // validate the optional field `contents` (array)
        for (int i = 0; i < jsonArraycontents.size(); i++) {
          PaylinkCartItemModel.validateJsonObject(jsonArraycontents.get(i).getAsJsonObject());
        };
      }
      if ((jsonObj.get("coupon") != null && !jsonObj.get("coupon").isJsonNull()) && !jsonObj.get("coupon").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `coupon` to be a primitive type in the JSON string but got `%s`", jsonObj.get("coupon").toString()));
      }
      if ((jsonObj.get("product_description") != null && !jsonObj.get("product_description").isJsonNull()) && !jsonObj.get("product_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `product_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("product_description").toString()));
      }
      if ((jsonObj.get("product_information") != null && !jsonObj.get("product_information").isJsonNull()) && !jsonObj.get("product_information").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `product_information` to be a primitive type in the JSON string but got `%s`", jsonObj.get("product_information").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PaylinkCart.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PaylinkCart' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PaylinkCart> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PaylinkCart.class));

       return (TypeAdapter<T>) new TypeAdapter<PaylinkCart>() {
           @Override
           public void write(JsonWriter out, PaylinkCart value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PaylinkCart read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PaylinkCart given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PaylinkCart
  * @throws IOException if the JSON string is invalid with respect to PaylinkCart
  */
  public static PaylinkCart fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PaylinkCart.class);
  }

 /**
  * Convert an instance of PaylinkCart to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

