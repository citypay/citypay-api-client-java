/*
 * CityPay Payment API
 *  This CityPay API is an HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokenized payments using cardholder Accounts.  ## Compliance and Security Your application will need to adhere to PCI-DSS standards to operate safely and to meet requirements set out by  Visa and MasterCard and the PCI Security Standards Council. These include  * Data must be collected using TLS version 1.2 using [strong cryptography](https://citypay.github.io/api-docs/payment-api/#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive cardholder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities. 
 *
 * Contact: support@citypay.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.citypay.client.model;

import java.util.Objects;
import com.citypay.client.model.PaylinkCardHolder;
import com.citypay.client.model.PaylinkCart;
import com.citypay.client.model.PaylinkConfig;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.citypay.client.JSON;

/**
 * PaylinkTokenRequestModel
 */
public class PaylinkTokenRequestModel {
  public static final String SERIALIZED_NAME_ACCOUNTNO = "accountno";
  @SerializedName(SERIALIZED_NAME_ACCOUNTNO)
  private String accountno;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Integer amount;

  public static final String SERIALIZED_NAME_CARDHOLDER = "cardholder";
  @SerializedName(SERIALIZED_NAME_CARDHOLDER)
  private PaylinkCardHolder cardholder;

  public static final String SERIALIZED_NAME_CART = "cart";
  @SerializedName(SERIALIZED_NAME_CART)
  private PaylinkCart cart;

  public static final String SERIALIZED_NAME_CLIENT_VERSION = "client_version";
  @SerializedName(SERIALIZED_NAME_CLIENT_VERSION)
  private String clientVersion;

  public static final String SERIALIZED_NAME_CONFIG = "config";
  @SerializedName(SERIALIZED_NAME_CONFIG)
  private PaylinkConfig config;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_IDENTIFIER = "identifier";
  @SerializedName(SERIALIZED_NAME_IDENTIFIER)
  private String identifier;

  public static final String SERIALIZED_NAME_MERCHANTID = "merchantid";
  @SerializedName(SERIALIZED_NAME_MERCHANTID)
  private Integer merchantid;

  public static final String SERIALIZED_NAME_RECURRING = "recurring";
  @SerializedName(SERIALIZED_NAME_RECURRING)
  private Boolean recurring;

  public static final String SERIALIZED_NAME_SUBSCRIPTION_ID = "subscription_id";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_ID)
  private String subscriptionId;

  public static final String SERIALIZED_NAME_TX_TYPE = "tx_type";
  @SerializedName(SERIALIZED_NAME_TX_TYPE)
  private String txType;

  public PaylinkTokenRequestModel() {
  }

  public PaylinkTokenRequestModel accountno(String accountno) {
    this.accountno = accountno;
    return this;
  }

   /**
   * Specifies an alpha-numeric account number that the Paylink service uses when creating a Cardholder Account. The value should be no longer than 20 characters in length.
   * @return accountno
  **/
  @javax.annotation.Nullable
  public String getAccountno() {
    return accountno;
  }

  public void setAccountno(String accountno) {
    this.accountno = accountno;
  }


  public PaylinkTokenRequestModel amount(Integer amount) {
    this.amount = amount;
    return this;
  }

   /**
   * Specifies the intended value of the transaction in the lowest denomination with no spacing characters or decimal point. This is the net total to be processed. An example of Â£74.95 would be presented as 7495.
   * @return amount
  **/
  @javax.annotation.Nonnull
  public Integer getAmount() {
    return amount;
  }

  public void setAmount(Integer amount) {
    this.amount = amount;
  }


  public PaylinkTokenRequestModel cardholder(PaylinkCardHolder cardholder) {
    this.cardholder = cardholder;
    return this;
  }

   /**
   * Get cardholder
   * @return cardholder
  **/
  @javax.annotation.Nullable
  public PaylinkCardHolder getCardholder() {
    return cardholder;
  }

  public void setCardholder(PaylinkCardHolder cardholder) {
    this.cardholder = cardholder;
  }


  public PaylinkTokenRequestModel cart(PaylinkCart cart) {
    this.cart = cart;
    return this;
  }

   /**
   * Get cart
   * @return cart
  **/
  @javax.annotation.Nullable
  public PaylinkCart getCart() {
    return cart;
  }

  public void setCart(PaylinkCart cart) {
    this.cart = cart;
  }


  public PaylinkTokenRequestModel clientVersion(String clientVersion) {
    this.clientVersion = clientVersion;
    return this;
  }

   /**
   * The clientVersion field is used to specify the version of your application that has invoked the Paylink payment process. This feature is typically used for tracing issues relating to application deployments, or any Paylink integration module or plugin.
   * @return clientVersion
  **/
  @javax.annotation.Nullable
  public String getClientVersion() {
    return clientVersion;
  }

  public void setClientVersion(String clientVersion) {
    this.clientVersion = clientVersion;
  }


  public PaylinkTokenRequestModel config(PaylinkConfig config) {
    this.config = config;
    return this;
  }

   /**
   * Get config
   * @return config
  **/
  @javax.annotation.Nullable
  public PaylinkConfig getConfig() {
    return config;
  }

  public void setConfig(PaylinkConfig config) {
    this.config = config;
  }


  public PaylinkTokenRequestModel currency(String currency) {
    this.currency = currency;
    return this;
  }

   /**
   * A currency for the token. This value should be only used on multi-currency accounts and be an appropriate currency which the account is configured for.
   * @return currency
  **/
  @javax.annotation.Nullable
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public PaylinkTokenRequestModel email(String email) {
    this.email = email;
    return this;
  }

   /**
   * The email field is used for the Merchant to be notified on completion of the transaction . The value may be supplied to override the default stored value. Emails sent to this address by the Paylink service should not be forwarded on to the cardholder as it may contain certain information that is used by the Paylink service to validate and authenticate Paylink Token Requests: for example, the Merchant ID and the licence key. 
   * @return email
  **/
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public PaylinkTokenRequestModel identifier(String identifier) {
    this.identifier = identifier;
    return this;
  }

   /**
   * Identifies a particular transaction linked to a Merchant account. It enables accurate duplicate checking within a pre-configured time period, as well as transaction reporting and tracing. The identifier should be unique to prevent payment card processing attempts from being rejected due to duplication. 
   * @return identifier
  **/
  @javax.annotation.Nonnull
  public String getIdentifier() {
    return identifier;
  }

  public void setIdentifier(String identifier) {
    this.identifier = identifier;
  }


  public PaylinkTokenRequestModel merchantid(Integer merchantid) {
    this.merchantid = merchantid;
    return this;
  }

   /**
   * The merchant id you wish to process this transaction with.
   * @return merchantid
  **/
  @javax.annotation.Nonnull
  public Integer getMerchantid() {
    return merchantid;
  }

  public void setMerchantid(Integer merchantid) {
    this.merchantid = merchantid;
  }


  public PaylinkTokenRequestModel recurring(Boolean recurring) {
    this.recurring = recurring;
    return this;
  }

   /**
   * True if the intent of this cardholder initiated transaction is to establish a recurring payment model, processable as merchant initiated transactions.
   * @return recurring
  **/
  @javax.annotation.Nullable
  public Boolean isRecurring() {
    return recurring;
  }

  public void setRecurring(Boolean recurring) {
    this.recurring = recurring;
  }


  public PaylinkTokenRequestModel subscriptionId(String subscriptionId) {
    this.subscriptionId = subscriptionId;
    return this;
  }

   /**
   * an id associated with a subscription to link the token request against.
   * @return subscriptionId
  **/
  @javax.annotation.Nullable
  public String getSubscriptionId() {
    return subscriptionId;
  }

  public void setSubscriptionId(String subscriptionId) {
    this.subscriptionId = subscriptionId;
  }


  public PaylinkTokenRequestModel txType(String txType) {
    this.txType = txType;
    return this;
  }

   /**
   * A value to override the transaction type if requested by your account manager.
   * @return txType
  **/
  @javax.annotation.Nullable
  public String getTxType() {
    return txType;
  }

  public void setTxType(String txType) {
    this.txType = txType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaylinkTokenRequestModel paylinkTokenRequestModel = (PaylinkTokenRequestModel) o;
    return Objects.equals(this.accountno, paylinkTokenRequestModel.accountno) &&
        Objects.equals(this.amount, paylinkTokenRequestModel.amount) &&
        Objects.equals(this.cardholder, paylinkTokenRequestModel.cardholder) &&
        Objects.equals(this.cart, paylinkTokenRequestModel.cart) &&
        Objects.equals(this.clientVersion, paylinkTokenRequestModel.clientVersion) &&
        Objects.equals(this.config, paylinkTokenRequestModel.config) &&
        Objects.equals(this.currency, paylinkTokenRequestModel.currency) &&
        Objects.equals(this.email, paylinkTokenRequestModel.email) &&
        Objects.equals(this.identifier, paylinkTokenRequestModel.identifier) &&
        Objects.equals(this.merchantid, paylinkTokenRequestModel.merchantid) &&
        Objects.equals(this.recurring, paylinkTokenRequestModel.recurring) &&
        Objects.equals(this.subscriptionId, paylinkTokenRequestModel.subscriptionId) &&
        Objects.equals(this.txType, paylinkTokenRequestModel.txType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountno, amount, cardholder, cart, clientVersion, config, currency, email, identifier, merchantid, recurring, subscriptionId, txType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaylinkTokenRequestModel {\n");
    sb.append("    accountno: ").append(toIndentedString(accountno)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    cardholder: ").append(toIndentedString(cardholder)).append("\n");
    sb.append("    cart: ").append(toIndentedString(cart)).append("\n");
    sb.append("    clientVersion: ").append(toIndentedString(clientVersion)).append("\n");
    sb.append("    config: ").append(toIndentedString(config)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    identifier: ").append(toIndentedString(identifier)).append("\n");
    sb.append("    merchantid: ").append(toIndentedString(merchantid)).append("\n");
    sb.append("    recurring: ").append(toIndentedString(recurring)).append("\n");
    sb.append("    subscriptionId: ").append(toIndentedString(subscriptionId)).append("\n");
    sb.append("    txType: ").append(toIndentedString(txType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountno");
    openapiFields.add("amount");
    openapiFields.add("cardholder");
    openapiFields.add("cart");
    openapiFields.add("client_version");
    openapiFields.add("config");
    openapiFields.add("currency");
    openapiFields.add("email");
    openapiFields.add("identifier");
    openapiFields.add("merchantid");
    openapiFields.add("recurring");
    openapiFields.add("subscription_id");
    openapiFields.add("tx_type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("amount");
    openapiRequiredFields.add("identifier");
    openapiRequiredFields.add("merchantid");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to PaylinkTokenRequestModel
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PaylinkTokenRequestModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PaylinkTokenRequestModel is not found in the empty JSON string", PaylinkTokenRequestModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PaylinkTokenRequestModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PaylinkTokenRequestModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PaylinkTokenRequestModel.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accountno") != null && !jsonObj.get("accountno").isJsonNull()) && !jsonObj.get("accountno").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountno` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountno").toString()));
      }
      // validate the optional field `cardholder`
      if (jsonObj.get("cardholder") != null && !jsonObj.get("cardholder").isJsonNull()) {
        PaylinkCardHolder.validateJsonElement(jsonObj.get("cardholder"));
      }
      // validate the optional field `cart`
      if (jsonObj.get("cart") != null && !jsonObj.get("cart").isJsonNull()) {
        PaylinkCart.validateJsonElement(jsonObj.get("cart"));
      }
      if ((jsonObj.get("client_version") != null && !jsonObj.get("client_version").isJsonNull()) && !jsonObj.get("client_version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client_version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client_version").toString()));
      }
      // validate the optional field `config`
      if (jsonObj.get("config") != null && !jsonObj.get("config").isJsonNull()) {
        PaylinkConfig.validateJsonElement(jsonObj.get("config"));
      }
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if (!jsonObj.get("identifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `identifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("identifier").toString()));
      }
      if ((jsonObj.get("subscription_id") != null && !jsonObj.get("subscription_id").isJsonNull()) && !jsonObj.get("subscription_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscription_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscription_id").toString()));
      }
      if ((jsonObj.get("tx_type") != null && !jsonObj.get("tx_type").isJsonNull()) && !jsonObj.get("tx_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tx_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tx_type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PaylinkTokenRequestModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PaylinkTokenRequestModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PaylinkTokenRequestModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PaylinkTokenRequestModel.class));

       return (TypeAdapter<T>) new TypeAdapter<PaylinkTokenRequestModel>() {
           @Override
           public void write(JsonWriter out, PaylinkTokenRequestModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PaylinkTokenRequestModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PaylinkTokenRequestModel given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PaylinkTokenRequestModel
  * @throws IOException if the JSON string is invalid with respect to PaylinkTokenRequestModel
  */
  public static PaylinkTokenRequestModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PaylinkTokenRequestModel.class);
  }

 /**
  * Convert an instance of PaylinkTokenRequestModel to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

