/*
 * CityPay Payment API
 *  Welcome to the CityPay API, a robust HTTP API payment solution designed for seamless server-to-server  transactional processing. Our API facilitates a wide array of payment operations, catering to diverse business needs.  Whether you're integrating Internet payments, handling Mail Order/Telephone Order (MOTO) transactions, managing  Subscriptions with Recurring and Continuous Authority payments, or navigating the complexities of 3-D Secure  authentication, our API is equipped to support your requirements. Additionally, we offer functionalities for  Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids, and Completion processing, alongside the capability  for tokenised payments.  ## Compliance and Security Overview <aside class=\"notice\">   Ensuring the security of payment transactions and compliance with industry standards is paramount. Our API is    designed with stringent security measures and compliance protocols to safeguard sensitive information and meet    the rigorous requirements of Visa, MasterCard, and the PCI Security Standards Council. </aside>  ### Key Compliance and Security Measures  * **TLS Encryption**: All data transmissions must utilise TLS version 1.2 or higher, employing [strong cryptography](#enabled-tls-ciphers). Our infrastructure strictly enforces this requirement to maintain the integrity and confidentiality of data in transit. We conduct regular scans and assessments of our TLS endpoints to identify and mitigate vulnerabilities. * **Data Storage Prohibitions**: Storing sensitive cardholder data (CHD), such as the card security code (CSC) or primary account number (PAN), is strictly prohibited. Our API is designed to minimize your exposure to sensitive data, thereby reducing your compliance burden. * **Data Masking**: For consumer protection and compliance, full card numbers must not be displayed on receipts or any customer-facing materials. Our API automatically masks PANs, displaying only the last four digits to facilitate safe receipt generation. * **Network Scans**: If your application is web-based, regular scans of your hosting environment are mandatory to identify and rectify potential vulnerabilities. This proactive measure is crucial for maintaining a secure and compliant online presence. * **PCI Compliance**: Adherence to PCI DSS standards is not optional; it's a requirement for operating securely and legally in the payments ecosystem. For detailed information on compliance requirements and resources, please visit the PCI Security Standards Council website [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/). * **Request Validation**: Our API includes mechanisms to verify the legitimacy of each request, ensuring it pertains to a valid account and originates from a trusted source. We leverage remote IP address verification alongside sophisticated application firewall technologies to thwart a wide array of common security threats.  ## Getting Started Before integrating with the CityPay API, ensure your application and development practices align with the outlined compliance and security measures. This preparatory step is crucial for a smooth integration process and the long-term success of your payment processing operations.  For further details on API endpoints, request/response formats, and code examples, proceed to the subsequent sections of our documentation. Our aim is to provide you with all the necessary tools and information to integrate our payment processing capabilities seamlessly into your application.  Thank you for choosing CityPay API. We look forward to supporting your payment processing needs with our secure, compliant, and versatile API solution. 
 *
 * Contact: support@citypay.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.citypay.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.citypay.client.JSON;

/**
 * AuthResponse
 */
public class AuthResponse {
  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  @javax.annotation.Nullable
  private Integer amount;

  public static final String SERIALIZED_NAME_ATRN = "atrn";
  @SerializedName(SERIALIZED_NAME_ATRN)
  @javax.annotation.Nullable
  private String atrn;

  public static final String SERIALIZED_NAME_ATSD = "atsd";
  @SerializedName(SERIALIZED_NAME_ATSD)
  @javax.annotation.Nullable
  private String atsd;

  public static final String SERIALIZED_NAME_AUTHCODE = "authcode";
  @SerializedName(SERIALIZED_NAME_AUTHCODE)
  @javax.annotation.Nullable
  private String authcode;

  public static final String SERIALIZED_NAME_AUTHEN_RESULT = "authen_result";
  @SerializedName(SERIALIZED_NAME_AUTHEN_RESULT)
  @javax.annotation.Nullable
  private String authenResult;

  public static final String SERIALIZED_NAME_AUTHORISED = "authorised";
  @SerializedName(SERIALIZED_NAME_AUTHORISED)
  @javax.annotation.Nullable
  private Boolean authorised;

  public static final String SERIALIZED_NAME_AVS_RESULT = "avs_result";
  @SerializedName(SERIALIZED_NAME_AVS_RESULT)
  @javax.annotation.Nullable
  private String avsResult;

  public static final String SERIALIZED_NAME_BIN_COMMERCIAL = "bin_commercial";
  @SerializedName(SERIALIZED_NAME_BIN_COMMERCIAL)
  @javax.annotation.Nullable
  private Boolean binCommercial;

  public static final String SERIALIZED_NAME_BIN_DEBIT = "bin_debit";
  @SerializedName(SERIALIZED_NAME_BIN_DEBIT)
  @javax.annotation.Nullable
  private Boolean binDebit;

  public static final String SERIALIZED_NAME_BIN_DESCRIPTION = "bin_description";
  @SerializedName(SERIALIZED_NAME_BIN_DESCRIPTION)
  @javax.annotation.Nullable
  private String binDescription;

  public static final String SERIALIZED_NAME_CAVV = "cavv";
  @SerializedName(SERIALIZED_NAME_CAVV)
  @javax.annotation.Nullable
  private String cavv;

  public static final String SERIALIZED_NAME_CONTEXT = "context";
  @SerializedName(SERIALIZED_NAME_CONTEXT)
  @javax.annotation.Nullable
  private String context;

  public static final String SERIALIZED_NAME_CSC_RESULT = "csc_result";
  @SerializedName(SERIALIZED_NAME_CSC_RESULT)
  @javax.annotation.Nullable
  private String cscResult;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  @javax.annotation.Nullable
  private String currency;

  public static final String SERIALIZED_NAME_DATETIME = "datetime";
  @SerializedName(SERIALIZED_NAME_DATETIME)
  @javax.annotation.Nullable
  private OffsetDateTime datetime;

  public static final String SERIALIZED_NAME_ECI = "eci";
  @SerializedName(SERIALIZED_NAME_ECI)
  @javax.annotation.Nullable
  private String eci;

  public static final String SERIALIZED_NAME_EXTERNAL_REF = "external-ref";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_REF)
  @javax.annotation.Nullable
  private String externalRef;

  public static final String SERIALIZED_NAME_EXTERNAL_REF_SOURCE = "external-ref-source";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_REF_SOURCE)
  @javax.annotation.Nullable
  private String externalRefSource;

  public static final String SERIALIZED_NAME_IDENTIFIER = "identifier";
  @SerializedName(SERIALIZED_NAME_IDENTIFIER)
  @javax.annotation.Nullable
  private String identifier;

  public static final String SERIALIZED_NAME_LIVE = "live";
  @SerializedName(SERIALIZED_NAME_LIVE)
  @javax.annotation.Nullable
  private Boolean live;

  public static final String SERIALIZED_NAME_MASKEDPAN = "maskedpan";
  @SerializedName(SERIALIZED_NAME_MASKEDPAN)
  @javax.annotation.Nullable
  private String maskedpan;

  public static final String SERIALIZED_NAME_MERCHANTID = "merchantid";
  @SerializedName(SERIALIZED_NAME_MERCHANTID)
  @javax.annotation.Nonnull
  private Integer merchantid;

  public static final String SERIALIZED_NAME_PAYMENT_INTENT_ID = "payment_intent_id";
  @SerializedName(SERIALIZED_NAME_PAYMENT_INTENT_ID)
  @javax.annotation.Nullable
  private String paymentIntentId;

  public static final String SERIALIZED_NAME_RESULT = "result";
  @SerializedName(SERIALIZED_NAME_RESULT)
  @javax.annotation.Nonnull
  private Integer result;

  public static final String SERIALIZED_NAME_RESULT_CODE = "result_code";
  @SerializedName(SERIALIZED_NAME_RESULT_CODE)
  @javax.annotation.Nonnull
  private String resultCode;

  public static final String SERIALIZED_NAME_RESULT_MESSAGE = "result_message";
  @SerializedName(SERIALIZED_NAME_RESULT_MESSAGE)
  @javax.annotation.Nonnull
  private String resultMessage;

  public static final String SERIALIZED_NAME_SCHEME = "scheme";
  @SerializedName(SERIALIZED_NAME_SCHEME)
  @javax.annotation.Nullable
  private String scheme;

  public static final String SERIALIZED_NAME_SCHEME_ID = "scheme_id";
  @SerializedName(SERIALIZED_NAME_SCHEME_ID)
  @javax.annotation.Nullable
  private String schemeId;

  public static final String SERIALIZED_NAME_SCHEME_LOGO = "scheme_logo";
  @SerializedName(SERIALIZED_NAME_SCHEME_LOGO)
  @javax.annotation.Nullable
  private String schemeLogo;

  public static final String SERIALIZED_NAME_SHA256 = "sha256";
  @SerializedName(SERIALIZED_NAME_SHA256)
  @javax.annotation.Nullable
  private String sha256;

  public static final String SERIALIZED_NAME_TRANS_STATUS = "trans_status";
  @SerializedName(SERIALIZED_NAME_TRANS_STATUS)
  @javax.annotation.Nullable
  private String transStatus;

  public static final String SERIALIZED_NAME_TRANSNO = "transno";
  @SerializedName(SERIALIZED_NAME_TRANSNO)
  @javax.annotation.Nullable
  private Integer transno;

  public AuthResponse() {
  }

  public AuthResponse amount(@javax.annotation.Nullable Integer amount) {
    this.amount = amount;
    return this;
  }

  /**
   * The amount of the transaction processed.
   * @return amount
   */
  @javax.annotation.Nullable
  public Integer getAmount() {
    return amount;
  }

  public void setAmount(@javax.annotation.Nullable Integer amount) {
    this.amount = amount;
  }


  public AuthResponse atrn(@javax.annotation.Nullable String atrn) {
    this.atrn = atrn;
    return this;
  }

  /**
   * A reference number provided by the acquirer for a transaction it can be used to cross reference transactions with an Acquirers reporting panel. 
   * @return atrn
   */
  @javax.annotation.Nullable
  public String getAtrn() {
    return atrn;
  }

  public void setAtrn(@javax.annotation.Nullable String atrn) {
    this.atrn = atrn;
  }


  public AuthResponse atsd(@javax.annotation.Nullable String atsd) {
    this.atsd = atsd;
    return this;
  }

  /**
   * Additional Transaction Security Data used for ecommerce transactions to decipher security capabilities and attempts against a transaction.
   * @return atsd
   */
  @javax.annotation.Nullable
  public String getAtsd() {
    return atsd;
  }

  public void setAtsd(@javax.annotation.Nullable String atsd) {
    this.atsd = atsd;
  }


  public AuthResponse authcode(@javax.annotation.Nullable String authcode) {
    this.authcode = authcode;
    return this;
  }

  /**
   * The authorisation code as returned by the card issuer or acquiring bank when a transaction has successfully   been authorised. Authorisation codes contain alphanumeric values. Whilst the code confirms authorisation it   should not be used to determine whether a transaction was successfully processed. For instance an auth code   may be returned when a transaction has been subsequently declined due to a CSC mismatch. 
   * @return authcode
   */
  @javax.annotation.Nullable
  public String getAuthcode() {
    return authcode;
  }

  public void setAuthcode(@javax.annotation.Nullable String authcode) {
    this.authcode = authcode;
  }


  public AuthResponse authenResult(@javax.annotation.Nullable String authenResult) {
    this.authenResult = authenResult;
    return this;
  }

  /**
   * The result of any authentication using 3d_secure authorisation against ecommerce transactions. Values are:  &lt;table&gt; &lt;tr&gt; &lt;th&gt;Value&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Y&lt;/td&gt; &lt;td&gt;Authentication Successful. The Cardholder&#39;s password was successfully validated.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;N&lt;/td&gt; &lt;td&gt;Authentication Failed. Customer failed or cancelled authentication, transaction denied.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;A&lt;/td&gt; &lt;td&gt;Attempts Processing Performed Authentication could not be completed but a proof of authentication attempt (CAVV) was generated.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;U&lt;/td&gt; &lt;td&gt;Authentication Could Not Be Performed Authentication could not be completed, due to technical or other problem.&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; 
   * @return authenResult
   */
  @javax.annotation.Nullable
  public String getAuthenResult() {
    return authenResult;
  }

  public void setAuthenResult(@javax.annotation.Nullable String authenResult) {
    this.authenResult = authenResult;
  }


  public AuthResponse authorised(@javax.annotation.Nullable Boolean authorised) {
    this.authorised = authorised;
    return this;
  }

  /**
   * A boolean definition that indicates that the transaction was authorised. It will return false if the transaction  was declined, rejected or cancelled due to CSC matching failures.  Attention should be referenced to the AuthResult and Response code for accurate determination of the result. 
   * @return authorised
   */
  @javax.annotation.Nullable
  public Boolean isAuthorised() {
    return authorised;
  }

  public void setAuthorised(@javax.annotation.Nullable Boolean authorised) {
    this.authorised = authorised;
  }


  public AuthResponse avsResult(@javax.annotation.Nullable String avsResult) {
    this.avsResult = avsResult;
    return this;
  }

  /**
   * The AVS result codes determine the result of checking the AVS values within the Address Verification fraud system. If a transaction is declined due to the AVS code not matching, this value can help determine the reason for the decline.  &lt;table&gt; &lt;tr&gt; &lt;th&gt;Code&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt;&lt;td&gt;Y&lt;/td&gt;&lt;td&gt;Address and 5 digit post code match&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;M&lt;/td&gt;&lt;td&gt;Street address and Postal codes match for international transaction&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;U&lt;/td&gt;&lt;td&gt;No AVS data available from issuer auth system&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;A&lt;/td&gt;&lt;td&gt;Addres matches, post code does not&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;I&lt;/td&gt;&lt;td&gt;Address information verified for international transaction&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;Z&lt;/td&gt;&lt;td&gt;5 digit post code matches, Address does not&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;W&lt;/td&gt;&lt;td&gt;9 digit post code matches, Address does not&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;X&lt;/td&gt;&lt;td&gt;Postcode and address match&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;B&lt;/td&gt;&lt;td&gt;Postal code not verified due to incompatible formats&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;P&lt;/td&gt;&lt;td&gt;Postal codes match. Street address not verified due to to incompatible formats&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;E&lt;/td&gt;&lt;td&gt;AVS Error&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;C&lt;/td&gt;&lt;td&gt;Street address and Postal code not verified due to incompatible formats&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;D&lt;/td&gt;&lt;td&gt;Street address and postal codes match&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt; &lt;/td&gt;&lt;td&gt;No information&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;N&lt;/td&gt;&lt;td&gt;Neither postcode nor address match&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;R&lt;/td&gt;&lt;td&gt;Retry, System unavailble or Timed Out&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;S&lt;/td&gt;&lt;td&gt;AVS Service not supported by issuer or processor&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;G&lt;/td&gt;&lt;td&gt;Issuer does not participate in AVS&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; 
   * @return avsResult
   */
  @javax.annotation.Nullable
  public String getAvsResult() {
    return avsResult;
  }

  public void setAvsResult(@javax.annotation.Nullable String avsResult) {
    this.avsResult = avsResult;
  }


  public AuthResponse binCommercial(@javax.annotation.Nullable Boolean binCommercial) {
    this.binCommercial = binCommercial;
    return this;
  }

  /**
   * Determines whether the bin range was found to be a commercial or business card.
   * @return binCommercial
   */
  @javax.annotation.Nullable
  public Boolean isBinCommercial() {
    return binCommercial;
  }

  public void setBinCommercial(@javax.annotation.Nullable Boolean binCommercial) {
    this.binCommercial = binCommercial;
  }


  public AuthResponse binDebit(@javax.annotation.Nullable Boolean binDebit) {
    this.binDebit = binDebit;
    return this;
  }

  /**
   * Determines whether the bin range was found to be a debit card. If false the card was considered as a credit card.
   * @return binDebit
   */
  @javax.annotation.Nullable
  public Boolean isBinDebit() {
    return binDebit;
  }

  public void setBinDebit(@javax.annotation.Nullable Boolean binDebit) {
    this.binDebit = binDebit;
  }


  public AuthResponse binDescription(@javax.annotation.Nullable String binDescription) {
    this.binDescription = binDescription;
    return this;
  }

  /**
   * A description of the bin range found for the card.
   * @return binDescription
   */
  @javax.annotation.Nullable
  public String getBinDescription() {
    return binDescription;
  }

  public void setBinDescription(@javax.annotation.Nullable String binDescription) {
    this.binDescription = binDescription;
  }


  public AuthResponse cavv(@javax.annotation.Nullable String cavv) {
    this.cavv = cavv;
    return this;
  }

  /**
   * The cardholder authentication verification value which can be returned for verification purposes of the authenticated  transaction for dispute realisation. The value is considered sensitive in the realm of PCI-3DS and is masked. 
   * @return cavv
   */
  @javax.annotation.Nullable
  public String getCavv() {
    return cavv;
  }

  public void setCavv(@javax.annotation.Nullable String cavv) {
    this.cavv = cavv;
  }


  public AuthResponse context(@javax.annotation.Nullable String context) {
    this.context = context;
    return this;
  }

  /**
   * The context which processed the transaction, can be used for support purposes to trace transactions.
   * @return context
   */
  @javax.annotation.Nullable
  public String getContext() {
    return context;
  }

  public void setContext(@javax.annotation.Nullable String context) {
    this.context = context;
  }


  public AuthResponse cscResult(@javax.annotation.Nullable String cscResult) {
    this.cscResult = cscResult;
    return this;
  }

  /**
   * The CSC result codes determine the result of checking the provided CSC value within the Card Security Code fraud system. If a transaction is declined due to the CSC code not matching, this value can help determine the reason for the decline.  &lt;table&gt; &lt;tr&gt; &lt;th&gt;Code&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt;&lt;td&gt; &lt;/td&gt;&lt;td&gt;No information&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;M&lt;/td&gt;&lt;td&gt;Card verification data matches&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;N&lt;/td&gt;&lt;td&gt;Card verification data was checked but did not match&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;P&lt;/td&gt;&lt;td&gt;Card verification was not processed&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;S&lt;/td&gt;&lt;td&gt;The card verification data should be on the card but the merchant indicates that it is not&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;U&lt;/td&gt;&lt;td&gt;The card issuer is not certified&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; 
   * @return cscResult
   */
  @javax.annotation.Nullable
  public String getCscResult() {
    return cscResult;
  }

  public void setCscResult(@javax.annotation.Nullable String cscResult) {
    this.cscResult = cscResult;
  }


  public AuthResponse currency(@javax.annotation.Nullable String currency) {
    this.currency = currency;
    return this;
  }

  /**
   * The currency the transaction was processed in. This is an &#x60;ISO4217&#x60; alpha currency value.
   * @return currency
   */
  @javax.annotation.Nullable
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(@javax.annotation.Nullable String currency) {
    this.currency = currency;
  }


  public AuthResponse datetime(@javax.annotation.Nullable OffsetDateTime datetime) {
    this.datetime = datetime;
    return this;
  }

  /**
   * The UTC date time of the transaction in ISO data time format. 
   * @return datetime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDatetime() {
    return datetime;
  }

  public void setDatetime(@javax.annotation.Nullable OffsetDateTime datetime) {
    this.datetime = datetime;
  }


  public AuthResponse eci(@javax.annotation.Nullable String eci) {
    this.eci = eci;
    return this;
  }

  /**
   * An Electronic Commerce Indicator (ECI) used to identify the result of authentication using 3DSecure. 
   * @return eci
   */
  @javax.annotation.Nullable
  public String getEci() {
    return eci;
  }

  public void setEci(@javax.annotation.Nullable String eci) {
    this.eci = eci;
  }


  public AuthResponse externalRef(@javax.annotation.Nullable String externalRef) {
    this.externalRef = externalRef;
    return this;
  }

  /**
   * An external ref if supplied.
   * @return externalRef
   */
  @javax.annotation.Nullable
  public String getExternalRef() {
    return externalRef;
  }

  public void setExternalRef(@javax.annotation.Nullable String externalRef) {
    this.externalRef = externalRef;
  }


  public AuthResponse externalRefSource(@javax.annotation.Nullable String externalRefSource) {
    this.externalRefSource = externalRefSource;
    return this;
  }

  /**
   * An external ref source if supplied.
   * @return externalRefSource
   */
  @javax.annotation.Nullable
  public String getExternalRefSource() {
    return externalRefSource;
  }

  public void setExternalRefSource(@javax.annotation.Nullable String externalRefSource) {
    this.externalRefSource = externalRefSource;
  }


  public AuthResponse identifier(@javax.annotation.Nullable String identifier) {
    this.identifier = identifier;
    return this;
  }

  /**
   * The identifier provided within the request.
   * @return identifier
   */
  @javax.annotation.Nullable
  public String getIdentifier() {
    return identifier;
  }

  public void setIdentifier(@javax.annotation.Nullable String identifier) {
    this.identifier = identifier;
  }


  public AuthResponse live(@javax.annotation.Nullable Boolean live) {
    this.live = live;
    return this;
  }

  /**
   * Used to identify that a transaction was processed on a live authorisation platform.
   * @return live
   */
  @javax.annotation.Nullable
  public Boolean isLive() {
    return live;
  }

  public void setLive(@javax.annotation.Nullable Boolean live) {
    this.live = live;
  }


  public AuthResponse maskedpan(@javax.annotation.Nullable String maskedpan) {
    this.maskedpan = maskedpan;
    return this;
  }

  /**
   * A masked value of the card number used for processing displaying limited values that can be used on a receipt. 
   * @return maskedpan
   */
  @javax.annotation.Nullable
  public String getMaskedpan() {
    return maskedpan;
  }

  public void setMaskedpan(@javax.annotation.Nullable String maskedpan) {
    this.maskedpan = maskedpan;
  }


  public AuthResponse merchantid(@javax.annotation.Nonnull Integer merchantid) {
    this.merchantid = merchantid;
    return this;
  }

  /**
   * The merchant id that processed this transaction.
   * @return merchantid
   */
  @javax.annotation.Nonnull
  public Integer getMerchantid() {
    return merchantid;
  }

  public void setMerchantid(@javax.annotation.Nonnull Integer merchantid) {
    this.merchantid = merchantid;
  }


  public AuthResponse paymentIntentId(@javax.annotation.Nullable String paymentIntentId) {
    this.paymentIntentId = paymentIntentId;
    return this;
  }

  /**
   * A payment intent id for the authorisation if it exists.
   * @return paymentIntentId
   */
  @javax.annotation.Nullable
  public String getPaymentIntentId() {
    return paymentIntentId;
  }

  public void setPaymentIntentId(@javax.annotation.Nullable String paymentIntentId) {
    this.paymentIntentId = paymentIntentId;
  }


  public AuthResponse result(@javax.annotation.Nonnull Integer result) {
    this.result = result;
    return this;
  }

  /**
   * An integer result that indicates the outcome of the transaction. The Code value below maps to the result value  &lt;table&gt; &lt;tr&gt; &lt;th&gt;Code&lt;/th&gt; &lt;th&gt;Abbrev&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Declined&lt;/td&gt;&lt;td&gt;Declined&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Accepted&lt;/td&gt;&lt;td&gt;Accepted&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Rejected&lt;/td&gt;&lt;td&gt;Rejected&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;Not Attempted&lt;/td&gt;&lt;td&gt;Not Attempted&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;Referred&lt;/td&gt;&lt;td&gt;Referred&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;PinRetry&lt;/td&gt;&lt;td&gt;Perform PIN Retry&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;6&lt;/td&gt;&lt;td&gt;ForSigVer&lt;/td&gt;&lt;td&gt;Force Signature Verification&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;7&lt;/td&gt;&lt;td&gt;Hold&lt;/td&gt;&lt;td&gt;Hold&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;8&lt;/td&gt;&lt;td&gt;SecErr&lt;/td&gt;&lt;td&gt;Security Error&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;9&lt;/td&gt;&lt;td&gt;CallAcq&lt;/td&gt;&lt;td&gt;Call Acquirer&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;10&lt;/td&gt;&lt;td&gt;DNH&lt;/td&gt;&lt;td&gt;Do Not Honour&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;11&lt;/td&gt;&lt;td&gt;RtnCrd&lt;/td&gt;&lt;td&gt;Retain Card&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;12&lt;/td&gt;&lt;td&gt;ExprdCrd&lt;/td&gt;&lt;td&gt;Expired Card&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;13&lt;/td&gt;&lt;td&gt;InvldCrd&lt;/td&gt;&lt;td&gt;Invalid Card No&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;14&lt;/td&gt;&lt;td&gt;PinExcd&lt;/td&gt;&lt;td&gt;Pin Tries Exceeded&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;15&lt;/td&gt;&lt;td&gt;PinInvld&lt;/td&gt;&lt;td&gt;Pin Invalid&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;16&lt;/td&gt;&lt;td&gt;AuthReq&lt;/td&gt;&lt;td&gt;Authentication Required&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;17&lt;/td&gt;&lt;td&gt;AuthenFail&lt;/td&gt;&lt;td&gt;Authentication Failed&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;18&lt;/td&gt;&lt;td&gt;Verified&lt;/td&gt;&lt;td&gt;Card Verified&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;19&lt;/td&gt;&lt;td&gt;Cancelled&lt;/td&gt;&lt;td&gt;Cancelled&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;20&lt;/td&gt;&lt;td&gt;Un&lt;/td&gt;&lt;td&gt;Unknown&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;21&lt;/td&gt;&lt;td&gt;Challenged&lt;/td&gt;&lt;td&gt;Challenged&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;22&lt;/td&gt;&lt;td&gt;Decoupled&lt;/td&gt;&lt;td&gt;Decoupled&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;23&lt;/td&gt;&lt;td&gt;Denied&lt;/td&gt;&lt;td&gt;Permission Denied&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; 
   * @return result
   */
  @javax.annotation.Nonnull
  public Integer getResult() {
    return result;
  }

  public void setResult(@javax.annotation.Nonnull Integer result) {
    this.result = result;
  }


  public AuthResponse resultCode(@javax.annotation.Nonnull String resultCode) {
    this.resultCode = resultCode;
    return this;
  }

  /**
   * The result code as defined in the Response Codes Reference for example 000 is an accepted live transaction whilst 001 is an accepted test transaction. Result codes identify the source of success and failure.  Codes may start with an alpha character i.e. C001 indicating a type of error such as a card validation error. 
   * @return resultCode
   */
  @javax.annotation.Nonnull
  public String getResultCode() {
    return resultCode;
  }

  public void setResultCode(@javax.annotation.Nonnull String resultCode) {
    this.resultCode = resultCode;
  }


  public AuthResponse resultMessage(@javax.annotation.Nonnull String resultMessage) {
    this.resultMessage = resultMessage;
    return this;
  }

  /**
   * The message regarding the result which provides further narrative to the result code. 
   * @return resultMessage
   */
  @javax.annotation.Nonnull
  public String getResultMessage() {
    return resultMessage;
  }

  public void setResultMessage(@javax.annotation.Nonnull String resultMessage) {
    this.resultMessage = resultMessage;
  }


  public AuthResponse scheme(@javax.annotation.Nullable String scheme) {
    this.scheme = scheme;
    return this;
  }

  /**
   * The name of the card scheme of the transaction that processed the transaction such as Visa or MasterCard. 
   * @return scheme
   */
  @javax.annotation.Nullable
  public String getScheme() {
    return scheme;
  }

  public void setScheme(@javax.annotation.Nullable String scheme) {
    this.scheme = scheme;
  }


  public AuthResponse schemeId(@javax.annotation.Nullable String schemeId) {
    this.schemeId = schemeId;
    return this;
  }

  /**
   * The name of the card scheme of the transaction such as VI or MC. 
   * @return schemeId
   */
  @javax.annotation.Nullable
  public String getSchemeId() {
    return schemeId;
  }

  public void setSchemeId(@javax.annotation.Nullable String schemeId) {
    this.schemeId = schemeId;
  }


  public AuthResponse schemeLogo(@javax.annotation.Nullable String schemeLogo) {
    this.schemeLogo = schemeLogo;
    return this;
  }

  /**
   * A url containing a logo of the card scheme. 
   * @return schemeLogo
   */
  @javax.annotation.Nullable
  public String getSchemeLogo() {
    return schemeLogo;
  }

  public void setSchemeLogo(@javax.annotation.Nullable String schemeLogo) {
    this.schemeLogo = schemeLogo;
  }


  public AuthResponse sha256(@javax.annotation.Nullable String sha256) {
    this.sha256 = sha256;
    return this;
  }

  /**
   * A SHA256 digest value of the transaction used to validate the response data The digest is calculated by concatenating   * authcode   * amount   * response_code   * merchant_id   * trans_no   * identifier   * licence_key - which is not provided in the response. 
   * @return sha256
   */
  @javax.annotation.Nullable
  public String getSha256() {
    return sha256;
  }

  public void setSha256(@javax.annotation.Nullable String sha256) {
    this.sha256 = sha256;
  }


  public AuthResponse transStatus(@javax.annotation.Nullable String transStatus) {
    this.transStatus = transStatus;
    return this;
  }

  /**
   * Used to identify the status of a transaction. The status is used to track a transaction through its life cycle.  &lt;table&gt; &lt;tr&gt; &lt;th&gt;Id&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;O&lt;/td&gt; &lt;td&gt;Transaction is open for settlement&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;A&lt;/td&gt; &lt;td&gt;Transaction is assigned for settlement and can no longer be voided&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;S&lt;/td&gt; &lt;td&gt;Transaction has been settled&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;D&lt;/td&gt; &lt;td&gt;Transaction has been declined&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;R&lt;/td&gt; &lt;td&gt;Transaction has been rejected&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;P&lt;/td&gt; &lt;td&gt;Transaction has been authorised only and awaiting a capture. Used in pre-auth situations&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;C&lt;/td&gt; &lt;td&gt;Transaction has been cancelled&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;E&lt;/td&gt; &lt;td&gt;Transaction has expired&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;I&lt;/td&gt; &lt;td&gt;Transaction has been initialised but no action was able to be carried out&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;H&lt;/td&gt; &lt;td&gt;Transaction is awaiting authorisation&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;.&lt;/td&gt; &lt;td&gt;Transaction is on hold&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;V&lt;/td&gt; &lt;td&gt;Transaction has been verified&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; 
   * @return transStatus
   */
  @javax.annotation.Nullable
  public String getTransStatus() {
    return transStatus;
  }

  public void setTransStatus(@javax.annotation.Nullable String transStatus) {
    this.transStatus = transStatus;
  }


  public AuthResponse transno(@javax.annotation.Nullable Integer transno) {
    this.transno = transno;
    return this;
  }

  /**
   * The resulting transaction number, ordered incrementally from 1 for every merchant_id. The value will default to less than 1 for transactions that do not have a transaction number issued. 
   * @return transno
   */
  @javax.annotation.Nullable
  public Integer getTransno() {
    return transno;
  }

  public void setTransno(@javax.annotation.Nullable Integer transno) {
    this.transno = transno;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the AuthResponse instance itself
   */
  public AuthResponse putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AuthResponse authResponse = (AuthResponse) o;
    return Objects.equals(this.amount, authResponse.amount) &&
        Objects.equals(this.atrn, authResponse.atrn) &&
        Objects.equals(this.atsd, authResponse.atsd) &&
        Objects.equals(this.authcode, authResponse.authcode) &&
        Objects.equals(this.authenResult, authResponse.authenResult) &&
        Objects.equals(this.authorised, authResponse.authorised) &&
        Objects.equals(this.avsResult, authResponse.avsResult) &&
        Objects.equals(this.binCommercial, authResponse.binCommercial) &&
        Objects.equals(this.binDebit, authResponse.binDebit) &&
        Objects.equals(this.binDescription, authResponse.binDescription) &&
        Objects.equals(this.cavv, authResponse.cavv) &&
        Objects.equals(this.context, authResponse.context) &&
        Objects.equals(this.cscResult, authResponse.cscResult) &&
        Objects.equals(this.currency, authResponse.currency) &&
        Objects.equals(this.datetime, authResponse.datetime) &&
        Objects.equals(this.eci, authResponse.eci) &&
        Objects.equals(this.externalRef, authResponse.externalRef) &&
        Objects.equals(this.externalRefSource, authResponse.externalRefSource) &&
        Objects.equals(this.identifier, authResponse.identifier) &&
        Objects.equals(this.live, authResponse.live) &&
        Objects.equals(this.maskedpan, authResponse.maskedpan) &&
        Objects.equals(this.merchantid, authResponse.merchantid) &&
        Objects.equals(this.paymentIntentId, authResponse.paymentIntentId) &&
        Objects.equals(this.result, authResponse.result) &&
        Objects.equals(this.resultCode, authResponse.resultCode) &&
        Objects.equals(this.resultMessage, authResponse.resultMessage) &&
        Objects.equals(this.scheme, authResponse.scheme) &&
        Objects.equals(this.schemeId, authResponse.schemeId) &&
        Objects.equals(this.schemeLogo, authResponse.schemeLogo) &&
        Objects.equals(this.sha256, authResponse.sha256) &&
        Objects.equals(this.transStatus, authResponse.transStatus) &&
        Objects.equals(this.transno, authResponse.transno)&&
        Objects.equals(this.additionalProperties, authResponse.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, atrn, atsd, authcode, authenResult, authorised, avsResult, binCommercial, binDebit, binDescription, cavv, context, cscResult, currency, datetime, eci, externalRef, externalRefSource, identifier, live, maskedpan, merchantid, paymentIntentId, result, resultCode, resultMessage, scheme, schemeId, schemeLogo, sha256, transStatus, transno, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AuthResponse {\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    atrn: ").append(toIndentedString(atrn)).append("\n");
    sb.append("    atsd: ").append(toIndentedString(atsd)).append("\n");
    sb.append("    authcode: ").append(toIndentedString(authcode)).append("\n");
    sb.append("    authenResult: ").append(toIndentedString(authenResult)).append("\n");
    sb.append("    authorised: ").append(toIndentedString(authorised)).append("\n");
    sb.append("    avsResult: ").append(toIndentedString(avsResult)).append("\n");
    sb.append("    binCommercial: ").append(toIndentedString(binCommercial)).append("\n");
    sb.append("    binDebit: ").append(toIndentedString(binDebit)).append("\n");
    sb.append("    binDescription: ").append(toIndentedString(binDescription)).append("\n");
    sb.append("    cavv: ").append(toIndentedString(cavv)).append("\n");
    sb.append("    context: ").append(toIndentedString(context)).append("\n");
    sb.append("    cscResult: ").append(toIndentedString(cscResult)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    datetime: ").append(toIndentedString(datetime)).append("\n");
    sb.append("    eci: ").append(toIndentedString(eci)).append("\n");
    sb.append("    externalRef: ").append(toIndentedString(externalRef)).append("\n");
    sb.append("    externalRefSource: ").append(toIndentedString(externalRefSource)).append("\n");
    sb.append("    identifier: ").append(toIndentedString(identifier)).append("\n");
    sb.append("    live: ").append(toIndentedString(live)).append("\n");
    sb.append("    maskedpan: ").append(toIndentedString(maskedpan)).append("\n");
    sb.append("    merchantid: ").append(toIndentedString(merchantid)).append("\n");
    sb.append("    paymentIntentId: ").append(toIndentedString(paymentIntentId)).append("\n");
    sb.append("    result: ").append(toIndentedString(result)).append("\n");
    sb.append("    resultCode: ").append(toIndentedString(resultCode)).append("\n");
    sb.append("    resultMessage: ").append(toIndentedString(resultMessage)).append("\n");
    sb.append("    scheme: ").append(toIndentedString(scheme)).append("\n");
    sb.append("    schemeId: ").append(toIndentedString(schemeId)).append("\n");
    sb.append("    schemeLogo: ").append(toIndentedString(schemeLogo)).append("\n");
    sb.append("    sha256: ").append(toIndentedString(sha256)).append("\n");
    sb.append("    transStatus: ").append(toIndentedString(transStatus)).append("\n");
    sb.append("    transno: ").append(toIndentedString(transno)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amount");
    openapiFields.add("atrn");
    openapiFields.add("atsd");
    openapiFields.add("authcode");
    openapiFields.add("authen_result");
    openapiFields.add("authorised");
    openapiFields.add("avs_result");
    openapiFields.add("bin_commercial");
    openapiFields.add("bin_debit");
    openapiFields.add("bin_description");
    openapiFields.add("cavv");
    openapiFields.add("context");
    openapiFields.add("csc_result");
    openapiFields.add("currency");
    openapiFields.add("datetime");
    openapiFields.add("eci");
    openapiFields.add("external-ref");
    openapiFields.add("external-ref-source");
    openapiFields.add("identifier");
    openapiFields.add("live");
    openapiFields.add("maskedpan");
    openapiFields.add("merchantid");
    openapiFields.add("payment_intent_id");
    openapiFields.add("result");
    openapiFields.add("result_code");
    openapiFields.add("result_message");
    openapiFields.add("scheme");
    openapiFields.add("scheme_id");
    openapiFields.add("scheme_logo");
    openapiFields.add("sha256");
    openapiFields.add("trans_status");
    openapiFields.add("transno");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("merchantid");
    openapiRequiredFields.add("result");
    openapiRequiredFields.add("result_code");
    openapiRequiredFields.add("result_message");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AuthResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AuthResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AuthResponse is not found in the empty JSON string", AuthResponse.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AuthResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("atrn") != null && !jsonObj.get("atrn").isJsonNull()) && !jsonObj.get("atrn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `atrn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("atrn").toString()));
      }
      if ((jsonObj.get("atsd") != null && !jsonObj.get("atsd").isJsonNull()) && !jsonObj.get("atsd").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `atsd` to be a primitive type in the JSON string but got `%s`", jsonObj.get("atsd").toString()));
      }
      if ((jsonObj.get("authcode") != null && !jsonObj.get("authcode").isJsonNull()) && !jsonObj.get("authcode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authcode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authcode").toString()));
      }
      if ((jsonObj.get("authen_result") != null && !jsonObj.get("authen_result").isJsonNull()) && !jsonObj.get("authen_result").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authen_result` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authen_result").toString()));
      }
      if ((jsonObj.get("avs_result") != null && !jsonObj.get("avs_result").isJsonNull()) && !jsonObj.get("avs_result").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `avs_result` to be a primitive type in the JSON string but got `%s`", jsonObj.get("avs_result").toString()));
      }
      if ((jsonObj.get("bin_description") != null && !jsonObj.get("bin_description").isJsonNull()) && !jsonObj.get("bin_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bin_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bin_description").toString()));
      }
      if ((jsonObj.get("cavv") != null && !jsonObj.get("cavv").isJsonNull()) && !jsonObj.get("cavv").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cavv` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cavv").toString()));
      }
      if ((jsonObj.get("context") != null && !jsonObj.get("context").isJsonNull()) && !jsonObj.get("context").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `context` to be a primitive type in the JSON string but got `%s`", jsonObj.get("context").toString()));
      }
      if ((jsonObj.get("csc_result") != null && !jsonObj.get("csc_result").isJsonNull()) && !jsonObj.get("csc_result").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `csc_result` to be a primitive type in the JSON string but got `%s`", jsonObj.get("csc_result").toString()));
      }
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if ((jsonObj.get("eci") != null && !jsonObj.get("eci").isJsonNull()) && !jsonObj.get("eci").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eci` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eci").toString()));
      }
      if ((jsonObj.get("external-ref") != null && !jsonObj.get("external-ref").isJsonNull()) && !jsonObj.get("external-ref").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `external-ref` to be a primitive type in the JSON string but got `%s`", jsonObj.get("external-ref").toString()));
      }
      if ((jsonObj.get("external-ref-source") != null && !jsonObj.get("external-ref-source").isJsonNull()) && !jsonObj.get("external-ref-source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `external-ref-source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("external-ref-source").toString()));
      }
      if ((jsonObj.get("identifier") != null && !jsonObj.get("identifier").isJsonNull()) && !jsonObj.get("identifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `identifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("identifier").toString()));
      }
      if ((jsonObj.get("maskedpan") != null && !jsonObj.get("maskedpan").isJsonNull()) && !jsonObj.get("maskedpan").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maskedpan` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maskedpan").toString()));
      }
      if ((jsonObj.get("payment_intent_id") != null && !jsonObj.get("payment_intent_id").isJsonNull()) && !jsonObj.get("payment_intent_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payment_intent_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payment_intent_id").toString()));
      }
      if (!jsonObj.get("result_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `result_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("result_code").toString()));
      }
      if (!jsonObj.get("result_message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `result_message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("result_message").toString()));
      }
      if ((jsonObj.get("scheme") != null && !jsonObj.get("scheme").isJsonNull()) && !jsonObj.get("scheme").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scheme` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scheme").toString()));
      }
      if ((jsonObj.get("scheme_id") != null && !jsonObj.get("scheme_id").isJsonNull()) && !jsonObj.get("scheme_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scheme_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scheme_id").toString()));
      }
      if ((jsonObj.get("scheme_logo") != null && !jsonObj.get("scheme_logo").isJsonNull()) && !jsonObj.get("scheme_logo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scheme_logo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scheme_logo").toString()));
      }
      if ((jsonObj.get("sha256") != null && !jsonObj.get("sha256").isJsonNull()) && !jsonObj.get("sha256").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sha256` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sha256").toString()));
      }
      if ((jsonObj.get("trans_status") != null && !jsonObj.get("trans_status").isJsonNull()) && !jsonObj.get("trans_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trans_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trans_status").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AuthResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AuthResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AuthResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AuthResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<AuthResponse>() {
           @Override
           public void write(JsonWriter out, AuthResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public AuthResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             AuthResponse instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AuthResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AuthResponse
   * @throws IOException if the JSON string is invalid with respect to AuthResponse
   */
  public static AuthResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AuthResponse.class);
  }

  /**
   * Convert an instance of AuthResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

