/*
 * CityPay Payment API
 *  This CityPay API is a HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokinsed payments using Card Holder Accounts.  ## Compliance and Security Your application will need to adhere to PCI-DSS standards to operate safely and to meet requirements set out by  Visa and MasterCard and the PCI Security Standards Council. These include  * Data must be collected using TLS version 1.2 using [strong cryptography](#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive card holder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities. 
 *
 * Contact: support@citypay.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.citypay.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.LocalDate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.citypay.client.JSON;

/**
 * EventDataModel
 */
public class EventDataModel {
  public static final String SERIALIZED_NAME_EVENT_END_DATE = "event_end_date";
  @SerializedName(SERIALIZED_NAME_EVENT_END_DATE)
  private LocalDate eventEndDate;

  public static final String SERIALIZED_NAME_EVENT_ID = "event_id";
  @SerializedName(SERIALIZED_NAME_EVENT_ID)
  private String eventId;

  public static final String SERIALIZED_NAME_EVENT_ORGANISER_ID = "event_organiser_id";
  @SerializedName(SERIALIZED_NAME_EVENT_ORGANISER_ID)
  private String eventOrganiserId;

  public static final String SERIALIZED_NAME_EVENT_START_DATE = "event_start_date";
  @SerializedName(SERIALIZED_NAME_EVENT_START_DATE)
  private LocalDate eventStartDate;

  public static final String SERIALIZED_NAME_PAYMENT_TYPE = "payment_type";
  @SerializedName(SERIALIZED_NAME_PAYMENT_TYPE)
  private String paymentType;

  public EventDataModel() {
  }

  public EventDataModel eventEndDate(LocalDate eventEndDate) {
    
    this.eventEndDate = eventEndDate;
    return this;
  }

   /**
   * The date when the event ends in ISO format (yyyy-MM-dd).
   * @return eventEndDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The date when the event ends in ISO format (yyyy-MM-dd).")

  public LocalDate getEventEndDate() {
    return eventEndDate;
  }


  public void setEventEndDate(LocalDate eventEndDate) {
    this.eventEndDate = eventEndDate;
  }


  public EventDataModel eventId(String eventId) {
    
    this.eventId = eventId;
    return this;
  }

   /**
   * An id of the event.
   * @return eventId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An id of the event.")

  public String getEventId() {
    return eventId;
  }


  public void setEventId(String eventId) {
    this.eventId = eventId;
  }


  public EventDataModel eventOrganiserId(String eventOrganiserId) {
    
    this.eventOrganiserId = eventOrganiserId;
    return this;
  }

   /**
   * An id of the event organiser.
   * @return eventOrganiserId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An id of the event organiser.")

  public String getEventOrganiserId() {
    return eventOrganiserId;
  }


  public void setEventOrganiserId(String eventOrganiserId) {
    this.eventOrganiserId = eventOrganiserId;
  }


  public EventDataModel eventStartDate(LocalDate eventStartDate) {
    
    this.eventStartDate = eventStartDate;
    return this;
  }

   /**
   * The date when the event starts in ISO format (yyyy-MM-dd).
   * @return eventStartDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The date when the event starts in ISO format (yyyy-MM-dd).")

  public LocalDate getEventStartDate() {
    return eventStartDate;
  }


  public void setEventStartDate(LocalDate eventStartDate) {
    this.eventStartDate = eventStartDate;
  }


  public EventDataModel paymentType(String paymentType) {
    
    this.paymentType = paymentType;
    return this;
  }

   /**
   * The type of payment such as &#x60;deposit&#x60; or &#x60;balance&#x60;.
   * @return paymentType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The type of payment such as `deposit` or `balance`.")

  public String getPaymentType() {
    return paymentType;
  }


  public void setPaymentType(String paymentType) {
    this.paymentType = paymentType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventDataModel eventDataModel = (EventDataModel) o;
    return Objects.equals(this.eventEndDate, eventDataModel.eventEndDate) &&
        Objects.equals(this.eventId, eventDataModel.eventId) &&
        Objects.equals(this.eventOrganiserId, eventDataModel.eventOrganiserId) &&
        Objects.equals(this.eventStartDate, eventDataModel.eventStartDate) &&
        Objects.equals(this.paymentType, eventDataModel.paymentType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(eventEndDate, eventId, eventOrganiserId, eventStartDate, paymentType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventDataModel {\n");
    sb.append("    eventEndDate: ").append(toIndentedString(eventEndDate)).append("\n");
    sb.append("    eventId: ").append(toIndentedString(eventId)).append("\n");
    sb.append("    eventOrganiserId: ").append(toIndentedString(eventOrganiserId)).append("\n");
    sb.append("    eventStartDate: ").append(toIndentedString(eventStartDate)).append("\n");
    sb.append("    paymentType: ").append(toIndentedString(paymentType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("event_end_date");
    openapiFields.add("event_id");
    openapiFields.add("event_organiser_id");
    openapiFields.add("event_start_date");
    openapiFields.add("payment_type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EventDataModel
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (EventDataModel.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in EventDataModel is not found in the empty JSON string", EventDataModel.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!EventDataModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EventDataModel` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("event_id") != null && !jsonObj.get("event_id").isJsonNull()) && !jsonObj.get("event_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `event_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("event_id").toString()));
      }
      if ((jsonObj.get("event_organiser_id") != null && !jsonObj.get("event_organiser_id").isJsonNull()) && !jsonObj.get("event_organiser_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `event_organiser_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("event_organiser_id").toString()));
      }
      if ((jsonObj.get("payment_type") != null && !jsonObj.get("payment_type").isJsonNull()) && !jsonObj.get("payment_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payment_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payment_type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EventDataModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EventDataModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EventDataModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EventDataModel.class));

       return (TypeAdapter<T>) new TypeAdapter<EventDataModel>() {
           @Override
           public void write(JsonWriter out, EventDataModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EventDataModel read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EventDataModel given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EventDataModel
  * @throws IOException if the JSON string is invalid with respect to EventDataModel
  */
  public static EventDataModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EventDataModel.class);
  }

 /**
  * Convert an instance of EventDataModel to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

