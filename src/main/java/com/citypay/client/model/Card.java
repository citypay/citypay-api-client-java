/*
 * CityPay Payment API
 *  This CityPay API is a HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokinsed payments using Card Holder Accounts.  ## Compliance and Security Your application will need to adhere to PCI-DSS standards to operate safely and to meet requirements set out by  Visa and MasterCard and the PCI Security Standards Council. These include  * Data must be collected using TLS version 1.2 using [strong cryptography](#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive card holder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities. 
 *
 * Contact: support@citypay.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.citypay.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.citypay.client.JSON;

/**
 * Card
 */
public class Card {
  public static final String SERIALIZED_NAME_BIN_COMMERCIAL = "bin_commercial";
  @SerializedName(SERIALIZED_NAME_BIN_COMMERCIAL)
  private Boolean binCommercial;

  public static final String SERIALIZED_NAME_BIN_CORPORATE = "bin_corporate";
  @SerializedName(SERIALIZED_NAME_BIN_CORPORATE)
  private Boolean binCorporate;

  public static final String SERIALIZED_NAME_BIN_COUNTRY_ISSUED = "bin_country_issued";
  @SerializedName(SERIALIZED_NAME_BIN_COUNTRY_ISSUED)
  private String binCountryIssued;

  public static final String SERIALIZED_NAME_BIN_CREDIT = "bin_credit";
  @SerializedName(SERIALIZED_NAME_BIN_CREDIT)
  private Boolean binCredit;

  public static final String SERIALIZED_NAME_BIN_CURRENCY = "bin_currency";
  @SerializedName(SERIALIZED_NAME_BIN_CURRENCY)
  private String binCurrency;

  public static final String SERIALIZED_NAME_BIN_DEBIT = "bin_debit";
  @SerializedName(SERIALIZED_NAME_BIN_DEBIT)
  private Boolean binDebit;

  public static final String SERIALIZED_NAME_BIN_DESCRIPTION = "bin_description";
  @SerializedName(SERIALIZED_NAME_BIN_DESCRIPTION)
  private String binDescription;

  public static final String SERIALIZED_NAME_BIN_EU = "bin_eu";
  @SerializedName(SERIALIZED_NAME_BIN_EU)
  private Boolean binEu;

  public static final String SERIALIZED_NAME_CARD_ID = "card_id";
  @SerializedName(SERIALIZED_NAME_CARD_ID)
  private String cardId;

  public static final String SERIALIZED_NAME_CARD_STATUS = "card_status";
  @SerializedName(SERIALIZED_NAME_CARD_STATUS)
  private String cardStatus;

  public static final String SERIALIZED_NAME_DATE_CREATED = "date_created";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  private OffsetDateTime dateCreated;

  public static final String SERIALIZED_NAME_DEFAULT = "default";
  @SerializedName(SERIALIZED_NAME_DEFAULT)
  private Boolean _default;

  public static final String SERIALIZED_NAME_EXPMONTH = "expmonth";
  @SerializedName(SERIALIZED_NAME_EXPMONTH)
  private Integer expmonth;

  public static final String SERIALIZED_NAME_EXPYEAR = "expyear";
  @SerializedName(SERIALIZED_NAME_EXPYEAR)
  private Integer expyear;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_LABEL2 = "label2";
  @SerializedName(SERIALIZED_NAME_LABEL2)
  private String label2;

  public static final String SERIALIZED_NAME_LAST4DIGITS = "last4digits";
  @SerializedName(SERIALIZED_NAME_LAST4DIGITS)
  private String last4digits;

  public static final String SERIALIZED_NAME_NAME_ON_CARD = "name_on_card";
  @SerializedName(SERIALIZED_NAME_NAME_ON_CARD)
  private String nameOnCard;

  public static final String SERIALIZED_NAME_SCHEME = "scheme";
  @SerializedName(SERIALIZED_NAME_SCHEME)
  private String scheme;

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  private String token;

  public Card() {
  }

  public Card binCommercial(Boolean binCommercial) {
    
    this.binCommercial = binCommercial;
    return this;
  }

   /**
   * Defines whether the card is a commercial card.
   * @return binCommercial
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Defines whether the card is a commercial card.")

  public Boolean isBinCommercial() {
    return binCommercial;
  }


  public void setBinCommercial(Boolean binCommercial) {
    this.binCommercial = binCommercial;
  }


  public Card binCorporate(Boolean binCorporate) {
    
    this.binCorporate = binCorporate;
    return this;
  }

   /**
   * Defines whether the card is a corporate business card.
   * @return binCorporate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Defines whether the card is a corporate business card.")

  public Boolean isBinCorporate() {
    return binCorporate;
  }


  public void setBinCorporate(Boolean binCorporate) {
    this.binCorporate = binCorporate;
  }


  public Card binCountryIssued(String binCountryIssued) {
    
    this.binCountryIssued = binCountryIssued;
    return this;
  }

   /**
   * The determined country where the card was issued.
   * @return binCountryIssued
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The determined country where the card was issued.")

  public String getBinCountryIssued() {
    return binCountryIssued;
  }


  public void setBinCountryIssued(String binCountryIssued) {
    this.binCountryIssued = binCountryIssued;
  }


  public Card binCredit(Boolean binCredit) {
    
    this.binCredit = binCredit;
    return this;
  }

   /**
   * Defines whether the card is a credit card.
   * @return binCredit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Defines whether the card is a credit card.")

  public Boolean isBinCredit() {
    return binCredit;
  }


  public void setBinCredit(Boolean binCredit) {
    this.binCredit = binCredit;
  }


  public Card binCurrency(String binCurrency) {
    
    this.binCurrency = binCurrency;
    return this;
  }

   /**
   * The default currency determined for the card.
   * @return binCurrency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The default currency determined for the card.")

  public String getBinCurrency() {
    return binCurrency;
  }


  public void setBinCurrency(String binCurrency) {
    this.binCurrency = binCurrency;
  }


  public Card binDebit(Boolean binDebit) {
    
    this.binDebit = binDebit;
    return this;
  }

   /**
   * Defines whether the card is a debit card.
   * @return binDebit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Defines whether the card is a debit card.")

  public Boolean isBinDebit() {
    return binDebit;
  }


  public void setBinDebit(Boolean binDebit) {
    this.binDebit = binDebit;
  }


  public Card binDescription(String binDescription) {
    
    this.binDescription = binDescription;
    return this;
  }

   /**
   * A description of the bin on the card to identify what type of product the card is.
   * @return binDescription
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Platinum Card", value = "A description of the bin on the card to identify what type of product the card is.")

  public String getBinDescription() {
    return binDescription;
  }


  public void setBinDescription(String binDescription) {
    this.binDescription = binDescription;
  }


  public Card binEu(Boolean binEu) {
    
    this.binEu = binEu;
    return this;
  }

   /**
   * Defines whether the card is regulated within the EU.
   * @return binEu
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Defines whether the card is regulated within the EU.")

  public Boolean isBinEu() {
    return binEu;
  }


  public void setBinEu(Boolean binEu) {
    this.binEu = binEu;
  }


  public Card cardId(String cardId) {
    
    this.cardId = cardId;
    return this;
  }

   /**
   * The id of the card that is returned. Should be used for referencing the card when perform any changes.
   * @return cardId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The id of the card that is returned. Should be used for referencing the card when perform any changes.")

  public String getCardId() {
    return cardId;
  }


  public void setCardId(String cardId) {
    this.cardId = cardId;
  }


  public Card cardStatus(String cardStatus) {
    
    this.cardStatus = cardStatus;
    return this;
  }

   /**
   * The status of the card such, valid values are   - ACTIVE the card is active for processing   - INACTIVE the card is not active for processing   - EXPIRED for cards that have passed their expiry date. 
   * @return cardStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The status of the card such, valid values are   - ACTIVE the card is active for processing   - INACTIVE the card is not active for processing   - EXPIRED for cards that have passed their expiry date. ")

  public String getCardStatus() {
    return cardStatus;
  }


  public void setCardStatus(String cardStatus) {
    this.cardStatus = cardStatus;
  }


  public Card dateCreated(OffsetDateTime dateCreated) {
    
    this.dateCreated = dateCreated;
    return this;
  }

   /**
   * The date time of when the card was created.
   * @return dateCreated
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2020-01-02T18:32:28Z", value = "The date time of when the card was created.")

  public OffsetDateTime getDateCreated() {
    return dateCreated;
  }


  public void setDateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
  }


  public Card _default(Boolean _default) {
    
    this._default = _default;
    return this;
  }

   /**
   * Determines if the card is the default card for the account and should be regarded as the first option to be used for processing.
   * @return _default
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Determines if the card is the default card for the account and should be regarded as the first option to be used for processing.")

  public Boolean isDefault() {
    return _default;
  }


  public void setDefault(Boolean _default) {
    this._default = _default;
  }


  public Card expmonth(Integer expmonth) {
    
    this.expmonth = expmonth;
    return this;
  }

   /**
   * The expiry month of the card.
   * minimum: 1
   * maximum: 12
   * @return expmonth
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "9", value = "The expiry month of the card.")

  public Integer getExpmonth() {
    return expmonth;
  }


  public void setExpmonth(Integer expmonth) {
    this.expmonth = expmonth;
  }


  public Card expyear(Integer expyear) {
    
    this.expyear = expyear;
    return this;
  }

   /**
   * The expiry year of the card.
   * minimum: 2000
   * maximum: 2100
   * @return expyear
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2025", value = "The expiry year of the card.")

  public Integer getExpyear() {
    return expyear;
  }


  public void setExpyear(Integer expyear) {
    this.expyear = expyear;
  }


  public Card label(String label) {
    
    this.label = label;
    return this;
  }

   /**
   * A label which identifies this card.
   * @return label
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Visa/0002", value = "A label which identifies this card.")

  public String getLabel() {
    return label;
  }


  public void setLabel(String label) {
    this.label = label;
  }


  public Card label2(String label2) {
    
    this.label2 = label2;
    return this;
  }

   /**
   * A label which also provides the expiry date of the card.
   * @return label2
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Visa/0002,Exp:2304", value = "A label which also provides the expiry date of the card.")

  public String getLabel2() {
    return label2;
  }


  public void setLabel2(String label2) {
    this.label2 = label2;
  }


  public Card last4digits(String last4digits) {
    
    this.last4digits = last4digits;
    return this;
  }

   /**
   * The last 4 digits of the card to aid in identification.
   * @return last4digits
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2", value = "The last 4 digits of the card to aid in identification.")

  public String getLast4digits() {
    return last4digits;
  }


  public void setLast4digits(String last4digits) {
    this.last4digits = last4digits;
  }


  public Card nameOnCard(String nameOnCard) {
    
    this.nameOnCard = nameOnCard;
    return this;
  }

   /**
   * The name on the card.
   * @return nameOnCard
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "MR NE BODY", value = "The name on the card.")

  public String getNameOnCard() {
    return nameOnCard;
  }


  public void setNameOnCard(String nameOnCard) {
    this.nameOnCard = nameOnCard;
  }


  public Card scheme(String scheme) {
    
    this.scheme = scheme;
    return this;
  }

   /**
   * The scheme that issued the card.
   * @return scheme
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Visa", value = "The scheme that issued the card.")

  public String getScheme() {
    return scheme;
  }


  public void setScheme(String scheme) {
    this.scheme = scheme;
  }


  public Card token(String token) {
    
    this.token = token;
    return this;
  }

   /**
   * A token that can be used to process against the card.
   * @return token
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "ctPCAPyNyCkx3Ry8wGyv8khC3ch2hUSB3Db..Qzr", value = "A token that can be used to process against the card.")

  public String getToken() {
    return token;
  }


  public void setToken(String token) {
    this.token = token;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Card card = (Card) o;
    return Objects.equals(this.binCommercial, card.binCommercial) &&
        Objects.equals(this.binCorporate, card.binCorporate) &&
        Objects.equals(this.binCountryIssued, card.binCountryIssued) &&
        Objects.equals(this.binCredit, card.binCredit) &&
        Objects.equals(this.binCurrency, card.binCurrency) &&
        Objects.equals(this.binDebit, card.binDebit) &&
        Objects.equals(this.binDescription, card.binDescription) &&
        Objects.equals(this.binEu, card.binEu) &&
        Objects.equals(this.cardId, card.cardId) &&
        Objects.equals(this.cardStatus, card.cardStatus) &&
        Objects.equals(this.dateCreated, card.dateCreated) &&
        Objects.equals(this._default, card._default) &&
        Objects.equals(this.expmonth, card.expmonth) &&
        Objects.equals(this.expyear, card.expyear) &&
        Objects.equals(this.label, card.label) &&
        Objects.equals(this.label2, card.label2) &&
        Objects.equals(this.last4digits, card.last4digits) &&
        Objects.equals(this.nameOnCard, card.nameOnCard) &&
        Objects.equals(this.scheme, card.scheme) &&
        Objects.equals(this.token, card.token);
  }

  @Override
  public int hashCode() {
    return Objects.hash(binCommercial, binCorporate, binCountryIssued, binCredit, binCurrency, binDebit, binDescription, binEu, cardId, cardStatus, dateCreated, _default, expmonth, expyear, label, label2, last4digits, nameOnCard, scheme, token);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Card {\n");
    sb.append("    binCommercial: ").append(toIndentedString(binCommercial)).append("\n");
    sb.append("    binCorporate: ").append(toIndentedString(binCorporate)).append("\n");
    sb.append("    binCountryIssued: ").append(toIndentedString(binCountryIssued)).append("\n");
    sb.append("    binCredit: ").append(toIndentedString(binCredit)).append("\n");
    sb.append("    binCurrency: ").append(toIndentedString(binCurrency)).append("\n");
    sb.append("    binDebit: ").append(toIndentedString(binDebit)).append("\n");
    sb.append("    binDescription: ").append(toIndentedString(binDescription)).append("\n");
    sb.append("    binEu: ").append(toIndentedString(binEu)).append("\n");
    sb.append("    cardId: ").append(toIndentedString(cardId)).append("\n");
    sb.append("    cardStatus: ").append(toIndentedString(cardStatus)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    _default: ").append(toIndentedString(_default)).append("\n");
    sb.append("    expmonth: ").append(toIndentedString(expmonth)).append("\n");
    sb.append("    expyear: ").append(toIndentedString(expyear)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    label2: ").append(toIndentedString(label2)).append("\n");
    sb.append("    last4digits: ").append(toIndentedString(last4digits)).append("\n");
    sb.append("    nameOnCard: ").append(toIndentedString(nameOnCard)).append("\n");
    sb.append("    scheme: ").append(toIndentedString(scheme)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bin_commercial");
    openapiFields.add("bin_corporate");
    openapiFields.add("bin_country_issued");
    openapiFields.add("bin_credit");
    openapiFields.add("bin_currency");
    openapiFields.add("bin_debit");
    openapiFields.add("bin_description");
    openapiFields.add("bin_eu");
    openapiFields.add("card_id");
    openapiFields.add("card_status");
    openapiFields.add("date_created");
    openapiFields.add("default");
    openapiFields.add("expmonth");
    openapiFields.add("expyear");
    openapiFields.add("label");
    openapiFields.add("label2");
    openapiFields.add("last4digits");
    openapiFields.add("name_on_card");
    openapiFields.add("scheme");
    openapiFields.add("token");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Card
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (Card.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in Card is not found in the empty JSON string", Card.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Card.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Card` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("bin_country_issued") != null && !jsonObj.get("bin_country_issued").isJsonNull()) && !jsonObj.get("bin_country_issued").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bin_country_issued` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bin_country_issued").toString()));
      }
      if ((jsonObj.get("bin_currency") != null && !jsonObj.get("bin_currency").isJsonNull()) && !jsonObj.get("bin_currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bin_currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bin_currency").toString()));
      }
      if ((jsonObj.get("bin_description") != null && !jsonObj.get("bin_description").isJsonNull()) && !jsonObj.get("bin_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bin_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bin_description").toString()));
      }
      if ((jsonObj.get("card_id") != null && !jsonObj.get("card_id").isJsonNull()) && !jsonObj.get("card_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `card_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("card_id").toString()));
      }
      if ((jsonObj.get("card_status") != null && !jsonObj.get("card_status").isJsonNull()) && !jsonObj.get("card_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `card_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("card_status").toString()));
      }
      if ((jsonObj.get("label") != null && !jsonObj.get("label").isJsonNull()) && !jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      if ((jsonObj.get("label2") != null && !jsonObj.get("label2").isJsonNull()) && !jsonObj.get("label2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label2").toString()));
      }
      if ((jsonObj.get("last4digits") != null && !jsonObj.get("last4digits").isJsonNull()) && !jsonObj.get("last4digits").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last4digits` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last4digits").toString()));
      }
      if ((jsonObj.get("name_on_card") != null && !jsonObj.get("name_on_card").isJsonNull()) && !jsonObj.get("name_on_card").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name_on_card` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name_on_card").toString()));
      }
      if ((jsonObj.get("scheme") != null && !jsonObj.get("scheme").isJsonNull()) && !jsonObj.get("scheme").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scheme` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scheme").toString()));
      }
      if ((jsonObj.get("token") != null && !jsonObj.get("token").isJsonNull()) && !jsonObj.get("token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Card.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Card' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Card> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Card.class));

       return (TypeAdapter<T>) new TypeAdapter<Card>() {
           @Override
           public void write(JsonWriter out, Card value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Card read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Card given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Card
  * @throws IOException if the JSON string is invalid with respect to Card
  */
  public static Card fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Card.class);
  }

 /**
  * Convert an instance of Card to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

