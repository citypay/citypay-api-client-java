/*
 * CityPay Payment API
 *  Welcome to the CityPay API, a robust HTTP API payment solution designed for seamless server-to-server  transactional processing. Our API facilitates a wide array of payment operations, catering to diverse business needs.  Whether you're integrating Internet payments, handling Mail Order/Telephone Order (MOTO) transactions, managing  Subscriptions with Recurring and Continuous Authority payments, or navigating the complexities of 3-D Secure  authentication, our API is equipped to support your requirements. Additionally, we offer functionalities for  Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids, and Completion processing, alongside the capability  for tokenised payments.  ## Compliance and Security Overview <aside class=\"notice\">   Ensuring the security of payment transactions and compliance with industry standards is paramount. Our API is    designed with stringent security measures and compliance protocols to safeguard sensitive information and meet    the rigorous requirements of Visa, MasterCard, and the PCI Security Standards Council. </aside>  ### Key Compliance and Security Measures  * **TLS Encryption**: All data transmissions must utilise TLS version 1.2 or higher, employing [strong cryptography](#enabled-tls-ciphers). Our infrastructure strictly enforces this requirement to maintain the integrity and confidentiality of data in transit. We conduct regular scans and assessments of our TLS endpoints to identify and mitigate vulnerabilities. * **Data Storage Prohibitions**: Storing sensitive cardholder data (CHD), such as the card security code (CSC) or primary account number (PAN), is strictly prohibited. Our API is designed to minimize your exposure to sensitive data, thereby reducing your compliance burden. * **Data Masking**: For consumer protection and compliance, full card numbers must not be displayed on receipts or any customer-facing materials. Our API automatically masks PANs, displaying only the last four digits to facilitate safe receipt generation. * **Network Scans**: If your application is web-based, regular scans of your hosting environment are mandatory to identify and rectify potential vulnerabilities. This proactive measure is crucial for maintaining a secure and compliant online presence. * **PCI Compliance**: Adherence to PCI DSS standards is not optional; it's a requirement for operating securely and legally in the payments ecosystem. For detailed information on compliance requirements and resources, please visit the PCI Security Standards Council website [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/). * **Request Validation**: Our API includes mechanisms to verify the legitimacy of each request, ensuring it pertains to a valid account and originates from a trusted source. We leverage remote IP address verification alongside sophisticated application firewall technologies to thwart a wide array of common security threats.  ## Getting Started Before integrating with the CityPay API, ensure your application and development practices align with the outlined compliance and security measures. This preparatory step is crucial for a smooth integration process and the long-term success of your payment processing operations.  For further details on API endpoints, request/response formats, and code examples, proceed to the subsequent sections of our documentation. Our aim is to provide you with all the necessary tools and information to integrate our payment processing capabilities seamlessly into your application.  Thank you for choosing CityPay API. We look forward to supporting your payment processing needs with our secure, compliant, and versatile API solution. 
 *
 * Contact: support@citypay.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.citypay.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.citypay.client.JSON;

/**
 * TransactionReportRequest
 */
public class TransactionReportRequest {
  public static final String SERIALIZED_NAME_FIELDS = "fields";
  @SerializedName(SERIALIZED_NAME_FIELDS)
  @javax.annotation.Nullable
  private List<String> fields = new ArrayList<>();

  public static final String SERIALIZED_NAME_FROM = "from";
  @SerializedName(SERIALIZED_NAME_FROM)
  @javax.annotation.Nonnull
  private OffsetDateTime from;

  public static final String SERIALIZED_NAME_INCLUDE_AUTHORISED = "include_authorised";
  @SerializedName(SERIALIZED_NAME_INCLUDE_AUTHORISED)
  @javax.annotation.Nullable
  private Boolean includeAuthorised;

  public static final String SERIALIZED_NAME_INCLUDE_CANCELLED = "include_cancelled";
  @SerializedName(SERIALIZED_NAME_INCLUDE_CANCELLED)
  @javax.annotation.Nullable
  private Boolean includeCancelled;

  public static final String SERIALIZED_NAME_INCLUDE_DECLINED = "include_declined";
  @SerializedName(SERIALIZED_NAME_INCLUDE_DECLINED)
  @javax.annotation.Nullable
  private Boolean includeDeclined;

  public static final String SERIALIZED_NAME_INCLUDE_REJECTED = "include_rejected";
  @SerializedName(SERIALIZED_NAME_INCLUDE_REJECTED)
  @javax.annotation.Nullable
  private Boolean includeRejected;

  public static final String SERIALIZED_NAME_INCLUDE_UNFULFILLED = "include_unfulfilled";
  @SerializedName(SERIALIZED_NAME_INCLUDE_UNFULFILLED)
  @javax.annotation.Nullable
  private Boolean includeUnfulfilled;

  public static final String SERIALIZED_NAME_MAX_RESULTS = "maxResults";
  @SerializedName(SERIALIZED_NAME_MAX_RESULTS)
  @javax.annotation.Nullable
  private Integer maxResults;

  public static final String SERIALIZED_NAME_MERCHANTID = "merchantid";
  @SerializedName(SERIALIZED_NAME_MERCHANTID)
  @javax.annotation.Nonnull
  private Integer merchantid;

  public static final String SERIALIZED_NAME_MODE = "mode";
  @SerializedName(SERIALIZED_NAME_MODE)
  @javax.annotation.Nullable
  private String mode;

  public static final String SERIALIZED_NAME_NEXT_TOKEN = "nextToken";
  @SerializedName(SERIALIZED_NAME_NEXT_TOKEN)
  @javax.annotation.Nullable
  private String nextToken;

  public static final String SERIALIZED_NAME_ORDER_BY = "orderBy";
  @SerializedName(SERIALIZED_NAME_ORDER_BY)
  @javax.annotation.Nullable
  private String orderBy;

  public static final String SERIALIZED_NAME_PII_MASKED = "pii_masked";
  @SerializedName(SERIALIZED_NAME_PII_MASKED)
  @javax.annotation.Nullable
  private Boolean piiMasked;

  public static final String SERIALIZED_NAME_TYPE_REFUND = "type_refund";
  @SerializedName(SERIALIZED_NAME_TYPE_REFUND)
  @javax.annotation.Nullable
  private Boolean typeRefund;

  public static final String SERIALIZED_NAME_TYPE_SALE = "type_sale";
  @SerializedName(SERIALIZED_NAME_TYPE_SALE)
  @javax.annotation.Nullable
  private Boolean typeSale;

  public static final String SERIALIZED_NAME_TYPE_VERIFY = "type_verify";
  @SerializedName(SERIALIZED_NAME_TYPE_VERIFY)
  @javax.annotation.Nullable
  private Boolean typeVerify;

  public static final String SERIALIZED_NAME_UNTIL = "until";
  @SerializedName(SERIALIZED_NAME_UNTIL)
  @javax.annotation.Nonnull
  private OffsetDateTime until;

  public TransactionReportRequest() {
  }

  public TransactionReportRequest fields(@javax.annotation.Nullable List<String> fields) {
    this.fields = fields;
    return this;
  }

  public TransactionReportRequest addFieldsItem(String fieldsItem) {
    if (this.fields == null) {
      this.fields = new ArrayList<>();
    }
    this.fields.add(fieldsItem);
    return this;
  }

  /**
   * Get fields
   * @return fields
   */
  @javax.annotation.Nullable
  public List<String> getFields() {
    return fields;
  }

  public void setFields(@javax.annotation.Nullable List<String> fields) {
    this.fields = fields;
  }


  public TransactionReportRequest from(@javax.annotation.Nonnull OffsetDateTime from) {
    this.from = from;
    return this;
  }

  /**
   * The date and time of transactions from.
   * @return from
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getFrom() {
    return from;
  }

  public void setFrom(@javax.annotation.Nonnull OffsetDateTime from) {
    this.from = from;
  }


  public TransactionReportRequest includeAuthorised(@javax.annotation.Nullable Boolean includeAuthorised) {
    this.includeAuthorised = includeAuthorised;
    return this;
  }

  /**
   * Include transactions fully authorised in the results.
   * @return includeAuthorised
   */
  @javax.annotation.Nullable
  public Boolean isIncludeAuthorised() {
    return includeAuthorised;
  }

  public void setIncludeAuthorised(@javax.annotation.Nullable Boolean includeAuthorised) {
    this.includeAuthorised = includeAuthorised;
  }


  public TransactionReportRequest includeCancelled(@javax.annotation.Nullable Boolean includeCancelled) {
    this.includeCancelled = includeCancelled;
    return this;
  }

  /**
   * Include transactions that were cancelled in the results.
   * @return includeCancelled
   */
  @javax.annotation.Nullable
  public Boolean isIncludeCancelled() {
    return includeCancelled;
  }

  public void setIncludeCancelled(@javax.annotation.Nullable Boolean includeCancelled) {
    this.includeCancelled = includeCancelled;
  }


  public TransactionReportRequest includeDeclined(@javax.annotation.Nullable Boolean includeDeclined) {
    this.includeDeclined = includeDeclined;
    return this;
  }

  /**
   * Include transactions that were declined or not honoured in the results.
   * @return includeDeclined
   */
  @javax.annotation.Nullable
  public Boolean isIncludeDeclined() {
    return includeDeclined;
  }

  public void setIncludeDeclined(@javax.annotation.Nullable Boolean includeDeclined) {
    this.includeDeclined = includeDeclined;
  }


  public TransactionReportRequest includeRejected(@javax.annotation.Nullable Boolean includeRejected) {
    this.includeRejected = includeRejected;
    return this;
  }

  /**
   * Include transactions that were rejected due to validation issues.
   * @return includeRejected
   */
  @javax.annotation.Nullable
  public Boolean isIncludeRejected() {
    return includeRejected;
  }

  public void setIncludeRejected(@javax.annotation.Nullable Boolean includeRejected) {
    this.includeRejected = includeRejected;
  }


  public TransactionReportRequest includeUnfulfilled(@javax.annotation.Nullable Boolean includeUnfulfilled) {
    this.includeUnfulfilled = includeUnfulfilled;
    return this;
  }

  /**
   * Includes transactions that were initiated but not completed—e.g. those pending authentication or challenge responses that were never fulfilled.
   * @return includeUnfulfilled
   */
  @javax.annotation.Nullable
  public Boolean isIncludeUnfulfilled() {
    return includeUnfulfilled;
  }

  public void setIncludeUnfulfilled(@javax.annotation.Nullable Boolean includeUnfulfilled) {
    this.includeUnfulfilled = includeUnfulfilled;
  }


  public TransactionReportRequest maxResults(@javax.annotation.Nullable Integer maxResults) {
    this.maxResults = maxResults;
    return this;
  }

  /**
   * The maximum number of results to return in a single response. This value is used to limit the size of data returned by the API, enhancing performance and manageability. Values should be between 5 and 250.
   * @return maxResults
   */
  @javax.annotation.Nullable
  public Integer getMaxResults() {
    return maxResults;
  }

  public void setMaxResults(@javax.annotation.Nullable Integer maxResults) {
    this.maxResults = maxResults;
  }


  public TransactionReportRequest merchantid(@javax.annotation.Nonnull Integer merchantid) {
    this.merchantid = merchantid;
    return this;
  }

  /**
   * The merchant id of the transactions to review.
   * @return merchantid
   */
  @javax.annotation.Nonnull
  public Integer getMerchantid() {
    return merchantid;
  }

  public void setMerchantid(@javax.annotation.Nonnull Integer merchantid) {
    this.merchantid = merchantid;
  }


  public TransactionReportRequest mode(@javax.annotation.Nullable String mode) {
    this.mode = mode;
    return this;
  }

  /**
   * Defines a preset profile for the level of detail in the returned fields. This simplifies response formatting for common use cases. Available values:  - &#x60;basic&#x60; (default): Returns a minimal, high-level view with key fields for reporting or dashboards.  - &#x60;extended&#x60;: Adds fields useful for customer support, settlement analysis, or more in-depth tracking, while still omitting sensitive personal or low-level fields.  - &#x60;full&#x60;: Returns all available transaction fields, including internal flags, personal data (where applicable), and detailed metadata. Use with care. 
   * @return mode
   */
  @javax.annotation.Nullable
  public String getMode() {
    return mode;
  }

  public void setMode(@javax.annotation.Nullable String mode) {
    this.mode = mode;
  }


  public TransactionReportRequest nextToken(@javax.annotation.Nullable String nextToken) {
    this.nextToken = nextToken;
    return this;
  }

  /**
   * A token that identifies the starting point of the page of results to be returned. An empty value indicates the start of the dataset. When supplied, it is validated and used to fetch the subsequent page of results. This token is typically obtained from the response of a previous pagination request.
   * @return nextToken
   */
  @javax.annotation.Nullable
  public String getNextToken() {
    return nextToken;
  }

  public void setNextToken(@javax.annotation.Nullable String nextToken) {
    this.nextToken = nextToken;
  }


  public TransactionReportRequest orderBy(@javax.annotation.Nullable String orderBy) {
    this.orderBy = orderBy;
    return this;
  }

  /**
   * Specifies the field by which results are ordered. Available fields are [trans_no,date_when,amount]. By default, fields are ordered by OrderByExpression(trans_no,ASC). To order in descending order, prefix with &#39;-&#39; or suffix with &#39; DESC&#39;.
   * @return orderBy
   */
  @javax.annotation.Nullable
  public String getOrderBy() {
    return orderBy;
  }

  public void setOrderBy(@javax.annotation.Nullable String orderBy) {
    this.orderBy = orderBy;
  }


  public TransactionReportRequest piiMasked(@javax.annotation.Nullable Boolean piiMasked) {
    this.piiMasked = piiMasked;
    return this;
  }

  /**
   * Defines whether personal identifiable information is masked which it is by default.
   * @return piiMasked
   */
  @javax.annotation.Nullable
  public Boolean isPiiMasked() {
    return piiMasked;
  }

  public void setPiiMasked(@javax.annotation.Nullable Boolean piiMasked) {
    this.piiMasked = piiMasked;
  }


  public TransactionReportRequest typeRefund(@javax.annotation.Nullable Boolean typeRefund) {
    this.typeRefund = typeRefund;
    return this;
  }

  /**
   * Include refunds in the results.
   * @return typeRefund
   */
  @javax.annotation.Nullable
  public Boolean isTypeRefund() {
    return typeRefund;
  }

  public void setTypeRefund(@javax.annotation.Nullable Boolean typeRefund) {
    this.typeRefund = typeRefund;
  }


  public TransactionReportRequest typeSale(@javax.annotation.Nullable Boolean typeSale) {
    this.typeSale = typeSale;
    return this;
  }

  /**
   * Include sales in the results.
   * @return typeSale
   */
  @javax.annotation.Nullable
  public Boolean isTypeSale() {
    return typeSale;
  }

  public void setTypeSale(@javax.annotation.Nullable Boolean typeSale) {
    this.typeSale = typeSale;
  }


  public TransactionReportRequest typeVerify(@javax.annotation.Nullable Boolean typeVerify) {
    this.typeVerify = typeVerify;
    return this;
  }

  /**
   * Include verifications in the results.
   * @return typeVerify
   */
  @javax.annotation.Nullable
  public Boolean isTypeVerify() {
    return typeVerify;
  }

  public void setTypeVerify(@javax.annotation.Nullable Boolean typeVerify) {
    this.typeVerify = typeVerify;
  }


  public TransactionReportRequest until(@javax.annotation.Nonnull OffsetDateTime until) {
    this.until = until;
    return this;
  }

  /**
   * The date and time of transactions until.
   * @return until
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getUntil() {
    return until;
  }

  public void setUntil(@javax.annotation.Nonnull OffsetDateTime until) {
    this.until = until;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the TransactionReportRequest instance itself
   */
  public TransactionReportRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactionReportRequest transactionReportRequest = (TransactionReportRequest) o;
    return Objects.equals(this.fields, transactionReportRequest.fields) &&
        Objects.equals(this.from, transactionReportRequest.from) &&
        Objects.equals(this.includeAuthorised, transactionReportRequest.includeAuthorised) &&
        Objects.equals(this.includeCancelled, transactionReportRequest.includeCancelled) &&
        Objects.equals(this.includeDeclined, transactionReportRequest.includeDeclined) &&
        Objects.equals(this.includeRejected, transactionReportRequest.includeRejected) &&
        Objects.equals(this.includeUnfulfilled, transactionReportRequest.includeUnfulfilled) &&
        Objects.equals(this.maxResults, transactionReportRequest.maxResults) &&
        Objects.equals(this.merchantid, transactionReportRequest.merchantid) &&
        Objects.equals(this.mode, transactionReportRequest.mode) &&
        Objects.equals(this.nextToken, transactionReportRequest.nextToken) &&
        Objects.equals(this.orderBy, transactionReportRequest.orderBy) &&
        Objects.equals(this.piiMasked, transactionReportRequest.piiMasked) &&
        Objects.equals(this.typeRefund, transactionReportRequest.typeRefund) &&
        Objects.equals(this.typeSale, transactionReportRequest.typeSale) &&
        Objects.equals(this.typeVerify, transactionReportRequest.typeVerify) &&
        Objects.equals(this.until, transactionReportRequest.until)&&
        Objects.equals(this.additionalProperties, transactionReportRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fields, from, includeAuthorised, includeCancelled, includeDeclined, includeRejected, includeUnfulfilled, maxResults, merchantid, mode, nextToken, orderBy, piiMasked, typeRefund, typeSale, typeVerify, until, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactionReportRequest {\n");
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    includeAuthorised: ").append(toIndentedString(includeAuthorised)).append("\n");
    sb.append("    includeCancelled: ").append(toIndentedString(includeCancelled)).append("\n");
    sb.append("    includeDeclined: ").append(toIndentedString(includeDeclined)).append("\n");
    sb.append("    includeRejected: ").append(toIndentedString(includeRejected)).append("\n");
    sb.append("    includeUnfulfilled: ").append(toIndentedString(includeUnfulfilled)).append("\n");
    sb.append("    maxResults: ").append(toIndentedString(maxResults)).append("\n");
    sb.append("    merchantid: ").append(toIndentedString(merchantid)).append("\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("    nextToken: ").append(toIndentedString(nextToken)).append("\n");
    sb.append("    orderBy: ").append(toIndentedString(orderBy)).append("\n");
    sb.append("    piiMasked: ").append(toIndentedString(piiMasked)).append("\n");
    sb.append("    typeRefund: ").append(toIndentedString(typeRefund)).append("\n");
    sb.append("    typeSale: ").append(toIndentedString(typeSale)).append("\n");
    sb.append("    typeVerify: ").append(toIndentedString(typeVerify)).append("\n");
    sb.append("    until: ").append(toIndentedString(until)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fields");
    openapiFields.add("from");
    openapiFields.add("include_authorised");
    openapiFields.add("include_cancelled");
    openapiFields.add("include_declined");
    openapiFields.add("include_rejected");
    openapiFields.add("include_unfulfilled");
    openapiFields.add("maxResults");
    openapiFields.add("merchantid");
    openapiFields.add("mode");
    openapiFields.add("nextToken");
    openapiFields.add("orderBy");
    openapiFields.add("pii_masked");
    openapiFields.add("type_refund");
    openapiFields.add("type_sale");
    openapiFields.add("type_verify");
    openapiFields.add("until");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("from");
    openapiRequiredFields.add("merchantid");
    openapiRequiredFields.add("until");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TransactionReportRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TransactionReportRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TransactionReportRequest is not found in the empty JSON string", TransactionReportRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TransactionReportRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("fields") != null && !jsonObj.get("fields").isJsonNull() && !jsonObj.get("fields").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `fields` to be an array in the JSON string but got `%s`", jsonObj.get("fields").toString()));
      }
      if ((jsonObj.get("mode") != null && !jsonObj.get("mode").isJsonNull()) && !jsonObj.get("mode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mode").toString()));
      }
      if ((jsonObj.get("nextToken") != null && !jsonObj.get("nextToken").isJsonNull()) && !jsonObj.get("nextToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nextToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nextToken").toString()));
      }
      if ((jsonObj.get("orderBy") != null && !jsonObj.get("orderBy").isJsonNull()) && !jsonObj.get("orderBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orderBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orderBy").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TransactionReportRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TransactionReportRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TransactionReportRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TransactionReportRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<TransactionReportRequest>() {
           @Override
           public void write(JsonWriter out, TransactionReportRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public TransactionReportRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             TransactionReportRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TransactionReportRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TransactionReportRequest
   * @throws IOException if the JSON string is invalid with respect to TransactionReportRequest
   */
  public static TransactionReportRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TransactionReportRequest.class);
  }

  /**
   * Convert an instance of TransactionReportRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

