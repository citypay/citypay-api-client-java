/*
 * CityPay Payment API
 *  Welcome to the CityPay API, a robust HTTP API payment solution designed for seamless server-to-server  transactional processing. Our API facilitates a wide array of payment operations, catering to diverse business needs.  Whether you're integrating Internet payments, handling Mail Order/Telephone Order (MOTO) transactions, managing  Subscriptions with Recurring and Continuous Authority payments, or navigating the complexities of 3-D Secure  authentication, our API is equipped to support your requirements. Additionally, we offer functionalities for  Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids, and Completion processing, alongside the capability  for tokenised payments.  ## Compliance and Security Overview <aside class=\"notice\">   Ensuring the security of payment transactions and compliance with industry standards is paramount. Our API is    designed with stringent security measures and compliance protocols to safeguard sensitive information and meet    the rigorous requirements of Visa, MasterCard, and the PCI Security Standards Council. </aside>  ### Key Compliance and Security Measures  * **TLS Encryption**: All data transmissions must utilise TLS version 1.2 or higher, employing [strong cryptography](#enabled-tls-ciphers). Our infrastructure strictly enforces this requirement to maintain the integrity and confidentiality of data in transit. We conduct regular scans and assessments of our TLS endpoints to identify and mitigate vulnerabilities. * **Data Storage Prohibitions**: Storing sensitive cardholder data (CHD), such as the card security code (CSC) or primary account number (PAN), is strictly prohibited. Our API is designed to minimize your exposure to sensitive data, thereby reducing your compliance burden. * **Data Masking**: For consumer protection and compliance, full card numbers must not be displayed on receipts or any customer-facing materials. Our API automatically masks PANs, displaying only the last four digits to facilitate safe receipt generation. * **Network Scans**: If your application is web-based, regular scans of your hosting environment are mandatory to identify and rectify potential vulnerabilities. This proactive measure is crucial for maintaining a secure and compliant online presence. * **PCI Compliance**: Adherence to PCI DSS standards is not optional; it's a requirement for operating securely and legally in the payments ecosystem. For detailed information on compliance requirements and resources, please visit the PCI Security Standards Council website [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/). * **Request Validation**: Our API includes mechanisms to verify the legitimacy of each request, ensuring it pertains to a valid account and originates from a trusted source. We leverage remote IP address verification alongside sophisticated application firewall technologies to thwart a wide array of common security threats.  ## Getting Started Before integrating with the CityPay API, ensure your application and development practices align with the outlined compliance and security measures. This preparatory step is crucial for a smooth integration process and the long-term success of your payment processing operations.  For further details on API endpoints, request/response formats, and code examples, proceed to the subsequent sections of our documentation. Our aim is to provide you with all the necessary tools and information to integrate our payment processing capabilities seamlessly into your application.  Thank you for choosing CityPay API. We look forward to supporting your payment processing needs with our secure, compliant, and versatile API solution. 
 *
 * Contact: support@citypay.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.citypay.client.model;

import java.util.Objects;
import com.citypay.client.model.Adjustments;
import com.citypay.client.model.AuthReference;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.citypay.client.JSON;

/**
 * PaymentIntentResponseModel
 */
public class PaymentIntentResponseModel {
  public static final String SERIALIZED_NAME_ADJUSTMENTS = "adjustments";
  @SerializedName(SERIALIZED_NAME_ADJUSTMENTS)
  @javax.annotation.Nullable
  private Adjustments adjustments;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  @javax.annotation.Nullable
  private Integer amount;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  @javax.annotation.Nullable
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  @javax.annotation.Nullable
  private String currency;

  public static final String SERIALIZED_NAME_DUE = "due";
  @SerializedName(SERIALIZED_NAME_DUE)
  @javax.annotation.Nullable
  private LocalDate due;

  public static final String SERIALIZED_NAME_EXPIRES = "expires";
  @SerializedName(SERIALIZED_NAME_EXPIRES)
  @javax.annotation.Nullable
  private LocalDate expires;

  public static final String SERIALIZED_NAME_EXTERNAL_REF = "external-ref";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_REF)
  @javax.annotation.Nullable
  private String externalRef;

  public static final String SERIALIZED_NAME_EXTERNAL_REF_SOURCE = "external-ref-source";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_REF_SOURCE)
  @javax.annotation.Nullable
  private String externalRefSource;

  public static final String SERIALIZED_NAME_IDENTIFIER = "identifier";
  @SerializedName(SERIALIZED_NAME_IDENTIFIER)
  @javax.annotation.Nonnull
  private String identifier;

  public static final String SERIALIZED_NAME_INTENT_STATUS = "intent_status";
  @SerializedName(SERIALIZED_NAME_INTENT_STATUS)
  @javax.annotation.Nullable
  private String intentStatus;

  public static final String SERIALIZED_NAME_MERCHANTID = "merchantid";
  @SerializedName(SERIALIZED_NAME_MERCHANTID)
  @javax.annotation.Nonnull
  private Integer merchantid;

  public static final String SERIALIZED_NAME_PAYMENT_TYPE = "payment-type";
  @SerializedName(SERIALIZED_NAME_PAYMENT_TYPE)
  @javax.annotation.Nullable
  private String paymentType;

  public static final String SERIALIZED_NAME_PAYMENT_INTENT_ID = "payment_intent_id";
  @SerializedName(SERIALIZED_NAME_PAYMENT_INTENT_ID)
  @javax.annotation.Nonnull
  private String paymentIntentId;

  public static final String SERIALIZED_NAME_TRANSACTIONS = "transactions";
  @SerializedName(SERIALIZED_NAME_TRANSACTIONS)
  @javax.annotation.Nullable
  private AuthReference transactions;

  public PaymentIntentResponseModel() {
  }

  public PaymentIntentResponseModel adjustments(@javax.annotation.Nullable Adjustments adjustments) {
    this.adjustments = adjustments;
    return this;
  }

  /**
   * Get adjustments
   * @return adjustments
   */
  @javax.annotation.Nullable
  public Adjustments getAdjustments() {
    return adjustments;
  }

  public void setAdjustments(@javax.annotation.Nullable Adjustments adjustments) {
    this.adjustments = adjustments;
  }


  public PaymentIntentResponseModel amount(@javax.annotation.Nullable Integer amount) {
    this.amount = amount;
    return this;
  }

  /**
   * An amount of the intent.
   * @return amount
   */
  @javax.annotation.Nullable
  public Integer getAmount() {
    return amount;
  }

  public void setAmount(@javax.annotation.Nullable Integer amount) {
    this.amount = amount;
  }


  public PaymentIntentResponseModel created(@javax.annotation.Nullable OffsetDateTime created) {
    this.created = created;
    return this;
  }

  /**
   * A date time of when the intent was created.
   * @return created
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreated() {
    return created;
  }

  public void setCreated(@javax.annotation.Nullable OffsetDateTime created) {
    this.created = created;
  }


  public PaymentIntentResponseModel currency(@javax.annotation.Nullable String currency) {
    this.currency = currency;
    return this;
  }

  /**
   * The currency of the intent.
   * @return currency
   */
  @javax.annotation.Nullable
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(@javax.annotation.Nullable String currency) {
    this.currency = currency;
  }


  public PaymentIntentResponseModel due(@javax.annotation.Nullable LocalDate due) {
    this.due = due;
    return this;
  }

  /**
   * A due date of the intent.
   * @return due
   */
  @javax.annotation.Nullable
  public LocalDate getDue() {
    return due;
  }

  public void setDue(@javax.annotation.Nullable LocalDate due) {
    this.due = due;
  }


  public PaymentIntentResponseModel expires(@javax.annotation.Nullable LocalDate expires) {
    this.expires = expires;
    return this;
  }

  /**
   * An expiration date of the intent.
   * @return expires
   */
  @javax.annotation.Nullable
  public LocalDate getExpires() {
    return expires;
  }

  public void setExpires(@javax.annotation.Nullable LocalDate expires) {
    this.expires = expires;
  }


  public PaymentIntentResponseModel externalRef(@javax.annotation.Nullable String externalRef) {
    this.externalRef = externalRef;
    return this;
  }

  /**
   * An external reference of the intent.
   * @return externalRef
   */
  @javax.annotation.Nullable
  public String getExternalRef() {
    return externalRef;
  }

  public void setExternalRef(@javax.annotation.Nullable String externalRef) {
    this.externalRef = externalRef;
  }


  public PaymentIntentResponseModel externalRefSource(@javax.annotation.Nullable String externalRefSource) {
    this.externalRefSource = externalRefSource;
    return this;
  }

  /**
   * An external reference source of the intent.
   * @return externalRefSource
   */
  @javax.annotation.Nullable
  public String getExternalRefSource() {
    return externalRefSource;
  }

  public void setExternalRefSource(@javax.annotation.Nullable String externalRefSource) {
    this.externalRefSource = externalRefSource;
  }


  public PaymentIntentResponseModel identifier(@javax.annotation.Nonnull String identifier) {
    this.identifier = identifier;
    return this;
  }

  /**
   * An identifier of the intent.
   * @return identifier
   */
  @javax.annotation.Nonnull
  public String getIdentifier() {
    return identifier;
  }

  public void setIdentifier(@javax.annotation.Nonnull String identifier) {
    this.identifier = identifier;
  }


  public PaymentIntentResponseModel intentStatus(@javax.annotation.Nullable String intentStatus) {
    this.intentStatus = intentStatus;
    return this;
  }

  /**
   * A status of the intent such as &#x60;unknown&#x60;, &#x60;open&#x60;, &#x60;requires_payment_method&#x60;, &#x60;requires_confirmation&#x60;, &#x60;requires_confirmation&#x60;, &#x60;requires_action&#x60;, &#x60;processing&#x60;, &#x60;succeeded&#x60;, &#x60;cancelled&#x60;, &#x60;requires_capture&#x60;, &#x60;failed&#x60;, &#x60;expired&#x60;, &#x60;requires_refund&#x60;, &#x60;refunded&#x60;.
   * @return intentStatus
   */
  @javax.annotation.Nullable
  public String getIntentStatus() {
    return intentStatus;
  }

  public void setIntentStatus(@javax.annotation.Nullable String intentStatus) {
    this.intentStatus = intentStatus;
  }


  public PaymentIntentResponseModel merchantid(@javax.annotation.Nonnull Integer merchantid) {
    this.merchantid = merchantid;
    return this;
  }

  /**
   * The merchant id of the intent.
   * @return merchantid
   */
  @javax.annotation.Nonnull
  public Integer getMerchantid() {
    return merchantid;
  }

  public void setMerchantid(@javax.annotation.Nonnull Integer merchantid) {
    this.merchantid = merchantid;
  }


  public PaymentIntentResponseModel paymentType(@javax.annotation.Nullable String paymentType) {
    this.paymentType = paymentType;
    return this;
  }

  /**
   * A type of the intent such as &#x60;None&#x60;, &#x60;Single&#x60;, &#x60;Subscription&#x60;.
   * @return paymentType
   */
  @javax.annotation.Nullable
  public String getPaymentType() {
    return paymentType;
  }

  public void setPaymentType(@javax.annotation.Nullable String paymentType) {
    this.paymentType = paymentType;
  }


  public PaymentIntentResponseModel paymentIntentId(@javax.annotation.Nonnull String paymentIntentId) {
    this.paymentIntentId = paymentIntentId;
    return this;
  }

  /**
   * The id of the intent.
   * @return paymentIntentId
   */
  @javax.annotation.Nonnull
  public String getPaymentIntentId() {
    return paymentIntentId;
  }

  public void setPaymentIntentId(@javax.annotation.Nonnull String paymentIntentId) {
    this.paymentIntentId = paymentIntentId;
  }


  public PaymentIntentResponseModel transactions(@javax.annotation.Nullable AuthReference transactions) {
    this.transactions = transactions;
    return this;
  }

  /**
   * Get transactions
   * @return transactions
   */
  @javax.annotation.Nullable
  public AuthReference getTransactions() {
    return transactions;
  }

  public void setTransactions(@javax.annotation.Nullable AuthReference transactions) {
    this.transactions = transactions;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PaymentIntentResponseModel instance itself
   */
  public PaymentIntentResponseModel putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentIntentResponseModel paymentIntentResponseModel = (PaymentIntentResponseModel) o;
    return Objects.equals(this.adjustments, paymentIntentResponseModel.adjustments) &&
        Objects.equals(this.amount, paymentIntentResponseModel.amount) &&
        Objects.equals(this.created, paymentIntentResponseModel.created) &&
        Objects.equals(this.currency, paymentIntentResponseModel.currency) &&
        Objects.equals(this.due, paymentIntentResponseModel.due) &&
        Objects.equals(this.expires, paymentIntentResponseModel.expires) &&
        Objects.equals(this.externalRef, paymentIntentResponseModel.externalRef) &&
        Objects.equals(this.externalRefSource, paymentIntentResponseModel.externalRefSource) &&
        Objects.equals(this.identifier, paymentIntentResponseModel.identifier) &&
        Objects.equals(this.intentStatus, paymentIntentResponseModel.intentStatus) &&
        Objects.equals(this.merchantid, paymentIntentResponseModel.merchantid) &&
        Objects.equals(this.paymentType, paymentIntentResponseModel.paymentType) &&
        Objects.equals(this.paymentIntentId, paymentIntentResponseModel.paymentIntentId) &&
        Objects.equals(this.transactions, paymentIntentResponseModel.transactions)&&
        Objects.equals(this.additionalProperties, paymentIntentResponseModel.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adjustments, amount, created, currency, due, expires, externalRef, externalRefSource, identifier, intentStatus, merchantid, paymentType, paymentIntentId, transactions, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentIntentResponseModel {\n");
    sb.append("    adjustments: ").append(toIndentedString(adjustments)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    due: ").append(toIndentedString(due)).append("\n");
    sb.append("    expires: ").append(toIndentedString(expires)).append("\n");
    sb.append("    externalRef: ").append(toIndentedString(externalRef)).append("\n");
    sb.append("    externalRefSource: ").append(toIndentedString(externalRefSource)).append("\n");
    sb.append("    identifier: ").append(toIndentedString(identifier)).append("\n");
    sb.append("    intentStatus: ").append(toIndentedString(intentStatus)).append("\n");
    sb.append("    merchantid: ").append(toIndentedString(merchantid)).append("\n");
    sb.append("    paymentType: ").append(toIndentedString(paymentType)).append("\n");
    sb.append("    paymentIntentId: ").append(toIndentedString(paymentIntentId)).append("\n");
    sb.append("    transactions: ").append(toIndentedString(transactions)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("adjustments");
    openapiFields.add("amount");
    openapiFields.add("created");
    openapiFields.add("currency");
    openapiFields.add("due");
    openapiFields.add("expires");
    openapiFields.add("external-ref");
    openapiFields.add("external-ref-source");
    openapiFields.add("identifier");
    openapiFields.add("intent_status");
    openapiFields.add("merchantid");
    openapiFields.add("payment-type");
    openapiFields.add("payment_intent_id");
    openapiFields.add("transactions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("identifier");
    openapiRequiredFields.add("merchantid");
    openapiRequiredFields.add("payment_intent_id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PaymentIntentResponseModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PaymentIntentResponseModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PaymentIntentResponseModel is not found in the empty JSON string", PaymentIntentResponseModel.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PaymentIntentResponseModel.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `adjustments`
      if (jsonObj.get("adjustments") != null && !jsonObj.get("adjustments").isJsonNull()) {
        Adjustments.validateJsonElement(jsonObj.get("adjustments"));
      }
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if ((jsonObj.get("external-ref") != null && !jsonObj.get("external-ref").isJsonNull()) && !jsonObj.get("external-ref").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `external-ref` to be a primitive type in the JSON string but got `%s`", jsonObj.get("external-ref").toString()));
      }
      if ((jsonObj.get("external-ref-source") != null && !jsonObj.get("external-ref-source").isJsonNull()) && !jsonObj.get("external-ref-source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `external-ref-source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("external-ref-source").toString()));
      }
      if (!jsonObj.get("identifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `identifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("identifier").toString()));
      }
      if ((jsonObj.get("intent_status") != null && !jsonObj.get("intent_status").isJsonNull()) && !jsonObj.get("intent_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `intent_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("intent_status").toString()));
      }
      if ((jsonObj.get("payment-type") != null && !jsonObj.get("payment-type").isJsonNull()) && !jsonObj.get("payment-type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payment-type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payment-type").toString()));
      }
      if (!jsonObj.get("payment_intent_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payment_intent_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payment_intent_id").toString()));
      }
      // validate the optional field `transactions`
      if (jsonObj.get("transactions") != null && !jsonObj.get("transactions").isJsonNull()) {
        AuthReference.validateJsonElement(jsonObj.get("transactions"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PaymentIntentResponseModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PaymentIntentResponseModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PaymentIntentResponseModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PaymentIntentResponseModel.class));

       return (TypeAdapter<T>) new TypeAdapter<PaymentIntentResponseModel>() {
           @Override
           public void write(JsonWriter out, PaymentIntentResponseModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PaymentIntentResponseModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             PaymentIntentResponseModel instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PaymentIntentResponseModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PaymentIntentResponseModel
   * @throws IOException if the JSON string is invalid with respect to PaymentIntentResponseModel
   */
  public static PaymentIntentResponseModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PaymentIntentResponseModel.class);
  }

  /**
   * Convert an instance of PaymentIntentResponseModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

