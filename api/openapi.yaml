openapi: 3.0.0
info:
  contact:
    email: support@citypay.com
    name: CityPay Support
    url: https://citypay.com/customer-centre/technical-support.html
  description: "\nThis CityPay API is a HTTP RESTful payment API used for direct server\
    \ to server transactional processing. It\nprovides a number of payment mechanisms\
    \ including: Internet, MOTO, Continuous Authority transaction processing,\n3-D\
    \ Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation,\
    \ Cancellation/Voids and\nCompletion processing. The API is also capable of tokinsed\
    \ payments using Card Holder Accounts.\n\n## Compliance and Security\nYour application\
    \ will need to adhere to PCI-DSS standards to operate safely and to meet requirements\
    \ set out by \nVisa and MasterCard and the PCI Security Standards Council. These\
    \ include\n\n* Data must be collected using TLS version 1.2 using [strong cryptography](#enabled-tls-ciphers).\
    \ We will not accept calls to our API at\n  lower grade encryption levels. We\
    \ regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments\n\
    \  as part of our compliance program.\n* The application must not store sensitive\
    \ card holder data (CHD) such as the card security code (CSC) or\n  primary access\
    \ number (PAN)\n* The application must not display the full card number on receipts,\
    \ it is recommended to mask the PAN\n  and show the last 4 digits. The API will\
    \ return this for you for ease of receipt creation\n* If you are developing a\
    \ website, you will be required to perform regular scans on the network where\
    \ you host the\n  application to meet your compliance obligations\n* You will\
    \ be required to be PCI Compliant and the application must adhere to the security\
    \ standard. Further information\n  is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/)\n\
    * The API verifies that the request is for a valid account and originates from\
    \ a trusted source using the remote IP\n  address. Our application firewalls analyse\
    \ data that may be an attempt to break a large number of security common\n  security\
    \ vulnerabilities.\n"
  title: CityPay Payment API
  version: 6.4.7
servers:
- description: Production processing endpoint
  url: https://api.citypay.com
- description: Testing service returning test results for all transactions
  url: https://sandbox.citypay.com
tags:
- description: "."
  name: Authorisation and Payment Api
- description: "Batch processing uses the Batch and Instalment Service (BIS) which\
    \ allows for transaction processing against cardholder \naccounts using a dynamic\
    \ batch file. For merchants who process on schedules and dynamic amounts, the\
    \ service allows for \nthe presentation of cardholder account references and transaction\
    \ requirements to run as a scheduled batch.\n"
  name: Batch Processing Api
- description: "A cardholder account models a cardholder and can register 1 or more\
    \ cards for tokenised charging. \n\nThe account offers a credential on file option\
    \ to the CityPay gateway allowing for both cardholder initiated and \nmerchant\
    \ initiated transaction processing.\n\nThis can include unscheduled or scheduled\
    \ transactions that can be requested through this API and include batch \nprocessing\
    \ options.\n"
  name: Card Holder Account Api
- description: |
    The Direct Post Method for e-commerce payment is generally used by merchants that require more control over their
    payment form “look and feel” and can understand and implement the extra PCI DSS security controls that are required to
    protect their systems.

    The Direct Post Method uses the merchant’s website to generate the shopping cart and payment web pages. The merchant’s
    payment form, loaded in the customer’s browser, sends the cardholder data directly to CityPay’s API, ensuring cardholder
    data is not stored, processed, or transmitted via the merchant systems. The payment form, however, is provided by the
    merchant. The merchant’s systems are therefore in scope for additional PCI DSS controls, which are necessary to protect
    the merchant website against malicious individuals changing the form and capturing cardholder data.

    ### Direct Post Flow

    #### Simple Authorisation Flow

    The merchant’s website creates the payment page.

    1. The customer’s browser displays the payment page and posts the cardholder data directly to CityPay as a url-encoded
       payment form.
    2. CityPay receives the cardholder data and sends it for online authorisation, handling any ThreeDSecure authorisation
       challenges
    3. The merchant receives a HTTP 303 redirect, containing the result of the transaction as query parameters

    <img src="../../images/direct-post-flow.png" width="600" />

    #### Tokenisation Authorisation Flow

    The merchant’s website creates the payment page.

    1. The customer’s browser displays the payment page and posts the cardholder data directly to CityPay as a url-encoded
       payment form.
    2. CityPay receives the cardholder data and processes any ThreeDSecure authorisation and challenges.
    3. The merchant receives a HTTP `303` redirect containing the card details tokenised for consequential processing
    4. Once final confirmation is agreed at checkout, the generated token is forward to CityPay for realtime authorisation.
       This may by using HTTP redirects in a direct manner, or via an api level call

    #### Handling Redirects

    The direct post method uses HTTP `303` redirects to return data to your system. A `303` redirect differs to conventional 301
    or `302` redirects by telling the browser to not resend data if refresh is pressed.

    Payments should be developed to cater for failure. Transactions may not complete authorisation at the challenge stage or
    decline either due to insufficient funds or transient network conditions. To ensure correct payment flow, the direct
    post API requires

    1. a `redirectSuccess` url. This is used to forward the result of authorisation.
    2. a `redirectFailure` url. This is used to forward any errors that are due to invalid requests or payment failures.

    #### Domain Keys

    To allow for processing of transactions in a direct manner, CityPay provide domain keys. This value is provided on the
    initial direct post call and must be run on a pre-registered host. Our validation processes will check the `Origin` or
    `Referer`   HTTP headers to ensure that the domain keys are valid. A domain key can be registered for 1 or more domains.
  name: Direct Post Api
- description: "."
  name: Operational Functions Api
- description: |
    CityPay Paylink makes online e-commerce easier to implement by handling the card payment process directly with the cardholder's browser and CityPay's payment processing servers, allowing you to concentrate on your business whilst allowing us to manage the payment process.

    0. Simplified payment solutions.
    0. payment processing is handled by our secure web servers adding security and confidence to your shoppers.
    0. 3D-Secure authentication is available within the application without any difficult MPI integration, allowing for immediate Verified by Visa and MasterCard SecureCode processing.
    0. customisation may be performed on the secure payment form.
    0. significantly reduced technical and financial overheads associated with software implementation and PCI compliance.
    1. reduced time-to-market.

    The CityPay API offers embedded end-point calls to Paylink offering advanced features of generated tokens.

    For further information on Paylink see [Paylink Online Documentation](https://citypay.github.io/api-docs/paylink).
  name: Paylink Api
paths:
  /direct/auth:
    post:
      description: |
        Used to initiate a direct post request transaction flow.

        <pre class="inline-code language-bash">
        <code>
        curl https://api.citypay.com/v6/direct?cp-domain-key=n834ytqp84y... \
         -d "amount=7500&identifier=example_trans&cardnumber=4000000000000002&expmonth=9&expyear=2028&bill_to_postcode=L1+7ZW
        </code>
        </pre>.
      operationId: DirectPostAuthRequest
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DirectPostRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/DirectPostRequest'
          text/xml:
            schema:
              $ref: '#/components/schemas/DirectPostRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/AuthResponse'
          description: A result of a successful tokenisation or authorisation process
            if called via an XHR method.
        "303":
          content:
            application/x-www-form-urlencoded:
              schema:
                $ref: '#/components/schemas/AuthResponse'
          description: Redirect. A result of a successful tokenisation or authorisation
            process, redirecting to the success URL.
        "307":
          content:
            application/x-www-form-urlencoded:
              schema:
                $ref: '#/components/schemas/Error'
          description: Redirect. A result of a non-successful tokenisation or authorisation
            process, redirecting to the failure URL.
        "401":
          description: Unauthorized. No domain key has been provided and is required
            for this operation.
        "403":
          description: Forbidden. The domain key was provided and understood but is
            either incorrect or does not have permission to access the account provided
            on the request.
        "406":
          description: Not Acceptable. Should the incoming data not be validly determined.
        "412":
          content:
            application/x-www-form-urlencoded:
              schema:
                $ref: '#/components/schemas/Error'
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. Should the incoming data not be validly determined
            and an error code results.
        "500":
          description: Server Error. Server Error. The server was unable to complete
            the request.
      security:
      - cp-api-key: []
      - cp-domain-key: []
      summary: Direct Post Auth Request
      tags:
      - Direct Post Api
      x-contentType: application/json
      x-accepts: application/json
  /direct/cres/auth/{uuid}:
    post:
      description: |
        Used to post from an ACS during a ThreeDSecure direct flow process. The endpoint requires a valid `threeDSSessionData`
        value which defines the unique transaction through its workflow. This endpoint may be used by merchants wishing to
        perform a `Direct Post` integration who wish to handle the challenge flow themselves.
      operationId: DirectCResAuthRequest
      parameters:
      - description: An identifier used to track the CReq/CRes cycle.
        explode: false
        in: path
        name: uuid
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CResDirect'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/AuthResponse'
          description: A result of a successful tokenisation or authorisation process
            if called via an XHR method.
        "303":
          content:
            application/x-www-form-urlencoded:
              schema:
                $ref: '#/components/schemas/AuthResponse'
          description: Redirect. A result of a successful tokenisation or authorisation
            process, redirecting to the success URL.
        "307":
          content:
            application/x-www-form-urlencoded:
              schema:
                $ref: '#/components/schemas/Error'
          description: Redirect. A result of a non-successful tokenisation or authorisation
            process, redirecting to the failure URL.
        "401":
          description: Unauthorized. No domain key has been provided and is required
            for this operation.
        "403":
          description: Forbidden. The domain key was provided and understood but is
            either incorrect or does not have permission to access the account provided
            on the request.
        "406":
          description: Not Acceptable. Should the incoming data not be validly determined.
        "412":
          content:
            application/x-www-form-urlencoded:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. Should the incoming data not be validly determined
            and an error code results.
        "500":
          description: Server Error. Server Error. The server was unable to complete
            the request.
      summary: Handles a CRes response from ACS, returning back the result of authorisation
      tags:
      - Direct Post Api
      x-contentType: application/x-www-form-urlencoded
      x-accepts: application/json
  /direct/cres/tokenise/{uuid}:
    post:
      description: |
        Used to post from an ACS during a ThreeDSecure direct flow process. The endpoint requires a valid `threeDSSessionData`
        value which defines the unique transaction through its workflow. This endpoint may be used by merchants wishing to
        perform a `Direct Post` integration who wish to handle the challenge flow themselves.
      operationId: DirectCResTokeniseRequest
      parameters:
      - description: An identifier used to track the CReq/CRes cycle.
        explode: false
        in: path
        name: uuid
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CResDirect'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenisationResponseModel'
            application/xml:
              schema:
                $ref: '#/components/schemas/TokenisationResponseModel'
          description: A result of a successful tokenisation or authorisation process
            if called via an XHR method.
        "303":
          content:
            application/x-www-form-urlencoded:
              schema:
                $ref: '#/components/schemas/TokenisationResponseModel'
          description: Redirect. A result of a successful tokenisation or authorisation
            process, redirecting to the success URL.
        "307":
          content:
            application/x-www-form-urlencoded:
              schema:
                $ref: '#/components/schemas/Error'
          description: Redirect. A result of a non-successful tokenisation or authorisation
            process, redirecting to the failure URL.
        "401":
          description: Unauthorized. No domain key has been provided and is required
            for this operation.
        "403":
          description: Forbidden. The domain key was provided and understood but is
            either incorrect or does not have permission to access the account provided
            on the request.
        "406":
          description: Not Acceptable. Should the incoming data not be validly determined.
        "412":
          content:
            application/x-www-form-urlencoded:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. Should the incoming data not be validly determined
            and an error code results.
        "500":
          description: Server Error. Server Error. The server was unable to complete
            the request.
      summary: Handles a CRes response from ACS, returning back a token for future
        authorisation
      tags:
      - Direct Post Api
      x-contentType: application/x-www-form-urlencoded
      x-accepts: application/json
  /direct/token:
    post:
      description: |
        Perform a request for authorisation for a previously generated token. This flow will return an authorisation
        response stating that the transaction was approved or declined.
      operationId: TokenRequest
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DirectTokenAuthRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/DirectTokenAuthRequest'
          text/xml:
            schema:
              $ref: '#/components/schemas/DirectTokenAuthRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/AuthResponse'
          description: A result of an authorisation process if called via an XHR method.
        "303":
          content:
            application/x-www-form-urlencoded:
              schema:
                $ref: '#/components/schemas/AuthResponse'
          description: Redirect. A result of a successful tokenisation or authorisation
            process, redirecting to the success URL.
        "307":
          content:
            application/x-www-form-urlencoded:
              schema:
                $ref: '#/components/schemas/Error'
          description: Redirect. A result of a non-successful tokenisation or authorisation
            process, redirecting to the failure URL.
        "401":
          description: Unauthorized. No domain key has been provided and is required
            for this operation.
        "403":
          description: Forbidden. The domain key was provided and understood but is
            either incorrect or does not have permission to access the account provided
            on the request.
        "406":
          description: Not Acceptable. Should the incoming data not be validly determined.
        "412":
          content:
            application/x-www-form-urlencoded:
              schema:
                $ref: '#/components/schemas/Error'
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. Should the incoming data not be validly determined
            and an error code results.
      security:
      - cp-api-key: []
      - cp-domain-key: []
      summary: Direct Post Token Request
      tags:
      - Direct Post Api
      x-contentType: application/json
      x-accepts: application/json
  /direct/tokenise:
    post:
      description: |
        Used to initiate a direct post request transaction flow.

        <pre class="inline-code language-bash">
        <code>
        curl https://api.citypay.com/v6/direct?cp-domain-key=n834ytqp84y... \
         -d "amount=7500&identifier=example_trans&cardnumber=4000000000000002&expmonth=9&expyear=2028&bill_to_postcode=L1+7ZW
        </code>
        </pre>.
      operationId: DirectPostTokeniseRequest
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DirectPostRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/DirectPostRequest'
          text/xml:
            schema:
              $ref: '#/components/schemas/DirectPostRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/AuthResponse'
          description: A result of a successful tokenisation or authorisation process
            if called via an XHR method.
        "303":
          content:
            application/x-www-form-urlencoded:
              schema:
                $ref: '#/components/schemas/AuthResponse'
          description: Redirect. A result of a successful tokenisation or authorisation
            process, redirecting to the success URL.
        "307":
          content:
            application/x-www-form-urlencoded:
              schema:
                $ref: '#/components/schemas/Error'
          description: Redirect. A result of a non-successful tokenisation or authorisation
            process, redirecting to the failure URL.
        "401":
          description: Unauthorized. No domain key has been provided and is required
            for this operation.
        "403":
          description: Forbidden. The domain key was provided and understood but is
            either incorrect or does not have permission to access the account provided
            on the request.
        "406":
          description: Not Acceptable. Should the incoming data not be validly determined.
        "412":
          content:
            application/x-www-form-urlencoded:
              schema:
                $ref: '#/components/schemas/Error'
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request. Should the incoming data not be validly determined
            and an error code results.
        "500":
          description: Server Error. Server Error. The server was unable to complete
            the request.
      security:
      - cp-api-key: []
      - cp-domain-key: []
      summary: Direct Post Tokenise Request
      tags:
      - Direct Post Api
      x-contentType: application/json
      x-accepts: application/json
  /dk/check:
    post:
      description: "Checks the contents of a `domain key`. Can be used for operational\
        \ processes to ensure that the properties of a \ndomain key meet their expectations.\n"
      operationId: DomainKeyCheckRequest
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DomainKeyCheckRequest'
          text/xml:
            schema:
              $ref: '#/components/schemas/DomainKeyCheckRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainKeyResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/DomainKeyResponse'
          description: A checked domain key.
        "400":
          description: Bad Request. Should the incoming data not be validly determined.
        "401":
          description: Unauthorized. No api key has been provided and is required
            for this operation.
        "403":
          description: Forbidden. The api key was provided and understood but is either
            incorrect or does not have permission to access the account provided on
            the request.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity. Should a failure occur that prevents
            processing of the API call.
        "500":
          description: Server Error. The server was unable to complete the request.
      security:
      - cp-api-key: []
      summary: Domain Key Check Request
      tags:
      - Operational Functions Api
      x-contentType: application/json
      x-accepts: application/json
  /dk/gen:
    post:
      description: |
        Generates a domain key based on the permissions of the calling `api-key`. Domain keys can be used in _Direct Post_ and
        `XHR` calls to the API services.
      operationId: DomainKeyGenRequest
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DomainKeyRequest'
          text/xml:
            schema:
              $ref: '#/components/schemas/DomainKeyRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainKeyResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/DomainKeyResponse'
          description: A generated domain key.
        "400":
          description: Bad Request. Should the incoming data not be validly determined.
        "401":
          description: Unauthorized. No api key has been provided and is required
            for this operation.
        "403":
          description: Forbidden. The api key was provided and understood but is either
            incorrect or does not have permission to access the account provided on
            the request.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity. Should a failure occur that prevents
            processing of the API call.
        "500":
          description: Server Error. The server was unable to complete the request.
      security:
      - cp-api-key: []
      summary: Domain Key Generation Request
      tags:
      - Operational Functions Api
      x-contentType: application/json
      x-accepts: application/json
  /paylink/bill-payment:
    post:
      description: "CityPay Paylink supports invoice and bill payment services by\
        \ allowing merchants to raise an invoice in their systems and\nassociate the\
        \ invoice with a Paylink checkout token. CityPay will co-ordinate the checkout\
        \ flow in relationship with\nyour customer. Our bill payment solution may\
        \ be used to streamline the payment flow with cardholders to allow your\n\
        invoice to be paid promptly and via multiple payment channels such as Card\
        \ Payment, Apple Pay or Google Pay.\n\nThe bill payment service allows\n\n\
        1. setting up notification paths to an end customer, such as SMS or Email\n\
        2. enabling attachments to be included with Paylink tokens\n3. produce chaser\
        \ notifications for unpaid invoices\n4. provide callbacks for notification\
        \ of the payment of an invoice\n5. support part payments against an invoice\n\
        6. support of field guards to protect the payment screen\n7. support of status\
        \ reporting on tokens\n8. URL short codes for SMS notifications\n\n<img src=\"\
        ../images/merchant-BPS-workflow.png\" alt=\"Paylink BPSv2 Overview\" width=\"\
        50%\"/> \n\n\n### Notification Paths\n\nNotification paths can be provided\
        \ which identify the channels for communication of the invoice availability.\n\
        Up to 3 notification paths may be provided per request.\n\nEach notification\
        \ uses a template to generate the body of the message. This allows for variable\
        \ text to be sent out and\ncustomised for each call.\n\nSMS messages use URL\
        \ Short Codes (USC) as a payment link to the invoice payment page. This allows\
        \ for a standard payment\nURL to be shortened for optimised usage in SMS.\
        \ For instance a URL of `https://checkout.citypay.com/PL1234/s348yb8yna4a48n2f8nq2f3msgyng-psn348ynaw8ynaw/en`\n\
        becomes `citypay.com/Za48na3x`. Each USC is unique however it is a requirement\
        \ that each USC generated is protected\nwith Field Guards to ensure that sensitive\
        \ data (such as customer contact details and GDPR) is protected.\n\nTo send\
        \ a notification path, append a `notification-path` property to the request.\n\
        \n```json\n {\n  \"notification-path\": [\n    {\n      \"channel\": \"sms\"\
        ,\n      \"to\": \"+441534884000\"\n    },\n    {\n      \"channel\": \"email\"\
        ,\n      \"to\": [\"help-desk@citypay.com\"],\n      \"cc\": [\"third-party@citypay.com\"\
        ],\n      \"reply\": [\"help@my-company.com\"]\n    }\n  ]\n}\n\n```\n\nNotification\
        \ paths trigger a number of events which are stored as part of the timeline\
        \ of events of a Paylink token\n\n- `BillPaymentSmsNotificationQueued` - identifies\
        \ when an SMS notification has been queued for delivery\n- `BillPaymentSmsNotificationSent`\
        \ - identifies when an SMS notification has been sent to the upstream network\n\
        - `BillPaymentSmsNotificationDelivered` - identifies when an SMS notification\
        \ has been delivered as notified by the upstream network\n- `BillPaymentSmsNotificationUndelivered`\
        \ - identifies when an SMS notification has undelivered notification is provided\
        \ by the upstream network\n- `BillPaymentSmsNotificationFailure` - identifies\
        \ when an SMS notification has failed\n- `BillPaymentEmailNotificationQueued`\
        \ -  identifies when an email notification has been queued for delivery\n\
        - `BillPaymentEmailNotificationSent` -  identifies when an email notification\
        \ has been accepted by our SMS forwarder\n- `BillPaymentEmailNotificationFailure`\
        \ - identifies when an email notification has failed delivery\n\n\n#### SMS\
        \ Notification Path\n\nSMS originated from a CityPay pool of numbers and by\
        \ default only sends to country codes where the service is registered.\nSMSs\
        \ may contain a From field which is configured as part of you onboarding and\
        \ have a name associated to identify the service\norigin. For example if your\
        \ business is titled `Health Surgery Ltd` the SMS may be sent to originate\
        \ from `Health Surgery`. \n\nSMS is also configured for a \"polite mode\"\
        . This mode ensures that SMSs aren't sent in the middle of the night when\
        \ backend\nservices ordinarily run. SMSs will be queued until the time range\
        \ is deemed as polite. Normally this is between 8am and 9pm.\n\n| Field  \
        \  | Type     | Usage    | Description                                   \
        \                                                  |\n|----------|----------|----------|-------------------------------------------------------------------------------------------------|\n\
        | template | string   | Reserved | An optional template name to use a template\
        \ other than the default.                             |\n| to       | string\
        \   | Reserved | The phone number in [E.164](https://en.wikipedia.org/wiki/E.164)\
        \ format to send the message to. |\n\n#### Email Notification Paths\n\n| Field\
        \    | Type     | Usage    | Description                                 \
        \                                                    |\n|----------|----------|----------|-------------------------------------------------------------------------------------------------|\n\
        | template | string   | Reserved | An optional template name to use a template\
        \ other than the default.                             |\n| to       | string[]\
        \ | Required | An array of email addresses to be used for delivery. A maximum\
        \ of 5 addresses can be added.     |\n| cc       | string[] | Required | An\
        \ array of email addresses to be used for cc delivery. A maximum of 5 addresses\
        \ can be added.  |\n| bcc      | string[] | Required | An array of email addresses\
        \ to be used for bcc delivery. A maximum of 5 addresses can be added. |\n\
        | reply_to | string[] | Required | An array of email addresses to be used\
        \ for the Reply-To header of an email.     |\n\n\n### Field Guards\n\nTo ensure\
        \ that invoices are paid by the intended recipient, Paylink supports the addition\
        \ of Field Guards.\n\nA Field Guard is an intended field which is to be used\
        \ as a form of guarded authentication. More than 1 field can be\nrequested.\n\
        \n<img src=\"../images/paylink-field-guards.png\" alt=\"Paylink Field Guards\"\
        \ width=\"50%\"/>\n\nTo determine the source value of the field, each field\
        \ name is searched in the order of\n\n- identifier\n- cardholder data such\
        \ as name\n- custom parameters\n- pass through data\n\nIf no field values\
        \ are found, the token request returns a D041 validation error.\n\n#### Authentication\
        \ and Validation\n\nWhen values are entered by the user, resultant comparisons\
        \ are performed by\n\n1. Transliteration of both the source value and entered\
        \ value. For example, names with accents (e.g. é will become e)\n2. Only Alphanumeric\
        \ values are retained any whitespace or special characters are ignored\n3.\
        \ Case is ignored\n\nShould all values match, the user is authenticated and\
        \ can continue to the payment form rendered by the Paylink server.\n\nOn successful\
        \ login, an event will be added to include that the access guard validated\
        \ access.\n\n#### Access-Key\n\nTo ensure that a user does not need to re-enter\
        \ these values multiple times, a cookie is pushed to the user’s\nbrowser with\
        \ an access-key digest value. This value will be presented to the server on\
        \ each refresh therefore\nallowing the guard to accept the call. Each value\
        \ is uniquely stored per merchant account and cannot be shared cross\nmerchant.\
        \ The lifetime of the cookie is set to 24 hours.\n\n#### Brute Force Prevention\n\
        \nTo prevent multiple calls hitting the server, attempting a brute force attack,\
        \ the login process\n\n1. is fronted by a contemporary web application firewall\n\
        2. creates an event for each token when access was denied\n3. should the number\
        \ of failed events breach more than 5 in 30 minutes, the token is locked for\
        \ an hour\n4. should the number of events breach more than 20 the token is\
        \ fully locked\n\n### Attachments\n\nAttachments can be included in the request\
        \ in 2 ways\n\n1. Via a data element direct in the request\n2. Via a URL upload\
        \ to a provided pre-signed URL\n\nThe decision of which option is dependent\
        \ on the size of the attachments. Should the attachment size be greater than\n\
        32kb a URL upload is required. Small attachments can be included in the JSON\
        \ request. This is to prevent our web\nfirewall from blocking your request\
        \ and to also ensure efficiency of larger file uploads.\n\nThere is a maximum\
        \ of 3 attachments that can be added to a request.\n\n```json\n    [{\n  \
        \    \"filename\": \"invoice1.pdf\",\n      \"mime-type\": \"application/pdf\"\
        \n    },{\n      \"filename\": \"invoice2.pdf\",\n      \"data\": \"b4sE64Enc0dEd...=\"\
        ,\n      \"mime-type\": \"application/pdf\"\n    }]\n```\n\n| Field     |\
        \ Type   | Usage    | Description                                        \
        \                                                                        \
        \                          |\n|-----------|--------|----------|------------------------------------------------------------------------------------------------------------------------------------------------------|\n\
        | filename  | string | Required | The name of the attachment normally taken\
        \ from the filename. You should not include the filename path as appropriate\
        \                                 |\n| data      | string | Optional | base64\
        \ encoding of the file if less than 32kb in size                         \
        \                                                                       |\n\
        | mime-type | string | Required | The mime type of the attachment as defined\
        \ in [RFC 9110](https://www.rfc-editor.org/rfc/rfc9110.html). Currently only\
        \ `application/pdf` is supported |\n\n\n#### Attachment Result\n\nA result\
        \ of an attachment specifies whether the attachment was successfully added\
        \ or whether a further upload is requried\n\n| Field  | Type   | Usage   \
        \ | Description                                                          \
        \                                                                        \
        \     |\n|--------|--------|----------|---------------------------------------------------------------------------------------------------------------------------------------------------|\n\
        | result | string | Required | `OK` should the file have uploaded or `UPLOAD`\
        \ if the file is required to be uploaded.                                \
        \                            |\n| name   | string | Required | The filename\
        \ that was specified in the upload process                               \
        \                                                              |\n| url  \
        \  | string | Optional | Should an upload be required, this URL is available\
        \ for an upload to be issued. The URL is only available for uploads for 24\
        \ hours from creation. |\n"
      operationId: TokenCreateBillPaymentRequest
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaylinkBillPaymentTokenRequest'
          text/xml:
            schema:
              $ref: '#/components/schemas/PaylinkBillPaymentTokenRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaylinkTokenCreated'
            text/xml:
              schema:
                $ref: '#/components/schemas/PaylinkTokenCreated'
          description: Response defining the result of the token request.
        "400":
          description: Bad Request. Should the incoming data not be validly determined.
        "401":
          description: Unauthorized. No api key has been provided and is required
            for this operation.
        "403":
          description: Forbidden. The api key was provided and understood but is either
            incorrect or does not have permission to access the account provided on
            the request.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity. Should a failure occur that prevents
            processing of the API call.
        "500":
          description: Server Error. The server was unable to complete the request.
      security:
      - cp-api-key: []
      summary: Create Bill Payment Paylink Token
      tags:
      - Paylink Api
      x-contentType: application/json
      x-accepts: application/json
  /paylink/create:
    post:
      description: Creates a Paylink token from the CityPay API.
      operationId: TokenCreateRequest
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaylinkTokenRequestModel'
          text/xml:
            schema:
              $ref: '#/components/schemas/PaylinkTokenRequestModel'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaylinkTokenCreated'
            text/xml:
              schema:
                $ref: '#/components/schemas/PaylinkTokenCreated'
          description: Response defining the result of the token request.
        "400":
          description: Bad Request. Should the incoming data not be validly determined.
        "401":
          description: Unauthorized. No api key has been provided and is required
            for this operation.
        "403":
          description: Forbidden. The api key was provided and understood but is either
            incorrect or does not have permission to access the account provided on
            the request.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity. Should a failure occur that prevents
            processing of the API call.
        "500":
          description: Server Error. The server was unable to complete the request.
      security:
      - cp-api-key: []
      summary: Create Paylink Token
      tags:
      - Paylink Api
      x-contentType: application/json
      x-accepts: application/json
  /paylink/token/changes:
    post:
      description: "Obtains any changes on Paylink Tokens since a given date and time.\
        \ This allows for a merchant to regularly check on \nactivity over a collection\
        \ of Paylink Tokens and to check on any events that may have occurred. If\
        \ a Token is `Closed` \nit is not considered.\n\nOnly statuses that have been\
        \ appended since the given date and time is returned.\n"
      operationId: TokenStatusChangesRequest
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaylinkTokenStatusChangeRequest'
          text/xml:
            schema:
              $ref: '#/components/schemas/PaylinkTokenStatusChangeRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaylinkTokenStatusChangeResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/PaylinkTokenStatusChangeResponse'
          description: Changes from tokens actioned after the pivotal date provided
            in the request.
        "400":
          description: Bad Request. Should the incoming data not be validly determined.
        "401":
          description: Unauthorized. No api key has been provided and is required
            for this operation.
        "403":
          description: Forbidden. The api key was provided and understood but is either
            incorrect or does not have permission to access the account provided on
            the request.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity. Should a failure occur that prevents
            processing of the API call.
        "500":
          description: Server Error. The server was unable to complete the request.
      security:
      - cp-api-key: []
      summary: Paylink Token Audit
      tags:
      - Paylink Api
      x-contentType: application/json
      x-accepts: application/json
  /paylink/{token}/adjustment:
    post:
      description: "Adjusts a TokenRequest's amount value when for instance \n\n1.\
        \ a Token is created and the shopping cart is updated\n2. an invoice is adjusted\
        \ either due to part payment or due to increased incurred costs.\n"
      operationId: TokenAdjustmentRequest
      parameters:
      - description: The token returned by the create token process.
        explode: false
        in: path
        name: token
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaylinkAdjustmentRequest'
          text/xml:
            schema:
              $ref: '#/components/schemas/PaylinkAdjustmentRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Acknowledgement'
            text/xml:
              schema:
                $ref: '#/components/schemas/Acknowledgement'
          description: Response defining the result of the token request.
        "400":
          description: Bad Request. Should the incoming data not be validly determined.
        "401":
          description: Unauthorized. No api key has been provided and is required
            for this operation.
        "403":
          description: Forbidden. The api key was provided and understood but is either
            incorrect or does not have permission to access the account provided on
            the request.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity. Should a failure occur that prevents
            processing of the API call.
        "500":
          description: Server Error. The server was unable to complete the request.
      security:
      - cp-api-key: []
      summary: Paylink Token Adjustment
      tags:
      - Paylink Api
      x-contentType: application/json
      x-accepts: application/json
  /paylink/{token}/close:
    put:
      description: |
        Marks a Paylink Token as closed. This closes the Token for any future action and the Token will not appear in any status
        request calls.
      operationId: TokenCloseRequest
      parameters:
      - description: The token returned by the create token process.
        explode: false
        in: path
        name: token
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Acknowledgement'
            text/xml:
              schema:
                $ref: '#/components/schemas/Acknowledgement'
          description: Confirms that the token was marked for closure.
        "400":
          description: Bad Request. Should the incoming data not be validly determined.
        "401":
          description: Unauthorized. No api key has been provided and is required
            for this operation.
        "403":
          description: Forbidden. The api key was provided and understood but is either
            incorrect or does not have permission to access the account provided on
            the request.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity. Should a failure occur that prevents
            processing of the API call.
        "500":
          description: Server Error. The server was unable to complete the request.
      security:
      - cp-api-key: []
      summary: Close Paylink Token
      tags:
      - Paylink Api
      x-accepts: application/json
  /paylink/{token}/reconciled:
    put:
      description: Marks a Paylink Token as reconciled when reconcilation is performed
        on the merchant's side.
      operationId: TokenReconciledRequest
      parameters:
      - description: The token returned by the create token process.
        explode: false
        in: path
        name: token
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Acknowledgement'
            text/xml:
              schema:
                $ref: '#/components/schemas/Acknowledgement'
          description: Confirms that the token was marked as reconciled.
        "400":
          description: Bad Request. Should the incoming data not be validly determined.
        "401":
          description: Unauthorized. No api key has been provided and is required
            for this operation.
        "403":
          description: Forbidden. The api key was provided and understood but is either
            incorrect or does not have permission to access the account provided on
            the request.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity. Should a failure occur that prevents
            processing of the API call.
        "500":
          description: Server Error. The server was unable to complete the request.
      security:
      - cp-api-key: []
      summary: Reconcile Paylink Token
      tags:
      - Paylink Api
      x-accepts: application/json
  /paylink/{token}/reopen:
    put:
      description: Allows for a Paylink Token to be reopened if a Token has been previously
        closed and payment has not yet been made.
      operationId: TokenReopenRequest
      parameters:
      - description: The token returned by the create token process.
        explode: false
        in: path
        name: token
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Acknowledgement'
            text/xml:
              schema:
                $ref: '#/components/schemas/Acknowledgement'
          description: Confirms that the token was reopened.
        "400":
          description: Bad Request. Should the incoming data not be validly determined.
        "401":
          description: Unauthorized. No api key has been provided and is required
            for this operation.
        "403":
          description: Forbidden. The api key was provided and understood but is either
            incorrect or does not have permission to access the account provided on
            the request.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity. Should a failure occur that prevents
            processing of the API call.
        "500":
          description: Server Error. The server was unable to complete the request.
      security:
      - cp-api-key: []
      summary: Reopen Paylink Token
      tags:
      - Paylink Api
      x-accepts: application/json
  /paylink/{token}/status:
    get:
      description: Obtains the full status of a given Paylink Token.
      operationId: TokenStatusRequest
      parameters:
      - description: The token returned by the create token process.
        explode: false
        in: path
        name: token
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaylinkTokenStatus'
            text/xml:
              schema:
                $ref: '#/components/schemas/PaylinkTokenStatus'
          description: The current status of the token.
        "400":
          description: Bad Request. Should the incoming data not be validly determined.
        "401":
          description: Unauthorized. No api key has been provided and is required
            for this operation.
        "403":
          description: Forbidden. The api key was provided and understood but is either
            incorrect or does not have permission to access the account provided on
            the request.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity. Should a failure occur that prevents
            processing of the API call.
        "500":
          description: Server Error. The server was unable to complete the request.
      security:
      - cp-api-key: []
      summary: Paylink Token Status
      tags:
      - Paylink Api
      x-accepts: application/json
  /v6/account-exists/{accountid}:
    get:
      description: |
        Checks that an account exists and is active by providing the account id as a url parameter.
      operationId: AccountExistsRequest
      parameters:
      - description: The account id that refers to the customer's account no. This
          value will have been provided when setting up the card holder account.
        explode: false
        in: path
        name: accountid
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exists'
            text/xml:
              schema:
                $ref: '#/components/schemas/Exists'
          description: A response model determining whether the account exists, if
            exists is true, a last modified date of the account is also provided.
        "400":
          description: Bad Request. Should the incoming data not be validly determined.
        "401":
          description: Unauthorized. No api key has been provided and is required
            for this operation.
        "403":
          description: Forbidden. The api key was provided and understood but is either
            incorrect or does not have permission to access the account provided on
            the request.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity. Should a failure occur that prevents
            processing of the API call.
        "500":
          description: Server Error. The server was unable to complete the request.
      security:
      - cp-api-key: []
      summary: Account Exists
      tags:
      - Card Holder Account Api
      x-accepts: application/json
  /v6/account/create:
    post:
      description: Creates a new card holder account and initialises the account ready
        for adding cards.
      operationId: AccountCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountCreate'
          text/xml:
            schema:
              $ref: '#/components/schemas/AccountCreate'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardHolderAccount'
            text/xml:
              schema:
                $ref: '#/components/schemas/CardHolderAccount'
          description: Provides an initialised account.
        "400":
          description: Bad Request. Should the incoming data not be validly determined.
        "401":
          description: Unauthorized. No api key has been provided and is required
            for this operation.
        "403":
          description: Forbidden. The api key was provided and understood but is either
            incorrect or does not have permission to access the account provided on
            the request.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity. Should a failure occur that prevents
            processing of the API call.
        "500":
          description: Server Error. The server was unable to complete the request.
      security:
      - cp-api-key: []
      summary: Account Create
      tags:
      - Card Holder Account Api
      x-contentType: application/json
      x-accepts: application/json
  /v6/account/{accountid}:
    delete:
      description: |
        Allows for the deletion of an account. The account will marked for deletion and subsequent purging. No further
        transactions will be alowed to be processed or actioned against this account.
      operationId: AccountDeleteRequest
      parameters:
      - description: The account id that refers to the customer's account no. This
          value will have been provided when setting up the card holder account.
        explode: false
        in: path
        name: accountid
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Acknowledgement'
            text/xml:
              schema:
                $ref: '#/components/schemas/Acknowledgement'
          description: An acknowledgment code of `001` that the card holder account
            has been marked for deletion.
        "400":
          description: Bad Request. Should the incoming data not be validly determined.
        "401":
          description: Unauthorized. No api key has been provided and is required
            for this operation.
        "403":
          description: Forbidden. The api key was provided and understood but is either
            incorrect or does not have permission to access the account provided on
            the request.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity. Should a failure occur that prevents
            processing of the API call.
        "500":
          description: Server Error. The server was unable to complete the request.
      security:
      - cp-api-key: []
      summary: Account Deletion
      tags:
      - Card Holder Account Api
      x-accepts: application/json
    get:
      description: "Allows for the retrieval of a card holder account for the given\
        \ `id`. Should duplicate accounts exist\nfor the same `id`, the first account\
        \ created with that `id` will be returned.\n\nThe account can be used for\
        \ tokenisation processing by listing all cards assigned to the account.\n\
        The returned cards will include all `active`, `inactive` and `expired` cards.\
        \ This can be used to \nenable a card holder to view their wallet and make\
        \ constructive choices on which card to use.\n"
      operationId: AccountRetrieveRequest
      parameters:
      - description: The account id that refers to the customer's account no. This
          value will have been provided when setting up the card holder account.
        explode: false
        in: path
        name: accountid
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardHolderAccount'
            text/xml:
              schema:
                $ref: '#/components/schemas/CardHolderAccount'
          description: A card holder account that matches the account id provided
            in the request.
        "400":
          description: Bad Request. Should the incoming data not be validly determined.
        "401":
          description: Unauthorized. No api key has been provided and is required
            for this operation.
        "403":
          description: Forbidden. The api key was provided and understood but is either
            incorrect or does not have permission to access the account provided on
            the request.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity. Should a failure occur that prevents
            processing of the API call.
        "500":
          description: Server Error. The server was unable to complete the request.
      security:
      - cp-api-key: []
      summary: Account Retrieval
      tags:
      - Card Holder Account Api
      x-accepts: application/json
  /v6/account/{accountid}/card/{cardId}:
    delete:
      description: |
        Deletes a card from the account. The card will be marked for deletion before a subsequent
        purge will clear the card permanently.
      operationId: AccountCardDeleteRequest
      parameters:
      - description: The account id that refers to the customer's account no. This
          value will have been provided when setting up the card holder account.
        explode: false
        in: path
        name: accountid
        required: true
        schema:
          type: string
        style: simple
      - description: The id of the card that is presented by a call to retrieve a
          card holder account.
        explode: false
        in: path
        name: cardId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Acknowledgement'
            text/xml:
              schema:
                $ref: '#/components/schemas/Acknowledgement'
          description: Acknowledges the card has been requested for deletion. A response
            code of `001` is returned if the account is available for deletion otherwise
            an error code is returned.
        "400":
          description: Bad Request. Should the incoming data not be validly determined.
        "401":
          description: Unauthorized. No api key has been provided and is required
            for this operation.
        "403":
          description: Forbidden. The api key was provided and understood but is either
            incorrect or does not have permission to access the account provided on
            the request.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity. Should a failure occur that prevents
            processing of the API call.
        "500":
          description: Server Error. The server was unable to complete the request.
      security:
      - cp-api-key: []
      summary: Card Deletion
      tags:
      - Card Holder Account Api
      x-accepts: application/json
  /v6/account/{accountid}/card/{cardId}/status:
    post:
      description: "Updates the status of a card for processing. The following values\
        \ are available\n\n| Status | Description | \n|--------|-------------|\n|\
        \ Active | The card is active for processing and can be used for charging\
        \ against with a valid token |\n| Inactive | The card is inactive for processing\
        \ and cannot be used for processing, it will require reactivation before being\
        \ used to charge |\n| Expired | The card has expired either due to the expiry\
        \ date no longer being valid or due to a replacement card being issued |\n"
      operationId: AccountCardStatusRequest
      parameters:
      - description: The account id that refers to the customer's account no. This
          value will have been provided when setting up the card holder account.
        explode: false
        in: path
        name: accountid
        required: true
        schema:
          type: string
        style: simple
      - description: The id of the card that is presented by a call to retrieve a
          card holder account.
        explode: false
        in: path
        name: cardId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardStatus'
          text/xml:
            schema:
              $ref: '#/components/schemas/CardStatus'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Acknowledgement'
            text/xml:
              schema:
                $ref: '#/components/schemas/Acknowledgement'
          description: Acknowledges the card status has changed, returning a response
            code of `001` for a valid change or `000` for a non valid change.
        "400":
          description: Bad Request. Should the incoming data not be validly determined.
        "401":
          description: Unauthorized. No api key has been provided and is required
            for this operation.
        "403":
          description: Forbidden. The api key was provided and understood but is either
            incorrect or does not have permission to access the account provided on
            the request.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity. Should a failure occur that prevents
            processing of the API call.
        "500":
          description: Server Error. The server was unable to complete the request.
      security:
      - cp-api-key: []
      summary: Card Status
      tags:
      - Card Holder Account Api
      x-contentType: application/json
      x-accepts: application/json
  /v6/account/{accountid}/contact:
    post:
      description: Allows for the ability to change the contact details for an account.
      operationId: AccountChangeContactRequest
      parameters:
      - description: The account id that refers to the customer's account no. This
          value will have been provided when setting up the card holder account.
        explode: false
        in: path
        name: accountid
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContactDetails'
          text/xml:
            schema:
              $ref: '#/components/schemas/ContactDetails'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardHolderAccount'
            text/xml:
              schema:
                $ref: '#/components/schemas/CardHolderAccount'
          description: A revised account with the new details set.
        "400":
          description: Bad Request. Should the incoming data not be validly determined.
        "401":
          description: Unauthorized. No api key has been provided and is required
            for this operation.
        "403":
          description: Forbidden. The api key was provided and understood but is either
            incorrect or does not have permission to access the account provided on
            the request.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity. Should a failure occur that prevents
            processing of the API call.
        "500":
          description: Server Error. The server was unable to complete the request.
      security:
      - cp-api-key: []
      summary: Contact Details Update
      tags:
      - Card Holder Account Api
      x-contentType: application/json
      x-accepts: application/json
  /v6/account/{accountid}/register:
    post:
      description: "Allows for a card to be registered for the account. The card will\
        \ be added for future \nprocessing and will be available as a tokenised value\
        \ for future processing.\n\nThe card will be validated for\n\n0. Being a valid\
        \ card number (luhn check)\n0. Having a valid expiry date\n0. Being a valid\
        \ bin value.\n"
      operationId: AccountCardRegisterRequest
      parameters:
      - description: The account id that refers to the customer's account no. This
          value will have been provided when setting up the card holder account.
        explode: false
        in: path
        name: accountid
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterCard'
          text/xml:
            schema:
              $ref: '#/components/schemas/RegisterCard'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardHolderAccount'
            text/xml:
              schema:
                $ref: '#/components/schemas/CardHolderAccount'
          description: A successfully registered card provides a reload of the account
            including the new card.
        "400":
          description: Bad Request. Should the incoming data not be validly determined.
        "401":
          description: Unauthorized. No api key has been provided and is required
            for this operation.
        "403":
          description: Forbidden. The api key was provided and understood but is either
            incorrect or does not have permission to access the account provided on
            the request.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity. Should a failure occur that prevents
            processing of the API call.
        "500":
          description: Server Error. The server was unable to complete the request.
      security:
      - cp-api-key: []
      summary: Card Registration
      tags:
      - Card Holder Account Api
      x-contentType: application/json
      x-accepts: application/json
  /v6/account/{accountid}/status:
    post:
      description: |
        Updates the status of an account. An account can have the following statuses applied

        | Status | Description |
        |--------|-------------|
        | Active | The account is active for processing |
        | Disabled | The account has been disabled and cannot be used for processing. The account will require reactivation to continue procesing |
      operationId: AccountStatusRequest
      parameters:
      - description: The account id that refers to the customer's account no. This
          value will have been provided when setting up the card holder account.
        explode: false
        in: path
        name: accountid
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountStatus'
          text/xml:
            schema:
              $ref: '#/components/schemas/AccountStatus'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Acknowledgement'
            text/xml:
              schema:
                $ref: '#/components/schemas/Acknowledgement'
          description: An acknowledgment that the card holder account status has been
            updated.</br></br>A response code of `001` is returned if the request
            was accepted or no change required.</br></br>A response code of `000`
            is returned if the request contains invalid data.
        "400":
          description: Bad Request. Should the incoming data not be validly determined.
        "401":
          description: Unauthorized. No api key has been provided and is required
            for this operation.
        "403":
          description: Forbidden. The api key was provided and understood but is either
            incorrect or does not have permission to access the account provided on
            the request.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity. Should a failure occur that prevents
            processing of the API call.
        "500":
          description: Server Error. The server was unable to complete the request.
      security:
      - cp-api-key: []
      summary: Account Status
      tags:
      - Card Holder Account Api
      x-contentType: application/json
      x-accepts: application/json
  /v6/acl/check:
    post:
      description: |
        Allows the checking of IP addresses against configured ACLs. Requests can perform a lookup of addresses in subnets and
        services such as AWS or Azure to check that those addresses are listed in the ACLs.
      operationId: AclCheckRequest
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AclCheckRequest'
          text/xml:
            schema:
              $ref: '#/components/schemas/AclCheckRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AclCheckResponseModel'
            text/xml:
              schema:
                $ref: '#/components/schemas/AclCheckResponseModel'
          description: Response to the ACL Check request.
        "400":
          description: Bad Request. Should the incoming data not be validly determined.
        "401":
          description: Unauthorized. No api key has been provided and is required
            for this operation.
        "403":
          description: Forbidden. The api key was provided and understood but is either
            incorrect or does not have permission to access the account provided on
            the request.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity. Should a failure occur that prevents
            processing of the API call.
        "500":
          description: Server Error. The server was unable to complete the request.
      security:
      - cp-api-key: []
      summary: ACL Check Request
      tags:
      - Operational Functions Api
      x-contentType: application/json
      x-accepts: application/json
  /v6/authorise:
    post:
      description: "An authorisation process performs a standard transaction authorisation\
        \ based on the provided parameters of its request.\nThe CityPay gateway will\
        \ route your transaction via an Acquiring bank for subsequent authorisation\
        \ to the appropriate card \nschemes such as Visa or MasterCard.\n\nThe authorisation\
        \ API should be used for server environments to process transactions on demand\
        \ and in realtime. \n\nThe authorisation API can be used for multiple types\
        \ of transactions including E-commerce, mail order, telephone order,\ncustomer\
        \ present (keyed), continuous authority, pre-authorisation and others. CityPay\
        \ will configure your account for \nthe appropriate coding and this will perform\
        \ transparently by the gateway. \n\nData properties that are required, may\
        \ depend on the environment you are conducting payment for. Our API aims to\
        \ be\n flexible enough to cater for these structures. Our integration team\
        \ will aid you in providing the necessary data to \n transact. \n \n \n##\
        \ E-commerce workflows\n \nFor E-commerce transactions requiring 3DS, the\
        \ API contains a fully accredited in built mechanism to handle authentication.\n\
        \nThe Api and gateway has been accredited extensively with both Acquirers\
        \ and Card Schemes to simplify the nature of these calls\ninto a simple structure\
        \ for authentication, preventing integrators from performing lengthy and a\
        \ costly accreditations with\nVisa and MasterCard.\n\n3D-secure has been around\
        \ for a number of years and aims to shift the liability of a transaction away\
        \ from a merchant back\nto the card holder. A *liability shift* determines\
        \ whether a card holder can charge back a transaction as unknown. Effectively\n\
        the process asks for a card holder to authenticate the transaction prior to\
        \ authorisation producing a Cardholder \nverification value (CAVV) and ecommerce\
        \ indicator (ECI) as evidence of authorisation.\n\n3DS version 1 has now been\
        \ replaced by 3DS version 2 to provide secure customer authentication (SCA)\
        \ in line with EU regulation.\n3DSv2 is being phased out and any accounts\
        \ using version 1 of the protocol is expected to be migrated by March 2022.\
        \ \n\nAny new integrations should only consider 3DSv2 flows. \n\n### 3DSv2\n\
        \n```json\n{ \n  \"RequestChallenged\": {\n    \"acsurl\": \"https://bank.com/3DS/ACS\"\
        ,\n    \"creq\": \"SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN00...\"\
        ,\n    \"merchantid\": 12345,\n    \"transno\": 1,\n    \"threedserver_trans_id\"\
        : \"d652d8d2-d74a-4264-a051-a7862b10d5d6\"\n  }               \n}\n```\n\n\
        ```xml\n<RequestChallenged>\n  <acsurl>https://bank.com/3DS/ACS</acsurl>\n\
        \  <creq>SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN00...</creq>\n\
        \  <merchantid>12345</merchantid>\n  <transno>1</transno>\n  <threedserver_trans_id>d652d8d2-d74a-4264-a051-a7862b10d5d6</threedserver_trans_id>\n\
        </RequestChallenged>\n```\n\nCityPay support 3DS version 2.1 for Verified\
        \ by Visa, MasterCard Identity Check and American Express SafeKey 2.1. Version\n\
        2.2 is currently in development however this will be a seamless upgrade for\
        \ all integrations.\n\n#### 3-D Secure - None\n\n![3DSv2 Frctionless Flow](/images/3dsv2-no3d.png)\n\
        \nA basic flow may involve no 3-D secure processing. This could happen if\
        \ there is no ability to perform authentication.\nAn enrollment check may\
        \ apply an \"attempted\" resolution to processing. In this instance a transaction\
        \ may not meet any\nliability shift. A transaction may result in a decline\
        \ due to this. We are also able to prevent from transactions being\npresented\
        \ for authorisation if this occurs. \n\n#### 3-D Secure - Frictionless\n\n\
        ![3DSv2 Frctionless Flow](/images/3dsv2-frictionless.png)\n\nE-commerce transactions\
        \ supporting 3DSv2 can benefit from seamlessly authenticated transactions\
        \ which may perform a \n\"frictionless\" flow. This method will authenticate\
        \ low risk transactions with minimal impact to a \nstandard authorisation\
        \ flow. Our API simply performs this on behalf of you the developer, the merchant\
        \ and cardholder.\n\nNo redirection occurs and hence the flow is called frictionless\
        \ and will appear as though a simple transaction \nauthorisation has occurred.\n\
        \n#### 3-D Secure - Challenge\n\n![3DSv2 Frctionless Flow](/images/3dsv2-challenge.png)\n\
        \nA transaction that is deemed as higher risk my be \"challenged\". In this\
        \ instance, the API will return a\n[request challenge](#requestchallenged)\
        \ which will require your integration to forward the cardholder's browser\
        \ to the \ngiven [ACS url](#acsurl). This should be performed by posting the\
        \ [creq](#creq) value (the challenge request value). \n\nOnce complete, the\
        \ ACS will have already been in touch with our servers by sending us a result\
        \ of the authentication\nknown as `RReq`.\n\nTo maintain session state, a\
        \ parameter `threeDSSessionData` can be posted to the ACS url and will be\
        \ returned alongside \nthe `CRes` value. This will ensure that any controller\
        \ code will be able to isolate state between calls. This field\nis to be used\
        \ by your own systems rather than ours and may be any value which can uniquely\
        \ identify your cardholder's\nsession. As an option, we do provide a `threedserver_trans_id`\
        \ value in the `RequestChallenged` packet which can be used\nfor the `threeDSSessionData`\
        \ value as it is used to uniquely identify the 3D-Secure session. \n\nA common\
        \ method of maintaining state is to provide a session related query string\
        \ value in the `merchant_termurl` value\n(also known as the `notificationUrl`).\
        \ For example providing a url of `https://mystore.com/checkout?token=asny2348w4561..`\n\
        could return the user directly back to their session with your environment.\n\
        \nOnce you have received a `cres` post from the ACS authentication service,\
        \ this should be POSTed to the [cres](#cres) \nendpoint to perform full authorisation\
        \ processing. \n\nPlease note that the CRes returned to us is purely a mechanism\
        \ of acknowledging that transactions should be committed for\nauthorisation.\
        \ The ACS by this point will have sent us the verification value (CAVV) to\
        \ perform a liability shift. The CRes\nvalue will be validated for receipt\
        \ of the CAVV and subsequently may return response codes illustrating this.\
        \ \n\nTo forward the user to the ACS, we recommend a simple auto submit HTML\
        \ form.\n\n> Simple auto submit HTML form\n\n```html\n<html lang=\"en\">\n\
        <head>\n        <title>Forward to ACS</title>\n<script type=\"text/javascript\"\
        >\n        function onLoadEvent() { \n            document.acs.submit(); \n\
        \        }\n        </script>\n        <noscript>You will require JavaScript\
        \ to be enabled to complete this transaction</noscript>\n    </head>\n   \
        \ <body onload=\"onLoadEvent();\">\n        <form name=\"acs\" action=\"{{ACSURL\
        \ from Response}}\" method=\"POST\">\n            <input type=\"hidden\" name=\"\
        creq\" value=\"{{CReq Packet from Response}}\" />\n            <input type=\"\
        hidden\" name=\"threeDSSessionData\" value=\"{{session-identifier}}\" />\n\
        \        </form>\n    </body>\n</html>\n```\n\nA full ACS test suite is available\
        \ for 3DSv2 testing.\n        \n### Testing 3DSv2 Integrations\n\nThe API\
        \ provides a mock 3dsV2 handler which performs a number of scenarios based\
        \ on the value of the CSC in the request.\n\n| CSC Value | Behaviour |\n|-----------|-----------|\n\
        | 731       | Frictionless processing - Not authenticated |\n| 732       |\
        \ Frictionless processing - Account verification count not be performed |\
        \        \n| 733       | Frictionless processing - Verification Rejected |\
        \        \n| 741       | Frictionless processing - Attempts Processing | \
        \       \n| 750       | Frictionless processing - Authenticated  |       \
        \ \n| 761       | Triggers an error message |  \n| Any       | Challenge Request\
        \ |       \n\n\n#### 3DSv1\n\n**Please note that 3DSv1 should now be considered\
        \ as deprecated.**\n\n```json\n{ \n  \"AuthenticationRequired\": {\n    \"\
        acsurl\": \"https://bank.com/3DS/ACS\",\n    \"pareq\": \"SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN00...\"\
        ,\n    \"md\": \"WQgZXZlcnl0aGluZyBiZW\"\n  }               \n}\n```\n\n```xml\n\
        <AuthenticationRequired>\n <acsurl>https://bank.com/3DS/ACS</acsurl>\n <pareq>SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN00...</pareq>\n\
        \ <md>WQgZXZlcnl0aGluZyBiZW</md>\n</AuthenticationRequired>\n```\n\nFor E-commerce\
        \ transactions requiring 3DSv1, the API contains a built in MPI which will\
        \ be called to check whether the\ncard is participating in 3DSv1 with Verified\
        \ by Visa or MasterCard SecureCode. We only support Amex SafeKey with 3DSv2.\
        \ Should the card be enrolled, a payer\nrequest (PAReq) value will be created\
        \ and returned back as an [authentication required](#authenticationrequired)\
        \ response object.\n\nYour system will need to process this authentication\
        \ packet and forward the user's browser to an authentication server (ACS)\n\
        to gain the user's authentication. Once complete, the ACS will produce a HTTP\
        \ `POST` call back to the URL supplied in\nthe authentication request as `merchant_termurl`.\
        \ This URL should behave as a controller and handle the post data from the\n\
        ACS and on a forked server to server HTTP request, forward this data to the\
        \ [pares authentication url](#pares) for\nsubsequent authorisation processing.\
        \ You may prefer to provide a processing page whilst this is being processed.\n\
        Processing with our systems should be relatively quick and be between 500ms\
        \ - 3000ms however it is desirable to let\nthe user see that something is\
        \ happening rather than a pending browser.\n\nThe main reason for ensuring\
        \ that this controller is two fold:\n\n1. We are never in control of the user's\
        \ browser in a server API call\n2. The controller is actioned on your site\
        \ to ensure that any post actions from authorisation can be executed in real\
        \ time\n\nTo forward the user to the ACS, we recommend a simple auto submit\
        \ HTML form.\n\n> Simple auto submit HTML form\n\n```html\n<html lang=\"en\"\
        >\n<head>\n        <title>Forward to ACS</title>\n<script type=\"text/javascript\"\
        >\n        function onLoadEvent() { \n            document.acs.submit(); \n\
        \        }\n        </script>\n        <noscript>You will require JavaScript\
        \ to be enabled to complete this transaction</noscript>\n    </head>\n   \
        \ <body onload=\"onLoadEvent();\">\n        <form name=\"acs\" action=\"{{ACSURL\
        \ from Response}}\" method=\"POST\">\n            <input type=\"hidden\" name=\"\
        PaReq\" value=\"{{PaReq Packet from Response}}\" />\n            <input type=\"\
        hidden\" name=\"TermUrl\" value=\"{{Your Controller}}\" />\n            <input\
        \ type=\"hidden\" name=\"MD\" value=\"{{MD From Response}}\" />\n        </form>\n\
        \    </body>\n</html>\n```\n\nPlease note that 3DSv1 is being phased out due\
        \ to changes to strong customer authentication mechanisms. 3DSv2 addresses\n\
        this and will solidify the authorisation and confirmation process.\n\nWe provide\
        \ a Test ACS for full 3DSv1 integration testing that simulates an ACS.\n"
      operationId: AuthorisationRequest
      requestBody:
        content:
          application/json:
            examples:
              example1:
                externalValue: AuthorisationRequest-example1.json
                summary: Basic capture call for a merchant with a given identifier
            schema:
              $ref: '#/components/schemas/AuthRequest'
          text/xml:
            examples:
              example1:
                externalValue: AuthorisationRequest-example1.xml
                summary: Basic capture call for a merchant with a given identifier
            schema:
              $ref: '#/components/schemas/AuthRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Decision'
            text/xml:
              schema:
                $ref: '#/components/schemas/Decision'
          description: A decision made by the result of processing.
        "400":
          description: Bad Request. Should the incoming data not be validly determined.
        "401":
          description: Unauthorized. No api key has been provided and is required
            for this operation.
        "403":
          description: Forbidden. The api key was provided and understood but is either
            incorrect or does not have permission to access the account provided on
            the request.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity. Should a failure occur that prevents
            processing of the API call.
        "500":
          description: Server Error. The server was unable to complete the request.
      security:
      - cp-api-key: []
      summary: Authorisation
      tags:
      - Authorisation and Payment Api
      x-contentType: application/json
      x-accepts: application/json
  /v6/batch/process:
    post:
      description: |
        A batch process request is used to start the batch process workflow by uploading batch
        data and initialising a new batch for processing. Once validated the batch will be queued
        for processing and further updates can be received by a subsequent call to retrieve the batch
        status.
      operationId: BatchProcessRequest
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProcessBatchRequest'
          text/xml:
            schema:
              $ref: '#/components/schemas/ProcessBatchRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessBatchResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/ProcessBatchResponse'
          description: Request to process a batch provided in the request.
        "400":
          description: Bad Request. Should the incoming data not be validly determined.
        "401":
          description: Unauthorized. No api key has been provided and is required
            for this operation.
        "403":
          description: Forbidden. The api key was provided and understood but is either
            incorrect or does not have permission to access the account provided on
            the request.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity. Should a failure occur that prevents
            processing of the API call.
        "500":
          description: Server Error. The server was unable to complete the request.
      security:
      - cp-api-key: []
      summary: Batch Process Request
      tags:
      - Batch Processing Api
      x-contentType: application/json
      x-accepts: application/json
  /v6/batch/retrieve:
    post:
      description: The operation is used to retrieve a report of the result of a batch
        process.
      operationId: BatchReportRequest
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchReportRequest'
          text/xml:
            schema:
              $ref: '#/components/schemas/BatchReportRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchReportResponseModel'
            text/xml:
              schema:
                $ref: '#/components/schemas/BatchReportResponseModel'
          description: The report for a given batch.
        "400":
          description: Bad Request. Should the incoming data not be validly determined.
        "401":
          description: Unauthorized. No api key has been provided and is required
            for this operation.
        "403":
          description: Forbidden. The api key was provided and understood but is either
            incorrect or does not have permission to access the account provided on
            the request.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity. Should a failure occur that prevents
            processing of the API call.
        "500":
          description: Server Error. The server was unable to complete the request.
      security:
      - cp-api-key: []
      summary: BatchReportRequest
      tags:
      - Batch Processing Api
      x-contentType: application/json
      x-accepts: application/json
  /v6/batch/status:
    post:
      description: The operation is used to retrieve the status of a batch process.
      operationId: CheckBatchStatusRequest
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CheckBatchStatus'
          text/xml:
            schema:
              $ref: '#/components/schemas/CheckBatchStatus'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckBatchStatusResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/CheckBatchStatusResponse'
          description: The status of batches provided in the request.
        "400":
          description: Bad Request. Should the incoming data not be validly determined.
        "401":
          description: Unauthorized. No api key has been provided and is required
            for this operation.
        "403":
          description: Forbidden. The api key was provided and understood but is either
            incorrect or does not have permission to access the account provided on
            the request.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity. Should a failure occur that prevents
            processing of the API call.
        "500":
          description: Server Error. The server was unable to complete the request.
      security:
      - cp-api-key: []
      summary: CheckBatchStatus
      tags:
      - Batch Processing Api
      x-contentType: application/json
      x-accepts: application/json
  /v6/bin:
    post:
      description: "A bin range lookup service can be used to check what a card is,\
        \ as seen by the gateway. Each card number's \nleading digits help to identify\
        \ who\n\n0. the card scheme is such as Visa, MasterCard or American Express\
        \ \n1. the issuer of the card, such as the bank\n2. it's country of origin\n\
        3. it's currency of origin\n\nOur gateway has 450 thousand possible bin ranges\
        \ and uses a number of algorithms to determine the likelihood of the bin\n\
        data. The request requires a bin value of between 6 and 12 digits. The more\
        \ digits provided may ensure a more accurate\nresult.\n"
      operationId: BinRangeLookupRequest
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BinLookup'
          text/xml:
            schema:
              $ref: '#/components/schemas/BinLookup'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bin'
            text/xml:
              schema:
                $ref: '#/components/schemas/Bin'
          description: A result of the bin lookup request returning a bin object determined
            by the gateway service.
        "400":
          description: Bad Request. Should the incoming data not be validly determined.
        "401":
          description: Unauthorized. No api key has been provided and is required
            for this operation.
        "403":
          description: Forbidden. The api key was provided and understood but is either
            incorrect or does not have permission to access the account provided on
            the request.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity. Should a failure occur that prevents
            processing of the API call.
        "500":
          description: Server Error. The server was unable to complete the request.
      security:
      - cp-api-key: []
      summary: Bin Lookup
      tags:
      - Authorisation and Payment Api
      x-contentType: application/json
      x-accepts: application/json
  /v6/capture:
    post:
      description: "_The capture process only applies to transactions which have been\
        \ pre-authorised only._ \n\nThe capture process will ensure\nthat a transaction\
        \ will now settle. It is expected that a capture call will be provided within\
        \ 3 days or\na maximum of 7 days.\n\nA capture request is provided to confirm\
        \ that you wish the transaction to be settled. This request can\ncontain a\
        \ final amount for the transaction which is different to the original authorisation\
        \ amount. This\nmay be useful in a delayed system process such as waiting\
        \ for stock to be ordered, confirmed, or services\nprovided before the final\
        \ cost is known.\n\nWhen a transaction is completed, a new authorisation code\
        \ may be created and a new confirmation\ncan be sent online to the acquiring\
        \ bank.\n\nOnce the transaction has been processed. A standard [`Acknowledgement`](#acknowledgement)\
        \ will be returned,\noutlining the result of the transaction. On a successful\
        \ completion process, the transaction will\nbe available for the settlement\
        \ and completed at the end of the day.\n"
      operationId: CaptureRequest
      requestBody:
        content:
          application/json:
            examples:
              example1:
                externalValue: CaptureRequest-example1.json
                summary: Basic capture call for a merchant with a given identifier
              example3:
                externalValue: CaptureRequest-example3.json
                summary: Capture call for a merchant with identifier and airline data
                  once a ticket has been issued
              example2:
                externalValue: CaptureRequest-example2.json
                summary: Basic capture call for a merchant with a transno and final
                  amount
            schema:
              $ref: '#/components/schemas/CaptureRequest'
          text/xml:
            examples:
              example1:
                externalValue: CaptureRequest-example1.xml
                summary: Basic capture call for a merchant with a given identifier
              example3:
                externalValue: CaptureRequest-example3.xml
                summary: Capture call for a merchant with identifier and airline data
                  once a ticket has been issued
              example2:
                externalValue: CaptureRequest-example2.xml
                summary: Basic capture call for a merchant with a transno and final
                  amount
            schema:
              $ref: '#/components/schemas/CaptureRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Acknowledgement'
            text/xml:
              schema:
                $ref: '#/components/schemas/Acknowledgement'
          description: A result and acknowledgement of the capture request. The response
            will return a `000/001` response on a successful capture otherwise an
            error code response explaining the error.
        "400":
          description: Bad Request. Should the incoming data not be validly determined.
        "401":
          description: Unauthorized. No api key has been provided and is required
            for this operation.
        "403":
          description: Forbidden. The api key was provided and understood but is either
            incorrect or does not have permission to access the account provided on
            the request.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity. Should a failure occur that prevents
            processing of the API call.
        "500":
          description: Server Error. The server was unable to complete the request.
      security:
      - cp-api-key: []
      summary: Capture
      tags:
      - Authorisation and Payment Api
      x-contentType: application/json
      x-accepts: application/json
  /v6/charge:
    post:
      description: "A charge process obtains an authorisation using a tokenised value\
        \ which represents a stored card \non a card holder account. \nA card must\
        \ previously be registered by calling `/account-register-card` with the card\
        \ details \nor retrieved using `/account-retrieve`\n\nTokens are generated\
        \ whenever a previously registered list of cards are retrieved. Each token\
        \ has, by design a \nrelatively short time to live of 30 minutes. This is\
        \ both to safe guard the merchant and card holder from \nreplay attacks. Tokens\
        \ are also restricted to your account, preventing malicious actors from stealing\
        \ details\nfor use elsewhere.  \n\nIf a token is reused after it has expired\
        \ it will be rejected and a new token will be required.\n \nTokenisation can\
        \ be used for\n \n- repeat authorisations on a previously stored card\n- easy\
        \ authorisations just requiring CSC values to be entered\n- can be used for\
        \ credential on file style payments\n- can require full 3-D Secure authentication\
        \ to retain the liability shift\n- wallet style usage\n \n\n_Should an account\
        \ be used with 3DSv2, the card holder name should also be stored alongside\
        \ the card as this is a\nrequired field with both Visa and MasterCard for\
        \ risk analysis._.\n"
      operationId: ChargeRequest
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChargeRequest'
          text/xml:
            schema:
              $ref: '#/components/schemas/ChargeRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Decision'
            text/xml:
              schema:
                $ref: '#/components/schemas/Decision'
          description: A decision met by the result of the charge.
        "400":
          description: Bad Request. Should the incoming data not be validly determined.
        "401":
          description: Unauthorized. No api key has been provided and is required
            for this operation.
        "403":
          description: Forbidden. The api key was provided and understood but is either
            incorrect or does not have permission to access the account provided on
            the request.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity. Should a failure occur that prevents
            processing of the API call.
        "500":
          description: Server Error. The server was unable to complete the request.
      security:
      - cp-api-key: []
      summary: Charge
      tags:
      - Card Holder Account Api
      x-contentType: application/json
      x-accepts: application/json
  /v6/cres:
    post:
      description: "The CRes request performs authorisation processing once a challenge\
        \ request has been completed\nwith an Authentication Server (ACS). This challenge\
        \ response contains confirmation that will\nallow the API systems to return\
        \ an authorisation response based on the result. Our systems will \nknow out\
        \ of band via an `RReq` call by the ACS to notify us if the liability shift\
        \ has been issued.\n\nAny call to the CRes operation will require a previous\
        \ authorisation request and cannot be called \non its own without a previous\
        \ [request challenge](#requestchallenged) being obtained.\n"
      operationId: CResRequest
      requestBody:
        content:
          application/json:
            examples:
              example1:
                externalValue: CResRequest-example1.json
                summary: PaRes example request
            schema:
              $ref: '#/components/schemas/CResAuthRequest'
          text/xml:
            examples:
              example1:
                externalValue: CResRequest-example1.xml
                summary: PaRes example request
            schema:
              $ref: '#/components/schemas/CResAuthRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/AuthResponse'
          description: A result of processing the 3DSv2 authorisation data.
        "400":
          description: Bad Request. Should the incoming data not be validly determined.
        "401":
          description: Unauthorized. No api key has been provided and is required
            for this operation.
        "403":
          description: Forbidden. The api key was provided and understood but is either
            incorrect or does not have permission to access the account provided on
            the request.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity. Should a failure occur that prevents
            processing of the API call.
        "500":
          description: Server Error. The server was unable to complete the request.
      security:
      - cp-api-key: []
      summary: CRes
      tags:
      - Authorisation and Payment Api
      x-contentType: application/json
      x-accepts: application/json
  /v6/merchants/{clientid}:
    get:
      description: |
        An operational request to list current merchants for a client.

        ### Sorting

        Sorting can be performed by include a query parameter i.e. `/merchants/?sort=merchantid`

        Fields that can be sorted are `merchantid` or `name`.
      operationId: ListMerchantsRequest
      parameters:
      - description: The client id to return merchants for, specifying "default" will
          use the value in your api key.
        explode: false
        in: path
        name: clientid
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListMerchantsResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/ListMerchantsResponse'
          description: A list of merchants that are configured against the client
            id.
        "400":
          description: Bad Request. Should the incoming data not be validly determined.
        "401":
          description: Unauthorized. No api key has been provided and is required
            for this operation.
        "403":
          description: Forbidden. The api key was provided and understood but is either
            incorrect or does not have permission to access the account provided on
            the request.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity. Should a failure occur that prevents
            processing of the API call.
        "500":
          description: Server Error. The server was unable to complete the request.
      security:
      - cp-api-key: []
      summary: List Merchants Request
      tags:
      - Operational Functions Api
      x-accepts: application/json
  /v6/pares:
    post:
      description: "The Payer Authentication Response (PaRes) is an operation after\
        \ the result of authentication \n being performed. The request uses an encoded\
        \ packet of authentication data to \nnotify us of the completion of the liability\
        \ shift. Once this value has been unpacked and its\nsignature is checked,\
        \ our systems will proceed to authorisation processing.  \n\nAny call to the\
        \ PaRes operation will require a previous authorisation request and cannot\
        \ be called \non its own without a previous [authentication required](#authenticationrequired)\
        \  being obtained.\n"
      operationId: PaResRequest
      requestBody:
        content:
          application/json:
            examples:
              example1:
                externalValue: PaResRequest-example1.json
                summary: PaRes example request
            schema:
              $ref: '#/components/schemas/PaResAuthRequest'
          text/xml:
            examples:
              example1:
                externalValue: PaResRequest-example1.xml
                summary: PaRes example request
            schema:
              $ref: '#/components/schemas/PaResAuthRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/AuthResponse'
          description: A result of processing the 3DSv1 authorisation data.
        "400":
          description: Bad Request. Should the incoming data not be validly determined.
        "401":
          description: Unauthorized. No api key has been provided and is required
            for this operation.
        "403":
          description: Forbidden. The api key was provided and understood but is either
            incorrect or does not have permission to access the account provided on
            the request.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity. Should a failure occur that prevents
            processing of the API call.
        "500":
          description: Server Error. The server was unable to complete the request.
      security:
      - cp-api-key: []
      summary: PaRes
      tags:
      - Authorisation and Payment Api
      x-contentType: application/json
      x-accepts: application/json
  /v6/ping:
    post:
      description: "A ping request which performs a connection and authentication\
        \ test to the CityPay API server. The request\nwill return a standard Acknowledgement\
        \ with a response code `044` to signify a successful\nping.\n\nThe ping call\
        \ is useful to confirm that you will be able to access \nthe API from behind\
        \ any firewalls and that the permission\nmodel is granting access from your\
        \ source.\n"
      operationId: PingRequest
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ping'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Ping'
          text/xml:
            schema:
              $ref: '#/components/schemas/Ping'
        required: true
      responses:
        "200":
          content:
            application/x-www-form-urlencoded:
              schema:
                $ref: '#/components/schemas/Acknowledgement'
            application/json:
              schema:
                $ref: '#/components/schemas/Acknowledgement'
            text/xml:
              schema:
                $ref: '#/components/schemas/Acknowledgement'
          description: A result of the ping request, returning on 044 response code
            on successful receipt of the ping request.
        "400":
          description: Bad Request. Should the incoming data not be validly determined.
        "401":
          description: Unauthorized. No api key has been provided and is required
            for this operation.
        "403":
          description: Forbidden. The api key was provided and understood but is either
            incorrect or does not have permission to access the account provided on
            the request.
        "422":
          content:
            application/x-www-form-urlencoded:
              schema:
                $ref: '#/components/schemas/Error'
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity. Should a failure occur that prevents
            processing of the API call.
        "500":
          description: Server Error. The server was unable to complete the request.
      security:
      - cp-api-key: []
      - cp-domain-key: []
      summary: Ping Request
      tags:
      - Operational Functions Api
      x-contentType: application/json
      x-accepts: application/json
  /v6/refund:
    post:
      description: "A refund request which allows for the refunding of a previous\
        \ transaction up \nand to the amount of the original sale. A refund will be\
        \ performed against the \noriginal card used to process the transaction.\n"
      operationId: RefundRequest
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefundRequest'
          text/xml:
            schema:
              $ref: '#/components/schemas/RefundRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/AuthResponse'
          description: A result of the refund of sale processing.
        "400":
          description: Bad Request. Should the incoming data not be validly determined.
        "401":
          description: Unauthorized. No api key has been provided and is required
            for this operation.
        "403":
          description: Forbidden. The api key was provided and understood but is either
            incorrect or does not have permission to access the account provided on
            the request.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity. Should a failure occur that prevents
            processing of the API call.
        "500":
          description: Server Error. The server was unable to complete the request.
      security:
      - cp-api-key: []
      summary: Refund
      tags:
      - Authorisation and Payment Api
      x-contentType: application/json
      x-accepts: application/json
  /v6/retrieve:
    post:
      description: "A retrieval request which allows an integration to obtain the\
        \ result of a transaction processed\nin the last 90 days. The request allows\
        \ for retrieval based on the identifier or transaction \nnumber. \n\nThe process\
        \ may return multiple results in particular where a transaction was processed\
        \ multiple\ntimes against the same identifier. This can happen if errors were\
        \ first received. The API therefore\nreturns up to the first 5 transactions\
        \ in the latest date time order.\n\nIt is not intended for this operation\
        \ to be a replacement for reporting and only allows for base transaction\n\
        information to be returned.\n"
      operationId: RetrievalRequest
      requestBody:
        content:
          application/json:
            examples:
              example1:
                externalValue: RetrievalRequest-example1.json
                summary: Basic retrieval call for a merchant with a given identifier
            schema:
              $ref: '#/components/schemas/RetrieveRequest'
          text/xml:
            examples:
              example1:
                externalValue: RetrievalRequest-example1.xml
                summary: Basic retrieval call for a merchant with a given identifier
            schema:
              $ref: '#/components/schemas/RetrieveRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthReferences'
            text/xml:
              schema:
                $ref: '#/components/schemas/AuthReferences'
          description: A result of the retrieval request.
        "400":
          description: Bad Request. Should the incoming data not be validly determined.
        "401":
          description: Unauthorized. No api key has been provided and is required
            for this operation.
        "403":
          description: Forbidden. The api key was provided and understood but is either
            incorrect or does not have permission to access the account provided on
            the request.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity. Should a failure occur that prevents
            processing of the API call.
        "500":
          description: Server Error. The server was unable to complete the request.
      security:
      - cp-api-key: []
      summary: Retrieval
      tags:
      - Authorisation and Payment Api
      x-contentType: application/json
      x-accepts: application/json
  /v6/void:
    post:
      description: "_The void process generally applies to transactions which have\
        \ been pre-authorised only however voids can occur \non the same day if performed\
        \ before batching and settlement._ \n\nThe void process will ensure that a\
        \ transaction will now settle. It is expected that a void call will be \n\
        provided on the same day before batching and settlement or within 3 days or\
        \ within a maximum of 7 days.\n\nOnce the transaction has been processed as\
        \ a void, an [`Acknowledgement`](#acknowledgement) will be returned,\noutlining\
        \ the result of the transaction.\n"
      operationId: VoidRequest
      requestBody:
        content:
          application/json:
            examples:
              example1:
                externalValue: VoidRequest-example1.json
                summary: Basic capture call for a merchant with a given identifier
              example2:
                externalValue: VoidRequest-example2.json
                summary: Basic capture call for a merchant with a transno and final
                  amount
            schema:
              $ref: '#/components/schemas/VoidRequest'
          text/xml:
            examples:
              example1:
                externalValue: VoidRequest-example1.xml
                summary: Basic capture call for a merchant with a given identifier
              example2:
                externalValue: VoidRequest-example2.xml
                summary: Basic capture call for a merchant with a transno and final
                  amount
            schema:
              $ref: '#/components/schemas/VoidRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Acknowledgement'
            text/xml:
              schema:
                $ref: '#/components/schemas/Acknowledgement'
          description: </br>A result and acknowledgement of the void request, returning
            an `080/003` response code on successful void/cancellation of the transaction.</br></br>If
            an error occurs an error code will be returned explaining the failure.
        "400":
          description: Bad Request. Should the incoming data not be validly determined.
        "401":
          description: Unauthorized. No api key has been provided and is required
            for this operation.
        "403":
          description: Forbidden. The api key was provided and understood but is either
            incorrect or does not have permission to access the account provided on
            the request.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity. Should a failure occur that prevents
            processing of the API call.
        "500":
          description: Server Error. The server was unable to complete the request.
      security:
      - cp-api-key: []
      summary: Void
      tags:
      - Authorisation and Payment Api
      x-contentType: application/json
      x-accepts: application/json
components:
  schemas:
    AccountCreate:
      example:
        account_id: aaabbb-cccddd-eee
        contact:
          area: London
          country: GB
          firstname: John
          address3: address3
          address2: Westminster
          address1: 79 Parliament St
          mobile_no: "447790123456"
          postcode: L1 789
          title: Mr
          lastname: Smith
          telephone_no: "442030123456"
          company: Acme Ltd
          email: card.holder@citypay.com
      properties:
        account_id:
          description: |
            A card holder account id used for uniquely identifying the account. This value will be used for future
            referencing of the account oand to link your system to this API. This value is immutable and
            never changes.
          example: aaabbb-cccddd-eee
          maxLength: 50
          minLength: 5
          type: string
        contact:
          $ref: '#/components/schemas/ContactDetails'
      required:
      - account_id
      type: object
    AccountStatus:
      example:
        status: status
      properties:
        status:
          description: The status of the account to set, valid values are ACTIVE or
            DISABLED.
          type: string
      type: object
    Acknowledgement:
      example:
        identifier: 95b857a1-5955-4b86-963c-5a6dbfc4fb95
        code: "0"
        context: aspiu352908ns47n343598bads
        message: Approved 044332
      properties:
        code:
          description: A response code providing a result of the process.
          example: "0"
          maxLength: 4
          minLength: 3
          type: string
        context:
          description: A context id of the process used for referencing transactions
            through support.
          example: aspiu352908ns47n343598bads
          type: string
        identifier:
          description: An identifier if presented in the original request.
          example: 95b857a1-5955-4b86-963c-5a6dbfc4fb95
          maxLength: 50
          minLength: 4
          type: string
        message:
          description: A response message providing a description of the result of
            the process.
          example: Approved 044332
          type: string
      type: object
    AclCheckRequest:
      example:
        ip: 8.8.8.8
      properties:
        ip:
          description: An ip address to check for an ACL against. The address should
            be a publicly routable IPv4 address.
          example: 8.8.8.8
          format: ipv4
          type: string
      required:
      - ip
      type: object
    AclCheckResponseModel:
      example:
        cache: true
        provider: provider
        ip: 8.8.8.8
        acl: acl
      properties:
        acl:
          description: The name or value of the acl which was found to match the ip
            address.
          type: string
        cache:
          description: Whether the ACL was returned via a cached instance.
          type: boolean
        ip:
          description: The IP address used in the lookup.
          example: 8.8.8.8
          format: ipv4
          type: string
        provider:
          description: The source provider of the ACL.
          type: string
      type: object
    AirlineAdvice:
      example:
        number_in_party: 2
        no_air_segments: 2
        ticket_issue_name: Issue Name
        transaction_type: TKT
        eticket_indicator: true
        passenger_name: NE Person
        ticket_issue_city: London
        conjunction_ticket_indicator: false
        segment4:
          segment_fare: 7500
          flight_number: "772"
          stop_over_indicator: "1"
          class_service_code: CC
          departure_date: 2020-08-01T00:00:00.000+0000
          departure_location_code: JER
          arrival_location_code: SOU
          carrier_code: ZZ
        ticket_issue_date: 2020-08-01T00:00:00.000+0000
        segment3:
          segment_fare: 7500
          flight_number: "772"
          stop_over_indicator: "1"
          class_service_code: CC
          departure_date: 2020-08-01T00:00:00.000+0000
          departure_location_code: JER
          arrival_location_code: SOU
          carrier_code: ZZ
        segment2:
          segment_fare: 7500
          flight_number: "772"
          stop_over_indicator: "1"
          class_service_code: CC
          departure_date: 2020-08-01T00:00:00.000+0000
          departure_location_code: JER
          arrival_location_code: SOU
          carrier_code: ZZ
        segment1:
          segment_fare: 7500
          flight_number: "772"
          stop_over_indicator: "1"
          class_service_code: CC
          departure_date: 2020-08-01T00:00:00.000+0000
          departure_location_code: JER
          arrival_location_code: SOU
          carrier_code: ZZ
        original_ticket_no: original_ticket_no
        ticket_no: A112233
        carrier_name: EG Air
      properties:
        carrier_name:
          description: The name of the airline carrier that generated the tickets
            for airline travel.
          example: EG Air
          maxLength: 25
          type: string
        conjunction_ticket_indicator:
          description: |
            true if a conjunction ticket (with additional coupons) was issued for an itinerary
            with more than four segments. Defaults to false.
          example: false
          type: boolean
        eticket_indicator:
          description: The Electronic Ticket Indicator, a code that indicates if an
            electronic ticket was issued.  Defaults to true.
          example: true
          type: boolean
        no_air_segments:
          description: |
            A value that indicates the number of air travel segments included on this ticket.

            Valid entries include the numerals “0” through “4”. Required only if the transaction type is TKT or EXC.
          example: 2
          format: int32
          maximum: 4
          minimum: 0
          type: integer
        number_in_party:
          description: The number of people in the party.
          example: 2
          format: int32
          type: integer
        original_ticket_no:
          description: Required if transaction type is EXC.
          maxLength: 14
          type: string
        passenger_name:
          description: The name of the passenger when the traveller is not the card
            member that purchased the ticket. Required only if the transaction type
            is TKT or EXC.
          example: NE Person
          maxLength: 25
          type: string
        segment1:
          $ref: '#/components/schemas/AirlineSegment'
        segment2:
          $ref: '#/components/schemas/AirlineSegment'
        segment3:
          $ref: '#/components/schemas/AirlineSegment'
        segment4:
          $ref: '#/components/schemas/AirlineSegment'
        ticket_issue_city:
          description: The name of the city town or village where the transaction
            took place.
          example: London
          maxLength: 18
          type: string
        ticket_issue_date:
          description: The date the ticket was issued in ISO Date format (yyyy-MM-dd).
          example: 2020-08-01
          format: date
          maxLength: 10
          type: string
        ticket_issue_name:
          description: The name of the agency generating the ticket.
          example: Issue Name
          maxLength: 26
          type: string
        ticket_no:
          description: |
            This must be a valid ticket number, i.e. numeric (the first 3 digits must represent the valid IATA plate carrier code).
            The final check digit should be validated prior to submission. On credit charges, this field should contain the
            number of the original ticket, and not of a replacement.
          example: A112233
          maxLength: 14
          type: string
        transaction_type:
          description: |
            This field contains the Transaction Type code assigned to this transaction. Valid codes include:

             - `TKT` = Ticket Purchase

             - `REF` = Refund

             - `EXC` = Exchange Ticket

             - `MSC` = Miscellaneous (non-Ticket Purchase- and non-Exchange Ticket-related transactions only).
          example: TKT
          maxLength: 3
          minLength: 3
          type: string
      required:
      - carrier_name
      - number_in_party
      - segment1
      - ticket_issue_city
      - ticket_issue_date
      - ticket_issue_name
      - ticket_no
      - transaction_type
      type: object
    AirlineSegment:
      example:
        segment_fare: 7500
        flight_number: "772"
        stop_over_indicator: "1"
        class_service_code: CC
        departure_date: 2020-08-01T00:00:00.000+0000
        departure_location_code: JER
        arrival_location_code: SOU
        carrier_code: ZZ
      properties:
        arrival_location_code:
          description: |
            A standard airline routing code (airport code or location identifier) applicable to the
            arrival portion of this segment.
          example: SOU
          maxLength: 3
          type: string
        carrier_code:
          description: |
            This field contains the two character airline designator code (air carrier code or airline code) that
            corresponds to the airline carrier applicable for up to four flight segments of this trip itinerary.
          example: ZZ
          maxLength: 2
          type: string
        class_service_code:
          description: |
            This field contains a code that corresponds to the fare class (A, B, C, D, Premium, Discounted, etc.)
            within the overall class of service (e.g., First Class, Business, Economy) applicable to this travel segment,
            as specified in the IATA Standard Code allocation table.
          example: CC
          maxLength: 2
          type: string
        departure_date:
          description: The Departure Date for the travel segment in ISO Date Format
            (yyyy-MM-dd).
          example: 2020-08-01
          format: date
          type: string
        departure_location_code:
          description: |
            A standard airline routing code (airport code or location identifier) applicable to the
            departure portion of this segment.
          example: JER
          maxLength: 3
          type: string
        flight_number:
          description: This field contains the carrier-assigned Flight Number for
            this travel segment.
          example: "772"
          maxLength: 4
          type: string
        segment_fare:
          description: This field contains the total Fare for this travel segment.
          example: 7500
          format: int32
          type: integer
        stop_over_indicator:
          description: O = Stopover allowed, X = Stopover not allowed.
          example: "1"
          maxLength: 1
          type: string
      required:
      - arrival_location_code
      - carrier_code
      - class_service_code
      - departure_date
      - flight_number
      type: object
    AuthReference:
      example:
        amount_value: 3600
        identifier: 95b857a1-5955-4b86-963c-5a6dbfc4fb95
        amount: "20.0"
        atrn: atrn
        batchno: batchno
        maskedpan: 4***********0002
        transno: 78416
        authcode: 001245A
        result: result
        datetime: 2020-01-02T18:32:28Z
        merchantid: 11223344
        currency: GBP
        trans_status: trans_status
        trans_type: trans_type
      properties:
        amount:
          description: The amount of the transaction in decimal currency format.
          example: "20.0"
          maxLength: 10
          type: string
        amount_value:
          description: The amount of the transaction in integer/request format.
          example: 3600
          format: int32
          maxLength: 9
          minLength: 1
          type: integer
        atrn:
          description: A reference number provided by the acquiring services.
          type: string
        authcode:
          description: The authorisation code of the transaction returned by the acquirer
            or card issuer.
          example: 001245A
          type: string
        batchno:
          description: A batch number which the transaction has been end of day batched
            towards.
          type: string
        currency:
          description: The currency of the transaction in ISO 4217 code format.
          example: GBP
          maxLength: 3
          minLength: 3
          type: string
        datetime:
          description: The date and time of the transaction.
          example: 2020-01-02T18:32:28Z
          format: date-time
          type: string
        identifier:
          description: The identifier of the transaction used to process the transaction.
          example: 95b857a1-5955-4b86-963c-5a6dbfc4fb95
          maxLength: 50
          minLength: 4
          type: string
        maskedpan:
          description: A masking of the card number which was used to process the
            tranasction.
          example: 4***********0002
          type: string
        merchantid:
          description: The merchant id of the transaction result.
          example: 11223344
          format: int32
          type: integer
        result:
          description: The result of the transaction.
          type: string
        trans_status:
          description: The current status of the transaction through it's lifecycle.
          type: string
        trans_type:
          description: The type of transaction that was processed.
          maxLength: 1
          type: string
        transno:
          description: The transaction number of the transaction.
          example: 78416
          format: int32
          type: integer
      type: object
    AuthReferences:
      example:
        auths:
        - amount_value: 3600
          identifier: 95b857a1-5955-4b86-963c-5a6dbfc4fb95
          amount: "20.0"
          atrn: atrn
          batchno: batchno
          maskedpan: 4***********0002
          transno: 78416
          authcode: 001245A
          result: result
          datetime: 2020-01-02T18:32:28Z
          merchantid: 11223344
          currency: GBP
          trans_status: trans_status
          trans_type: trans_type
        - amount_value: 3600
          identifier: 95b857a1-5955-4b86-963c-5a6dbfc4fb95
          amount: "20.0"
          atrn: atrn
          batchno: batchno
          maskedpan: 4***********0002
          transno: 78416
          authcode: 001245A
          result: result
          datetime: 2020-01-02T18:32:28Z
          merchantid: 11223344
          currency: GBP
          trans_status: trans_status
          trans_type: trans_type
      properties:
        auths:
          items:
            $ref: '#/components/schemas/AuthReference'
          type: array
          x-description: Authorisations which match the request.
      type: object
    AuthRequest:
      example:
        bill_to:
          area: London
          country: GB
          firstname: John
          address3: address3
          address2: Westminster
          address1: 79 Parliament St
          mobile_no: "447790123456"
          postcode: L1 789
          title: Mr
          lastname: Smith
          telephone_no: "442030123456"
          company: Acme Ltd
          email: card.holder@citypay.com
        identifier: 95b857a1-5955-4b86-963c-5a6dbfc4fb95
        threedsecure:
          browserLanguage: browserLanguage
          browserColorDepth: browserColorDepth
          browserJavaEnabled: browserJavaEnabled
          tds_policy: tds_policy
          browserIP: browserIP
          browserTZ: browserTZ
          cp_bx: FjaW50b3NoOyBJbnRlbCBNYWMgT1MgWCAx...
          downgrade1: true
          accept_headers: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
          browserScreenHeight: browserScreenHeight
          merchant_termurl: https://mysite.com/acs/return
          browserScreenWidth: browserScreenWidth
          user_agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_3) AppleWebKit/537.36
            (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36
        amount: 3600
        expyear: 2025
        csc_policy: csc_policy
        mcc6012:
          recipient_dob: recipient_dob
          recipient_postcode: recipient_postcode
          recipient_account: recipient_account
          recipient_lastname: recipient_lastname
        trans_info: trans_info
        duplicate_policy: duplicate_policy
        csc: "12"
        merchantid: 11223344
        expmonth: 9
        airline_data:
          number_in_party: 2
          no_air_segments: 2
          ticket_issue_name: Issue Name
          transaction_type: TKT
          eticket_indicator: true
          passenger_name: NE Person
          ticket_issue_city: London
          conjunction_ticket_indicator: false
          segment4:
            segment_fare: 7500
            flight_number: "772"
            stop_over_indicator: "1"
            class_service_code: CC
            departure_date: 2020-08-01T00:00:00.000+0000
            departure_location_code: JER
            arrival_location_code: SOU
            carrier_code: ZZ
          ticket_issue_date: 2020-08-01T00:00:00.000+0000
          segment3:
            segment_fare: 7500
            flight_number: "772"
            stop_over_indicator: "1"
            class_service_code: CC
            departure_date: 2020-08-01T00:00:00.000+0000
            departure_location_code: JER
            arrival_location_code: SOU
            carrier_code: ZZ
          segment2:
            segment_fare: 7500
            flight_number: "772"
            stop_over_indicator: "1"
            class_service_code: CC
            departure_date: 2020-08-01T00:00:00.000+0000
            departure_location_code: JER
            arrival_location_code: SOU
            carrier_code: ZZ
          segment1:
            segment_fare: 7500
            flight_number: "772"
            stop_over_indicator: "1"
            class_service_code: CC
            departure_date: 2020-08-01T00:00:00.000+0000
            departure_location_code: JER
            arrival_location_code: SOU
            carrier_code: ZZ
          original_ticket_no: original_ticket_no
          ticket_no: A112233
          carrier_name: EG Air
        event_management:
          event_organiser_id: event_organiser_id
          payment_type: payment_type
          event_id: event_id
          event_end_date: 2000-01-23
          event_start_date: 2000-01-23
        match_avsa: match_avsa
        avs_postcode_policy: avs_postcode_policy
        currency: GBP
        cardnumber: 4000 0000 0000 0002
        external_mpi:
          authen_result: authen_result
          cavv: cavv
          xid: xid
          eci: 0
          enrolled: enrolled
        ship_to:
          area: London
          country: GB
          firstname: John
          address3: address3
          address2: Westminster
          address1: 79 Parliament St
          mobile_no: "447790123456"
          postcode: L1 789
          title: Mr
          lastname: Smith
          telephone_no: "442030123456"
          company: Acme Ltd
          email: card.holder@citypay.com
        name_on_card: MR NE BODY
        trans_type: trans_type
      properties:
        airline_data:
          $ref: '#/components/schemas/AirlineAdvice'
        amount:
          description: |
            The amount to authorise in the lowest unit of currency with a variable length to a maximum of 12 digits.

            No decimal points are to be included and no divisional characters such as 1,024.

            The amount should be the total amount required for the transaction.

            For example with GBP £1,021.95 the amount value is 102195.
          example: 3600
          format: int32
          maxLength: 9
          minLength: 1
          type: integer
        avs_postcode_policy:
          description: |
            A policy value which determines whether an AVS postcode policy is enforced or bypassed.

            Values are
             `0` for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.

             `1` for an enforced policy. Transactions that are enforced will be rejected if the AVS postcode numeric value does not match.

             `2` to bypass. Transactions that are bypassed will be allowed through even if the postcode did not match.

             `3` to ignore. Transactions that are ignored will bypass the result and not send postcode details for authorisation.
          type: string
        bill_to:
          $ref: '#/components/schemas/ContactDetails'
        cardnumber:
          description: |
            The card number (PAN) with a variable length to a maximum of 21 digits in numerical form.
            Any non numeric characters will be stripped out of the card number, this includes whitespace or separators internal of the
            provided value.

            The card number must be treated as sensitive data. We only provide an obfuscated value in logging and reporting.
             The plaintext value is encrypted in our database using AES 256 GMC bit encryption for settlement or refund purposes.

            When providing the card number to our gateway through the authorisation API you will be handling the card data on
            your application. This will require further PCI controls to be in place and this value must never be stored.
          example: 4000 0000 0000 0002
          maxLength: 22
          minLength: 12
          type: string
        csc:
          description: |
            The Card Security Code (CSC) (also known as CV2/CVV2) is normally found on the back of the card
            (American Express has it on the front). The value helps to identify posession of the card as it is not
            available within the chip or magnetic swipe.

            When forwarding the CSC, please ensure the value is a string as some values start with 0 and this will be stripped
            out by any integer parsing.

            The CSC number aids fraud prevention in Mail Order and Internet payments.

            Business rules are available on your account to identify whether to accept
            or decline transactions based on mismatched results of the CSC.

            The Payment Card Industry (PCI) requires that at no stage of a transaction should the CSC be stored.

            This applies to all entities handling card data.

            It should also not be used in any hashing process.

            CityPay do not store the value and have no method of retrieving the value once the transaction has been processed.
            For this reason, duplicate checking is unable to determine the CSC in its duplication check algorithm.
          example: "12"
          maxLength: 4
          minLength: 3
          type: string
        csc_policy:
          description: |
            A policy value which determines whether a CSC policy is enforced or bypassed.

            Values are
             `0` for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.

             `1` for an enforced policy. Transactions that are enforced will be rejected if the CSC value does not match.

             `2` to bypass. Transactions that are bypassed will be allowed through even if the CSC did not match.

             `3` to ignore. Transactions that are ignored will bypass the result and not send the CSC details for authorisation.
          type: string
        currency:
          description: The processing currency for the transaction. Will default to
            the merchant account currency.
          example: GBP
          maxLength: 3
          minLength: 3
          type: string
        duplicate_policy:
          description: |
            A policy value which determines whether a duplication policy is enforced or bypassed. A duplication check has a window
            of time set against your account within which it can action. If a previous transaction with matching values occurred within
            the window, any subsequent transaction will result in a T001 result.

            Values are
             `0` for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.

             `1` for an enforced policy. Transactions that are enforced will be checked for duplication within the duplication window.

             `2` to bypass. Transactions that are bypassed will not be checked for duplication within the duplication window.

             `3` to ignore. Transactions that are ignored will have the same affect as bypass.
          type: string
        event_management:
          $ref: '#/components/schemas/EventDataModel'
        expmonth:
          description: |
            The month of expiry of the card. The month value should be a numerical value between 1 and 12.
          example: 9
          format: int32
          maximum: 12
          minimum: 1
          type: integer
        expyear:
          description: |
            The year of expiry of the card.
          example: 2025
          format: int32
          maximum: 2100
          minimum: 2000
          type: integer
        external_mpi:
          $ref: '#/components/schemas/ExternalMPI'
        identifier:
          description: |
            The identifier of the transaction to process. The value should be a valid reference and may be used to perform
             post processing actions and to aid in reconciliation of transactions.

            The value should be a valid printable string with ASCII character ranges from 0x32 to 0x127.

            The identifier is recommended to be distinct for each transaction such as a [random unique identifier](https://en.wikipedia.org/wiki/Universally_unique_identifier)
            this will aid in ensuring each transaction is identifiable.

            When transactions are processed they are also checked for duplicate requests. Changing the identifier on a subsequent
            request will ensure that a transaction is considered as different.
          example: 95b857a1-5955-4b86-963c-5a6dbfc4fb95
          maxLength: 50
          minLength: 4
          type: string
        match_avsa:
          description: |
            A policy value which determines whether an AVS address policy is enforced, bypassed or ignored.

            Values are
             `0` for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.

             `1` for an enforced policy. Transactions that are enforced will be rejected if the AVS address numeric value does not match.

             `2` to bypass. Transactions that are bypassed will be allowed through even if the address did not match.

             `3` to ignore. Transactions that are ignored will bypass the result and not send address numeric details for authorisation.
          type: string
        mcc6012:
          $ref: '#/components/schemas/MCC6012'
        merchantid:
          description: Identifies the merchant account to perform processing for.
          example: 11223344
          format: int32
          type: integer
        name_on_card:
          description: |
            The card holder name as appears on the card such as MR N E BODY. Required for some acquirers.
          example: MR NE BODY
          maxLength: 45
          minLength: 2
          type: string
        ship_to:
          $ref: '#/components/schemas/ContactDetails'
        threedsecure:
          $ref: '#/components/schemas/ThreeDSecure'
        trans_info:
          description: Further information that can be added to the transaction will
            display in reporting. Can be used for flexible values such as operator
            id.
          maxLength: 50
          type: string
        trans_type:
          description: The type of transaction being submitted. Normally this value
            is not required and your account manager may request that you set this
            field.
          maxLength: 1
          type: string
      required:
      - amount
      - cardnumber
      - expmonth
      - expyear
      - identifier
      - merchantid
      type: object
    AuthResponse:
      example:
        authen_result: authen_result
        atrn: atrn
        maskedpan: 4***********0002
        scheme: Visa
        sha256: sha256
        eci: eci
        transno: 78416
        result: 1
        datetime: 2020-01-02T18:32:28Z
        authorised: true
        context: aspiu352908ns47n343598bads
        currency: GBP
        avs_result: avs_result
        live: true
        trans_status: trans_status
        csc_result: csc_result
        bin_description: Platinum Card
        identifier: 95b857a1-5955-4b86-963c-5a6dbfc4fb95
        amount: 3600
        bin_commercial: true
        result_message: Accepted Transaction
        atsd: atsd
        authcode: 001245A
        cavv: cavv
        merchantid: 11223344
        result_code: "0"
        bin_debit: true
      properties:
        amount:
          description: The amount of the transaction processed.
          example: 3600
          format: int32
          type: integer
        atrn:
          description: |
            A reference number provided by the acquirer for a transaction it can be used to cross reference transactions
            with an Acquirers reporting panel.
          type: string
        atsd:
          description: Additional Transaction Security Data used for ecommerce transactions
            to decipher security capabilities and attempts against a transaction.
          type: string
        authcode:
          description: |
            The authorisation code as returned by the card issuer or acquiring bank when a transaction has successfully
              been authorised. Authorisation codes contain alphanumeric values. Whilst the code confirms authorisation it
              should not be used to determine whether a transaction was successfully processed. For instance an auth code
              may be returned when a transaction has been subsequently declined due to a CSC mismatch.
          example: 001245A
          type: string
        authen_result:
          description: |
            The result of any authentication using 3d_secure authorisation against ecommerce transactions. Values are:

            <table>
            <tr>
            <th>Value</th>
            <th>Description</th>
            </tr>
            <tr>
            <td>Y</td>
            <td>Authentication Successful. The Cardholder's password was successfully validated.</td>
            </tr>
            <tr>
            <td>N</td>
            <td>Authentication Failed. Customer failed or cancelled authentication, transaction denied.</td>
            </tr>
            <tr>
            <td>A</td>
            <td>Attempts Processing Performed Authentication could not be completed but a proof of authentication attempt (CAVV) was generated.</td>
            </tr>
            <tr>
            <td>U</td>
            <td>Authentication Could Not Be Performed Authentication could not be completed, due to technical or other problem.</td>
            </tr>
            </table>
          type: string
        authorised:
          description: |
            A boolean definition that indicates that the transaction was authorised. It will return false if the transaction
             was declined, rejected or cancelled due to CSC matching failures.

            Attention should be referenced to the AuthResult and Response code for accurate determination of the result.
          example: true
          type: boolean
        avs_result:
          description: |
            The AVS result codes determine the result of checking the AVS values within the
            Address Verification fraud system. If a transaction is declined due to the AVS code not matching,
            this value can help determine the reason for the decline.

            <table>
            <tr>
            <th>Code</th>
            <th>Description</th>
            </tr>
            <tr><td>Y</td><td>Address and 5 digit post code match</td></tr>
            <tr><td>M</td><td>Street address and Postal codes match for international transaction</td></tr>
            <tr><td>U</td><td>No AVS data available from issuer auth system</td></tr>
            <tr><td>A</td><td>Addres matches, post code does not</td></tr>
            <tr><td>I</td><td>Address information verified for international transaction</td></tr>
            <tr><td>Z</td><td>5 digit post code matches, Address does not</td></tr>
            <tr><td>W</td><td>9 digit post code matches, Address does not</td></tr>
            <tr><td>X</td><td>Postcode and address match</td></tr>
            <tr><td>B</td><td>Postal code not verified due to incompatible formats</td></tr>
            <tr><td>P</td><td>Postal codes match. Street address not verified due to to incompatible formats</td></tr>
            <tr><td>E</td><td>AVS Error</td></tr>
            <tr><td>C</td><td>Street address and Postal code not verified due to incompatible formats</td></tr>
            <tr><td>D</td><td>Street address and postal codes match</td></tr>
            <tr><td> </td><td>No information</td></tr>
            <tr><td>N</td><td>Neither postcode nor address match</td></tr>
            <tr><td>R</td><td>Retry, System unavailble or Timed Out</td></tr>
            <tr><td>S</td><td>AVS Service not supported by issuer or processor</td></tr>
            <tr><td>G</td><td>Issuer does not participate in AVS</td></tr>
            </table>
          type: string
        bin_commercial:
          description: Determines whether the bin range was found to be a commercial
            or business card.
          type: boolean
        bin_debit:
          description: Determines whether the bin range was found to be a debit card.
            If false the card was considered as a credit card.
          type: boolean
        bin_description:
          description: A description of the bin range found for the card.
          example: Platinum Card
          type: string
        cavv:
          description: |
            The cardholder authentication verification value which can be returned for verification purposes of the authenticated
             transaction for dispute realisation.
          type: string
        context:
          description: The context which processed the transaction, can be used for
            support purposes to trace transactions.
          example: aspiu352908ns47n343598bads
          type: string
        csc_result:
          description: |
            The CSC rseult codes determine the result of checking the provided CSC value within the
            Card Security Code fraud system. If a transaction is declined due to the CSC code not matching,
            this value can help determine the reason for the decline.

            <table>
            <tr>
            <th>Code</th>
            <th>Description</th>
            </tr>
            <tr><td> </td><td>No information</td></tr>
            <tr><td>M</td><td>Card verification data matches</td></tr>
            <tr><td>N</td><td>Card verification data was checked but did not match</td></tr>
            <tr><td>P</td><td>Card verification was not processed</td></tr>
            <tr><td>S</td><td>The card verification data should be on the card but the merchant indicates that it is not</td></tr>
            <tr><td>U</td><td>The card issuer is not certified</td></tr>
            </table>
          type: string
        currency:
          description: The currency the transaction was processed in. This is an `ISO4217`
            alpha currency value.
          example: GBP
          type: string
        datetime:
          description: |
            The UTC date time of the transaction in ISO data time format.
          example: 2020-01-02T18:32:28Z
          format: date-time
          type: string
        eci:
          description: |
            An Electronic Commerce Indicator (ECI) used to identify the result of authentication using 3DSecure.
          type: string
        identifier:
          description: The identifier provided within the request.
          example: 95b857a1-5955-4b86-963c-5a6dbfc4fb95
          type: string
        live:
          description: Used to identify that a transaction was processed on a live
            authorisation platform.
          example: true
          type: boolean
        maskedpan:
          description: |
            A masked value of the card number used for processing displaying limited values that can be used on a receipt.
          example: 4***********0002
          type: string
        merchantid:
          description: The merchant id that processed this transaction.
          example: 11223344
          format: int32
          type: integer
        result:
          description: |
            An integer result that indicates the outcome of the transaction. The Code value below maps to the result value

            <table>
            <tr>
            <th>Code</th>
            <th>Abbrev</th>
            <th>Description</th>
            </tr>
            <tr><td>0</td><td>Declined</td><td>Declined</td></tr>
            <tr><td>1</td><td>Accepted</td><td>Accepted</td></tr>
            <tr><td>2</td><td>Rejected</td><td>Rejected</td></tr>
            <tr><td>3</td><td>Not Attempted</td><td>Not Attempted</td></tr>
            <tr><td>4</td><td>Referred</td><td>Referred</td></tr>
            <tr><td>5</td><td>PinRetry</td><td>Perform PIN Retry</td></tr>
            <tr><td>6</td><td>ForSigVer</td><td>Force Signature Verification</td></tr>
            <tr><td>7</td><td>Hold</td><td>Hold</td></tr>
            <tr><td>8</td><td>SecErr</td><td>Security Error</td></tr>
            <tr><td>9</td><td>CallAcq</td><td>Call Acquirer</td></tr>
            <tr><td>10</td><td>DNH</td><td>Do Not Honour</td></tr>
            <tr><td>11</td><td>RtnCrd</td><td>Retain Card</td></tr>
            <tr><td>12</td><td>ExprdCrd</td><td>Expired Card</td></tr>
            <tr><td>13</td><td>InvldCrd</td><td>Invalid Card No</td></tr>
            <tr><td>14</td><td>PinExcd</td><td>Pin Tries Exceeded</td></tr>
            <tr><td>15</td><td>PinInvld</td><td>Pin Invalid</td></tr>
            <tr><td>16</td><td>AuthReq</td><td>Authentication Required</td></tr>
            <tr><td>17</td><td>AuthenFail</td><td>Authentication Failed</td></tr>
            <tr><td>18</td><td>Verified</td><td>Card Verified</td></tr>
            <tr><td>19</td><td>Cancelled</td><td>Cancelled</td></tr>
            <tr><td>20</td><td>Un</td><td>Unknown</td></tr>
            <tr><td>21</td><td>Challenged</td><td>Challenged</td></tr>
            <tr><td>22</td><td>Decoupled</td><td>Decoupled</td></tr>
            <tr><td>23</td><td>Denied</td><td>Permission Denied</td></tr>
            </table>
          example: 1
          format: int32
          type: integer
        result_code:
          description: |
            The result code as defined in the Response Codes Reference for example 000 is an accepted live
            transaction whilst 001 is an accepted test transaction. Result codes identify the source of success and failure.

            Codes may start with an alpha character i.e. C001 indicating a type of error such as a card validation error.
          example: "0"
          type: string
        result_message:
          description: |
            The message regarding the result which provides further narrative to the result code.
          example: Accepted Transaction
          type: string
        scheme:
          description: |
            A name of the card scheme of the transaction that processed the transaction such as Visa or MasterCard.
          example: Visa
          type: string
        sha256:
          description: |
            A SHA256 digest value of the transaction used to validate the response data
            The digest is calculated by concatenating

             * authcode

             * amount

             * response_code

             * merchant_id

             * trans_no

             * identifier

             * licence_key - which is not provided in the response.
          type: string
        trans_status:
          description: |
            Used to identify the status of a transaction. The status is used to track a transaction through its life cycle.

            <table>
            <tr>
            <th>Id</th>
            <th>Description</th>
            </tr>
            <tr>
            <td>O</td>
            <td>Transaction is open for settlement</td>
            </tr>
            <tr>
            <td>A</td>
            <td>Transaction is assigned for settlement and can no longer be voided</td>
            </tr>
            <tr>
            <td>S</td>
            <td>Transaction has been settled</td>
            </tr>
            <tr>
            <td>D</td>
            <td>Transaction has been declined</td>
            </tr>
            <tr>
            <td>R</td>
            <td>Transaction has been rejected</td>
            </tr>
            <tr>
            <td>P</td>
            <td>Transaction has been authorised only and awaiting a capture. Used in pre-auth situations</td>
            </tr>
            <tr>
            <td>C</td>
            <td>Transaction has been cancelled</td>
            </tr>
            <tr>
            <td>E</td>
            <td>Transaction has expired</td>
            </tr>
            <tr>
            <td>I</td>
            <td>Transaction has been initialised but no action was able to be carried out</td>
            </tr>
            <tr>
            <td>H</td>
            <td>Transaction is awaiting authorisation</td>
            </tr>
            <tr>
            <td>.</td>
            <td>Transaction is on hold</td>
            </tr>
            <tr>
            <td>V</td>
            <td>Transaction has been verified</td>
            </tr>
            </table>
          type: string
        transno:
          description: |
            The resulting transaction number, ordered incrementally from 1 for every merchant_id. The value will default to less than 1
            for transactions that do not have a transaction number issued.
          example: 78416
          format: int32
          type: integer
      required:
      - merchantid
      - result
      - result_code
      - result_message
      type: object
    AuthenRequired:
      example:
        pareq: eNrNWdnOo0qSfpXSmUuf0+w2tFy/lOyYxYDZ79h3sAEbm6cfbFfV+bu6pqe7R2qNJeQkiIwlMyK+...
        md: md
        acs_url: https://acs.cardissuer.com/3dsv1
      properties:
        acs_url:
          description: |
            The url of the Access Control Server (ACS) to forward the user to.
          example: https://acs.cardissuer.com/3dsv1
          format: url
          type: string
        md:
          description: |
            Merchant Data (MD) which should be sent to the ACS to establish and reference
            the authentication session.
          type: string
        pareq:
          description: |
            The Payer Authentication Request packet which should be `POSTed` to the Url of the ACS
            to establish the authentication session. Data should be sent untouched.
          example: eNrNWdnOo0qSfpXSmUuf0+w2tFy/lOyYxYDZ79h3sAEbm6cfbFfV+bu6pqe7R2qNJeQkiIwlMyK+...
          format: base64
          type: string
      type: object
    Batch:
      example:
        batch_id: 35
        batch_status: COMPLETE
        batch_date: 2020-01-02T00:00:00.000+0000
      properties:
        batch_date:
          description: The date that the file was created in ISO-8601 format.
          example: 2020-01-02
          format: date
          type: string
        batch_id:
          description: The batch id requested.
          example: 35
          format: int32
          maxLength: 8
          minimum: 1
          type: integer
        batch_status:
          description: "The status of the batch. Possible values are - CANCELLED.\
            \ The file has been cancelled by an administrator or server process. \n\
            - COMPLETE. The file has passed through the processing cycle and is determined\
            \ as being complete further information should be obtained on the results\
            \ of the processing\n- ERROR_IN_PROCESSING. Errors have occurred in the\
            \ processing that has deemed that processing can not continue.\n- INITIALISED.\
            \ The file has been initialised and no action has yet been performed\n\
            - LOCKED. The file has been locked for processing\n- QUEUED. The file\
            \ has been queued for processing yet no processing has yet been performed\n\
            - UNKNOWN. The file is of an unknown status, that is the file can either\
            \ not be determined by the information requested of the file has not yet\
            \ been received.\n"
          example: COMPLETE
          type: string
      required:
      - batch_date
      - batch_status
      type: object
    BatchReportRequest:
      example:
        client_account_id: AC1
        batch_id: 35
      properties:
        batch_id:
          description: The batch id specified in the batch processing request.
          example: 35
          format: int32
          maxLength: 8
          minimum: 1
          type: integer
        client_account_id:
          description: The batch account id that the batch was processed for. Defaults
            to your client id if not provided.
          example: AC1
          maxLength: 20
          minLength: 3
          type: string
      required:
      - batch_id
      type: object
    BatchReportResponseModel:
      example:
        client_account_id: AC1
        amount: 3600
        batch_id: 35
        batch_status: COMPLETE
        transactions:
        - authcode: 001245A
          result: 1
          identifier: 95b857a1-5955-4b86-963c-5a6dbfc4fb95
          amount: 3600
          datetime: 2020-01-02T18:32:28Z
          account_id: aaabbb-cccddd-eee
          maskedpan: 4***********0002
          scheme: Visa
          merchantid: 11223344
          result_code: "0"
          message: Approved 044332
          transno: 78416
        - authcode: 001245A
          result: 1
          identifier: 95b857a1-5955-4b86-963c-5a6dbfc4fb95
          amount: 3600
          datetime: 2020-01-02T18:32:28Z
          account_id: aaabbb-cccddd-eee
          maskedpan: 4***********0002
          scheme: Visa
          merchantid: 11223344
          result_code: "0"
          message: Approved 044332
          transno: 78416
        batch_date: 2020-01-02T00:00:00.000+0000
      properties:
        amount:
          description: The total amount that the batch contains.
          example: 3600
          format: int32
          maxLength: 9
          minLength: 1
          type: integer
        batch_date:
          description: The date and time of the batch in ISO-8601 format.
          example: 2020-01-02
          format: date
          type: string
        batch_id:
          description: The batch id specified in the batch processing request.
          example: 35
          format: int32
          maxLength: 8
          minimum: 1
          type: integer
        batch_status:
          description: "The status of the batch. Possible values are - CANCELLED.\
            \ The file has been cancelled by an administrator or server process. \n\
            - COMPLETE. The file has passed through the processing cycle and is determined\
            \ as being complete further information should be obtained on the results\
            \ of the processing\n- ERROR_IN_PROCESSING. Errors have occurred in the\
            \ processing that has deemed that processing can not continue.\n- INITIALISED.\
            \ The file has been initialised and no action has yet been performed\n\
            - LOCKED. The file has been locked for processing\n- QUEUED. The file\
            \ has been queued for processing yet no processing has yet been performed\n\
            - UNKNOWN. The file is of an unknown status, that is the file can either\
            \ not be determined by the information requested of the file has not yet\
            \ been received.\n"
          example: COMPLETE
          type: string
        client_account_id:
          description: The batch account id that the batch was processed with.
          example: AC1
          maxLength: 20
          minLength: 3
          type: string
        transactions:
          items:
            $ref: '#/components/schemas/BatchTransactionResultModel'
          type: array
          x-description: Transactions associated with the batch.
      required:
      - amount
      - batch_date
      - batch_id
      - batch_status
      - client_account_id
      - transactions
      type: object
    BatchTransaction:
      example:
        identifier: 95b857a1-5955-4b86-963c-5a6dbfc4fb95
        amount: 3600
        account_id: aaabbb-cccddd-eee
        merchantid: 11223344
      properties:
        account_id:
          description: The card holder account id to process against.
          example: aaabbb-cccddd-eee
          maxLength: 50
          minLength: 5
          type: string
        amount:
          description: The amount required to process in the lowest denomination.
          example: 3600
          format: int32
          maxLength: 9
          minLength: 1
          type: integer
        identifier:
          description: An identifier used to reference the transaction set by your
            integration. The value should be used to refer to the transaction in future
            calls.
          example: 95b857a1-5955-4b86-963c-5a6dbfc4fb95
          maxLength: 50
          minLength: 4
          type: string
        merchantid:
          description: The CityPay merchant id used to process the transaction.
          example: 11223344
          format: int32
          type: integer
      required:
      - account_id
      - amount
      type: object
    BatchTransactionResultModel:
      example:
        authcode: 001245A
        result: 1
        identifier: 95b857a1-5955-4b86-963c-5a6dbfc4fb95
        amount: 3600
        datetime: 2020-01-02T18:32:28Z
        account_id: aaabbb-cccddd-eee
        maskedpan: 4***********0002
        scheme: Visa
        merchantid: 11223344
        result_code: "0"
        message: Approved 044332
        transno: 78416
      properties:
        account_id:
          description: The card holder account id used for the transaction.
          example: aaabbb-cccddd-eee
          maxLength: 50
          minLength: 5
          type: string
        amount:
          description: The amount of the transaction processed.
          example: 3600
          format: int32
          maxLength: 9
          minLength: 1
          type: integer
        authcode:
          description: The authorisation code of a successful transaction.
          example: 001245A
          type: string
        datetime:
          description: The datetime that the transaction was processed.
          example: 2020-01-02T18:32:28Z
          format: date-time
          type: string
        identifier:
          description: The identifier of the transaction.
          example: 95b857a1-5955-4b86-963c-5a6dbfc4fb95
          maxLength: 50
          minLength: 4
          type: string
        maskedpan:
          description: |
            A masked value of the card number used for processing displaying limited values that can be used on a receipt.
          example: 4***********0002
          type: string
        merchantid:
          description: The merchant id of the transaction.
          example: 11223344
          format: int32
          type: integer
        message:
          description: A response message pertaining to the transaction.
          example: Approved 044332
          type: string
        result:
          description: |
            An integer result that indicates the outcome of the transaction. The Code value below maps to the result value

            <table>
            <tr>
            <th>Code</th>
            <th>Abbrev</th>
            <th>Description</th>
            </tr>
            <tr><td>0</td><td>Declined</td><td>Declined</td></tr>
            <tr><td>1</td><td>Accepted</td><td>Accepted</td></tr>
            <tr><td>2</td><td>Rejected</td><td>Rejected</td></tr>
            <tr><td>3</td><td>Not Attempted</td><td>Not Attempted</td></tr>
            <tr><td>4</td><td>Referred</td><td>Referred</td></tr>
            <tr><td>5</td><td>PinRetry</td><td>Perform PIN Retry</td></tr>
            <tr><td>6</td><td>ForSigVer</td><td>Force Signature Verification</td></tr>
            <tr><td>7</td><td>Hold</td><td>Hold</td></tr>
            <tr><td>8</td><td>SecErr</td><td>Security Error</td></tr>
            <tr><td>9</td><td>CallAcq</td><td>Call Acquirer</td></tr>
            <tr><td>10</td><td>DNH</td><td>Do Not Honour</td></tr>
            <tr><td>11</td><td>RtnCrd</td><td>Retain Card</td></tr>
            <tr><td>12</td><td>ExprdCrd</td><td>Expired Card</td></tr>
            <tr><td>13</td><td>InvldCrd</td><td>Invalid Card No</td></tr>
            <tr><td>14</td><td>PinExcd</td><td>Pin Tries Exceeded</td></tr>
            <tr><td>15</td><td>PinInvld</td><td>Pin Invalid</td></tr>
            <tr><td>16</td><td>AuthReq</td><td>Authentication Required</td></tr>
            <tr><td>17</td><td>AuthenFail</td><td>Authentication Failed</td></tr>
            <tr><td>18</td><td>Verified</td><td>Card Verified</td></tr>
            <tr><td>19</td><td>Cancelled</td><td>Cancelled</td></tr>
            <tr><td>20</td><td>Un</td><td>Unknown</td></tr>
            <tr><td>21</td><td>Challenged</td><td>Challenged</td></tr>
            <tr><td>22</td><td>Decoupled</td><td>Decoupled</td></tr>
            <tr><td>23</td><td>Denied</td><td>Permission Denied</td></tr>
            </table>
          example: 1
          format: int32
          type: integer
        result_code:
          description: A result code of the transaction identifying the result of
            the transaction for success, rejection or decline.
          example: "0"
          type: string
        scheme:
          description: |
            A name of the card scheme of the transaction that processed the transaction such as Visa or MasterCard.
          example: Visa
          type: string
        transno:
          description: |
            The resulting transaction number, ordered incrementally from 1 for every merchant_id. The value will default to less than 1
            for transactions that do not have a transaction number issued.
          example: 78416
          format: int32
          type: integer
      required:
      - account_id
      - identifier
      - merchantid
      - message
      - result
      - result_code
      type: object
    Bin:
      example:
        bin_description: Platinum Card
        bin_commercial: true
        bin_country_issued: bin_country_issued
        bin_credit: true
        scheme: Visa
        bin_corporate: true
        bin_currency: bin_currency
        bin_debit: true
        bin_eu: true
      properties:
        bin_commercial:
          description: Defines whether the card is a commercial card.
          type: boolean
        bin_corporate:
          description: Defines whether the card is a corporate business card.
          type: boolean
        bin_country_issued:
          description: The determined country where the card was issued.
          type: string
        bin_credit:
          description: Defines whether the card is a credit card.
          type: boolean
        bin_currency:
          description: The default currency determined for the card.
          type: string
        bin_debit:
          description: Defines whether the card is a debit card.
          type: boolean
        bin_description:
          description: A description of the bin on the card to identify what type
            of product the card is.
          example: Platinum Card
          type: string
        bin_eu:
          description: Defines whether the card is regulated within the EU.
          type: boolean
        scheme:
          description: The scheme that issued the card.
          example: Visa
          type: string
      type: object
    BinLookup:
      example:
        bin: 543712
      properties:
        bin:
          description: A bin value to use for lookup.
          example: 543712
          format: int32
          maxLength: 12
          minLength: 6
          type: integer
      required:
      - bin
      type: object
    CResAuthRequest:
      example:
        cres: x90+vZ/7Ll05Vid/jPfQn8adw+4D/vRDUGT19kndW97Hfirbv66ycfSp8jNlvy7PkHbx44NEt3vo...
      properties:
        cres:
          description: |
            The challenge response data forwarded by the ACS in 3D-Secure V2 processing. Data
            should be forwarded to CityPay unchanged for subsequent authorisation and processing.
          example: x90+vZ/7Ll05Vid/jPfQn8adw+4D/vRDUGT19kndW97Hfirbv66ycfSp8jNlvy7PkHbx44NEt3vo...
          format: base64
          type: string
      type: object
    CResDirect:
      properties:
        cres:
          description: The CRES from the ACS.
          example: x90+vZ/7Ll05Vid/jPfQn8adw+4D/vRDUGT19kndW97Hfirbv66ycfSp8jNlvy7PkHbx44NEt3vo...
          format: base64
          type: string
        threeDSSessionData:
          description: The session data from the ACS.
          type: string
      type: object
    CaptureRequest:
      example:
        identifier: 95b857a1-5955-4b86-963c-5a6dbfc4fb95
        amount: 3600
        merchantid: 11223344
        airline_data:
          number_in_party: 2
          no_air_segments: 2
          ticket_issue_name: Issue Name
          transaction_type: TKT
          eticket_indicator: true
          passenger_name: NE Person
          ticket_issue_city: London
          conjunction_ticket_indicator: false
          segment4:
            segment_fare: 7500
            flight_number: "772"
            stop_over_indicator: "1"
            class_service_code: CC
            departure_date: 2020-08-01T00:00:00.000+0000
            departure_location_code: JER
            arrival_location_code: SOU
            carrier_code: ZZ
          ticket_issue_date: 2020-08-01T00:00:00.000+0000
          segment3:
            segment_fare: 7500
            flight_number: "772"
            stop_over_indicator: "1"
            class_service_code: CC
            departure_date: 2020-08-01T00:00:00.000+0000
            departure_location_code: JER
            arrival_location_code: SOU
            carrier_code: ZZ
          segment2:
            segment_fare: 7500
            flight_number: "772"
            stop_over_indicator: "1"
            class_service_code: CC
            departure_date: 2020-08-01T00:00:00.000+0000
            departure_location_code: JER
            arrival_location_code: SOU
            carrier_code: ZZ
          segment1:
            segment_fare: 7500
            flight_number: "772"
            stop_over_indicator: "1"
            class_service_code: CC
            departure_date: 2020-08-01T00:00:00.000+0000
            departure_location_code: JER
            arrival_location_code: SOU
            carrier_code: ZZ
          original_ticket_no: original_ticket_no
          ticket_no: A112233
          carrier_name: EG Air
        event_management:
          event_organiser_id: event_organiser_id
          payment_type: payment_type
          event_id: event_id
          event_end_date: 2000-01-23
          event_start_date: 2000-01-23
        transno: 78416
      properties:
        airline_data:
          $ref: '#/components/schemas/AirlineAdvice'
        amount:
          description: |
            The completion amount provided in the lowest unit of currency for the specific currency of the merchant,
            with a variable length to a maximum of 12 digits. No decimal points to be included. For example with
            GBP 75.45 use the value 7545. Please check that you do not supply divisional characters such as 1,024 in the
            request which may be caused by some number formatters.

            If no amount is supplied, the original processing amount is used.
          example: 3600
          format: int32
          maxLength: 9
          minLength: 1
          type: integer
        event_management:
          $ref: '#/components/schemas/EventDataModel'
        identifier:
          description: The identifier of the transaction to capture. If an empty value
            is supplied then a `trans_no` value must be supplied.
          example: 95b857a1-5955-4b86-963c-5a6dbfc4fb95
          maxLength: 50
          minLength: 4
          type: string
        merchantid:
          description: Identifies the merchant account to perform the capture for.
          example: 11223344
          format: int32
          type: integer
        transno:
          description: The transaction number of the transaction to look up and capture.
            If an empty value is supplied then an identifier value must be supplied.
          example: 78416
          format: int32
          type: integer
      required:
      - merchantid
      type: object
    Card:
      example:
        bin_description: Platinum Card
        bin_commercial: true
        scheme: Visa
        date_created: 2020-01-02T18:32:28Z
        bin_currency: bin_currency
        expyear: 2025
        label: Visa/0002
        card_id: card_id
        label2: Visa/0002,Exp:2304
        token: ctPCAPyNyCkx3Ry8wGyv8khC3ch2hUSB3Db..Qzr
        card_status: card_status
        bin_country_issued: bin_country_issued
        default: true
        last4digits: "2"
        bin_credit: true
        bin_corporate: true
        expmonth: 9
        bin_debit: true
        bin_eu: true
        name_on_card: MR NE BODY
      properties:
        bin_commercial:
          description: Defines whether the card is a commercial card.
          type: boolean
        bin_corporate:
          description: Defines whether the card is a corporate business card.
          type: boolean
        bin_country_issued:
          description: The determined country where the card was issued.
          type: string
        bin_credit:
          description: Defines whether the card is a credit card.
          type: boolean
        bin_currency:
          description: The default currency determined for the card.
          type: string
        bin_debit:
          description: Defines whether the card is a debit card.
          type: boolean
        bin_description:
          description: A description of the bin on the card to identify what type
            of product the card is.
          example: Platinum Card
          type: string
        bin_eu:
          description: Defines whether the card is regulated within the EU.
          type: boolean
        card_id:
          description: The id of the card that is returned. Should be used for referencing
            the card when perform any changes.
          type: string
        card_status:
          description: |
            The status of the card such, valid values are

             - ACTIVE the card is active for processing

             - INACTIVE the card is not active for processing

             - EXPIRED for cards that have passed their expiry date.
          type: string
        date_created:
          description: The date time of when the card was created.
          example: 2020-01-02T18:32:28Z
          format: date-time
          type: string
        default:
          description: Determines if the card is the default card for the account
            and should be regarded as the first option to be used for processing.
          type: boolean
        expmonth:
          description: The expiry month of the card.
          example: 9
          format: int32
          maximum: 12
          minimum: 1
          type: integer
        expyear:
          description: The expiry year of the card.
          example: 2025
          format: int32
          maximum: 2100
          minimum: 2000
          type: integer
        label:
          description: A label which identifies this card.
          example: Visa/0002
          type: string
        label2:
          description: A label which also provides the expiry date of the card.
          example: Visa/0002,Exp:2304
          type: string
        last4digits:
          description: The last 4 digits of the card to aid in identification.
          example: "2"
          type: string
        name_on_card:
          description: The name on the card.
          example: MR NE BODY
          maxLength: 45
          minLength: 2
          type: string
        scheme:
          description: The scheme that issued the card.
          example: Visa
          type: string
        token:
          description: A token that can be used to process against the card.
          example: ctPCAPyNyCkx3Ry8wGyv8khC3ch2hUSB3Db..Qzr
          format: base58
          type: string
      type: object
    CardHolderAccount:
      example:
        account_id: aaabbb-cccddd-eee
        cards:
        - bin_description: Platinum Card
          bin_commercial: true
          scheme: Visa
          date_created: 2020-01-02T18:32:28Z
          bin_currency: bin_currency
          expyear: 2025
          label: Visa/0002
          card_id: card_id
          label2: Visa/0002,Exp:2304
          token: ctPCAPyNyCkx3Ry8wGyv8khC3ch2hUSB3Db..Qzr
          card_status: card_status
          bin_country_issued: bin_country_issued
          default: true
          last4digits: "2"
          bin_credit: true
          bin_corporate: true
          expmonth: 9
          bin_debit: true
          bin_eu: true
          name_on_card: MR NE BODY
        - bin_description: Platinum Card
          bin_commercial: true
          scheme: Visa
          date_created: 2020-01-02T18:32:28Z
          bin_currency: bin_currency
          expyear: 2025
          label: Visa/0002
          card_id: card_id
          label2: Visa/0002,Exp:2304
          token: ctPCAPyNyCkx3Ry8wGyv8khC3ch2hUSB3Db..Qzr
          card_status: card_status
          bin_country_issued: bin_country_issued
          default: true
          last4digits: "2"
          bin_credit: true
          bin_corporate: true
          expmonth: 9
          bin_debit: true
          bin_eu: true
          name_on_card: MR NE BODY
        unique_id: unique_id
        default_card_index: 0
        date_created: 2020-01-02T18:32:28Z
        contact:
          area: London
          country: GB
          firstname: John
          address3: address3
          address2: Westminster
          address1: 79 Parliament St
          mobile_no: "447790123456"
          postcode: L1 789
          title: Mr
          lastname: Smith
          telephone_no: "442030123456"
          company: Acme Ltd
          email: card.holder@citypay.com
        last_modified: 2020-01-02T18:32:28Z
        default_card_id: default_card_id
        status: status
      properties:
        account_id:
          description: |
            The account id of the card holder account provided by the merchant which uniquely identifies the account.
          example: aaabbb-cccddd-eee
          maxLength: 50
          minLength: 5
          type: string
        cards:
          items:
            $ref: '#/components/schemas/Card'
          type: array
        contact:
          $ref: '#/components/schemas/ContactDetails'
        date_created:
          description: The date and time the account was created.
          example: 2020-01-02T18:32:28Z
          format: date-time
          type: string
        default_card_id:
          description: The id of the default card.
          type: string
        default_card_index:
          description: The index in the array of the default card.
          format: int32
          type: integer
        last_modified:
          description: The date and time the account was last modified.
          example: 2020-01-02T18:32:28Z
          format: date-time
          type: string
        status:
          description: |
            Defines the status of the account for processing valid values are

             - ACTIVE for active accounts that are able to process

             - DISABLED for accounts that are currently disabled for processing.
          type: string
        unique_id:
          description: A unique id of the card holder account which uniquely identifies
            the stored account. This value is not searchable.
          type: string
      required:
      - account_id
      - contact
      type: object
    CardStatus:
      example:
        card_status: card_status
        default: true
      properties:
        card_status:
          description: The status of the card to set, valid values are ACTIVE or INACTIVE.
          type: string
        default:
          description: Defines if the card is set as the default.
          type: boolean
      type: object
    ChargeRequest:
      example:
        identifier: 95b857a1-5955-4b86-963c-5a6dbfc4fb95
        threedsecure:
          browserLanguage: browserLanguage
          browserColorDepth: browserColorDepth
          browserJavaEnabled: browserJavaEnabled
          tds_policy: tds_policy
          browserIP: browserIP
          browserTZ: browserTZ
          cp_bx: FjaW50b3NoOyBJbnRlbCBNYWMgT1MgWCAx...
          downgrade1: true
          accept_headers: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
          browserScreenHeight: browserScreenHeight
          merchant_termurl: https://mysite.com/acs/return
          browserScreenWidth: browserScreenWidth
          user_agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_3) AppleWebKit/537.36
            (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36
        amount: 3600
        csc_policy: csc_policy
        trans_info: trans_info
        duplicate_policy: duplicate_policy
        token: ctPCAPyNyCkx3Ry8wGyv8khC3ch2hUSB3Db..Qzr
        csc: "12"
        initiation: initiation
        cardholder_agreement: cardholder_agreement
        merchantid: 11223344
        match_avsa: match_avsa
        avs_postcode_policy: avs_postcode_policy
        currency: GBP
        trans_type: trans_type
      properties:
        amount:
          description: |
            The amount to authorise in the lowest unit of currency with a variable length to a maximum of 12 digits.

            No decimal points are to be included and no divisional characters such as 1,024.

            The amount should be the total amount required for the transaction.

            For example with GBP £1,021.95 the amount value is 102195.
          example: 3600
          format: int32
          maxLength: 9
          minLength: 1
          type: integer
        avs_postcode_policy:
          description: |
            A policy value which determines whether an AVS postcode policy is enforced or bypassed.

            Values are
             `0` for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.

             `1` for an enforced policy. Transactions that are enforced will be rejected if the AVS postcode numeric value does not match.

             `2` to bypass. Transactions that are bypassed will be allowed through even if the postcode did not match.

             `3` to ignore. Transactions that are ignored will bypass the result and not send postcode details for authorisation.
          type: string
        cardholder_agreement:
          description: |
            Merchant-initiated transactions (MITs) are payments you trigger, where the cardholder has previously consented
            to you carrying out such payments. These may be scheduled (such as recurring payments and installments) or
            unscheduled (like account top-ups triggered by balance thresholds and no-show charges).

            Scheduled
            ---
            These are regular payments using stored card details, like installments or a monthly subscription fee.

            - `I` Instalment - A single purchase of goods or services billed to a cardholder in multiple transactions, over a period of time agreed by the cardholder and you.

            - `R` Recurring - Transactions processed at fixed, regular intervals not to exceed one year between transactions, representing an agreement between a cardholder and you to purchase goods or services provided over a period of time.

            Unscheduled
            ---
            These are payments using stored card details that do not occur on a regular schedule, like top-ups for a
            digital wallet triggered by the balance falling below a certain threshold.

            - `A` Reauthorisation - a purchase made after the original purchase. A common scenario is delayed/split shipments.

            - `C` Unscheduled Payment - A transaction using a stored credential for a fixed or variable amount that does not occur on a scheduled or regularly occurring transaction date. This includes account top-ups triggered by balance thresholds.

            - `D` Delayed Charge - A delayed charge is typically used in hotel, cruise lines and vehicle rental environments to perform a supplemental account charge after original services are rendered.

            - `L` Incremental - An incremental authorisation is typically found in hotel and car rental environments, where the cardholder has agreed to pay for any service incurred during the duration of the contract. An incremental authorisation is where you need to seek authorisation of further funds in addition to what you have originally requested. A common scenario is additional services charged to the contract, such as extending a stay in a hotel.

            - `S` Resubmission - When the original purchase occurred, but you were not able to get authorisation at the time the goods or services were provided. It should be only used where the goods or services have already been provided, but the authorisation request is declined for insufficient funds.

            - `X` No-show - A no-show is a transaction where you are enabled to charge for services which the cardholder entered into an agreement to purchase, but the cardholder did not meet the terms of the agreement.
          maxLength: 1
          type: string
        csc:
          description: |
            The Card Security Code (CSC) (also known as CV2/CVV2) is normally found on the back of the card
            (American Express has it on the front). The value helps to identify posession of the card as it is not
            available within the chip or magnetic swipe.

            When forwarding the CSC, please ensure the value is a string as some values start with 0 and this will be stripped
            out by any integer parsing.

            The CSC number aids fraud prevention in Mail Order and Internet payments.

            Business rules are available on your account to identify whether to accept
            or decline transactions based on mismatched results of the CSC.

            The Payment Card Industry (PCI) requires that at no stage of a transaction should the CSC be stored.

            This applies to all entities handling card data.

            It should also not be used in any hashing process.

            CityPay do not store the value and have no method of retrieving the value once the transaction has been processed.
            For this reason, duplicate checking is unable to determine the CSC in its duplication check algorithm.
          example: "12"
          maxLength: 4
          minLength: 3
          type: string
        csc_policy:
          description: |
            A policy value which determines whether a CSC policy is enforced or bypassed.

            Values are
             `0` for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.

             `1` for an enforced policy. Transactions that are enforced will be rejected if the CSC value does not match.

             `2` to bypass. Transactions that are bypassed will be allowed through even if the CSC did not match.

             `3` to ignore. Transactions that are ignored will bypass the result and not send the CSC details for authorisation.
          type: string
        currency:
          description: The processing currency for the transaction. Will default to
            the merchant account currency.
          example: GBP
          maxLength: 3
          minLength: 3
          type: string
        duplicate_policy:
          description: |
            A policy value which determines whether a duplication policy is enforced or bypassed. A duplication check has a window
            of time set against your account within which it can action. If a previous transaction with matching values occurred within
            the window, any subsequent transaction will result in a T001 result.

            Values are
             `0` for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.

             `1` for an enforced policy. Transactions that are enforced will be checked for duplication within the duplication window.

             `2` to bypass. Transactions that are bypassed will not be checked for duplication within the duplication window.

             `3` to ignore. Transactions that are ignored will have the same affect as bypass.
          type: string
        identifier:
          description: |
            The identifier of the transaction to process. The value should be a valid reference and may be used to perform
             post processing actions and to aid in reconciliation of transactions.

            The value should be a valid printable string with ASCII character ranges from 0x32 to 0x127.

            The identifier is recommended to be distinct for each transaction such as a [random unique identifier](https://en.wikipedia.org/wiki/Universally_unique_identifier)
            this will aid in ensuring each transaction is identifiable.

            When transactions are processed they are also checked for duplicate requests. Changing the identifier on a subsequent
            request will ensure that a transaction is considered as different.
          example: 95b857a1-5955-4b86-963c-5a6dbfc4fb95
          maxLength: 50
          minLength: 4
          type: string
        initiation:
          description: |
            Transactions charged using the API are defined as:

            **Cardholder Initiated**: A _cardholder initiated transaction_ (CIT) is where the cardholder selects the
            card for use for a purchase using previously stored details. An example would be a customer buying an item from
            your website after being present with their saved card details at checkout.

            **Merchant Intiated**: A _merchant initiated transaction_ (MIT) is an authorisation initiated where you as the
             merchant submit a cardholders previously stored details without the cardholder's participation. An example would
             be a subscription to a membership scheme to debit their card monthly.

            MITs have different reasons such as reauthorisation, delayed, unscheduled, incremental, recurring, instalment, no-show or resubmission.

            The following values apply

             - `M` - specifies that the transaction is initiated by the merchant

             - `C` - specifies that the transaction is initiated by the cardholder

            Where transactions are merchant initiated, a valid cardholder agreement must be defined.
          maxLength: 1
          type: string
        match_avsa:
          description: |
            A policy value which determines whether an AVS address policy is enforced, bypassed or ignored.

            Values are
             `0` for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.

             `1` for an enforced policy. Transactions that are enforced will be rejected if the AVS address numeric value does not match.

             `2` to bypass. Transactions that are bypassed will be allowed through even if the address did not match.

             `3` to ignore. Transactions that are ignored will bypass the result and not send address numeric details for authorisation.
          type: string
        merchantid:
          description: Identifies the merchant account to perform processing for.
          example: 11223344
          format: int32
          type: integer
        threedsecure:
          $ref: '#/components/schemas/ThreeDSecure'
        token:
          description: |
            A tokenised form of a card that belongs to a card holder's account and that
            has been previously registered. The token is time based and will only be active for
            a short duration. The value is therefore designed not to be stored remotely for future
            use.


            Tokens will start with ct and are resiliently tamper proof using HMacSHA-256.
            No sensitive card data is stored internally within the token.


            Each card will contain a different token and the value may be different on any retrieval call.


            The value can be presented for payment as a selection value to an end user in a web application.
          example: ctPCAPyNyCkx3Ry8wGyv8khC3ch2hUSB3Db..Qzr
          format: base58
          type: string
        trans_info:
          description: Further information that can be added to the transaction will
            display in reporting. Can be used for flexible values such as operator
            id.
          maxLength: 50
          type: string
        trans_type:
          description: The type of transaction being submitted. Normally this value
            is not required and your account manager may request that you set this
            field.
          maxLength: 1
          type: string
      required:
      - amount
      - identifier
      - merchantid
      - token
      type: object
    CheckBatchStatus:
      example:
        client_account_id: AC1
        batch_id:
        - 78
        - 78
      properties:
        batch_id:
          items:
            description: The batch id to obtain the status for.
            example: 78
            format: int32
            maxLength: 8
            minimum: 1
            type: integer
          type: array
        client_account_id:
          description: The batch account id to obtain the batch for. Defaults to your
            client id if not provided.
          example: AC1
          maxLength: 20
          minLength: 3
          type: string
      required:
      - batch_id
      type: object
    CheckBatchStatusResponse:
      example:
        batches:
        - batch_id: 35
          batch_status: COMPLETE
          batch_date: 2020-01-02T00:00:00.000+0000
        - batch_id: 35
          batch_status: COMPLETE
          batch_date: 2020-01-02T00:00:00.000+0000
      properties:
        batches:
          items:
            $ref: '#/components/schemas/Batch'
          type: array
      type: object
    ContactDetails:
      example:
        area: London
        country: GB
        firstname: John
        address3: address3
        address2: Westminster
        address1: 79 Parliament St
        mobile_no: "447790123456"
        postcode: L1 789
        title: Mr
        lastname: Smith
        telephone_no: "442030123456"
        company: Acme Ltd
        email: card.holder@citypay.com
      properties:
        address1:
          description: The first line of the address for the shipping contact.
          example: 79 Parliament St
          maxLength: 50
          type: string
        address2:
          description: The second line of the address for the shipping contact.
          example: Westminster
          maxLength: 50
          type: string
        address3:
          description: The third line of the address for the shipping contact.
          maxLength: 50
          type: string
        area:
          description: The area such as city, department, parish for the shipping
            contact.
          example: London
          maxLength: 50
          type: string
        company:
          description: The company name for the shipping contact if the contact is
            a corporate contact.
          example: Acme Ltd
          maxLength: 50
          type: string
        country:
          description: |
            The country code in ISO 3166 format. The country value may be used for fraud analysis and for
              acceptance of the transaction.
          example: GB
          maxLength: 2
          minLength: 2
          type: string
        email:
          description: An email address for the shipping contact which may be used
            for correspondence.
          example: card.holder@citypay.com
          maxLength: 254
          type: string
        firstname:
          description: The first name  of the shipping contact.
          example: John
          type: string
        lastname:
          description: The last name or surname of the shipping contact.
          example: Smith
          type: string
        mobile_no:
          description: A mobile number for the shipping contact the mobile number
            is often required by delivery companies to ensure they are able to be
            in contact when required.
          example: "447790123456"
          maxLength: 20
          type: string
        postcode:
          description: The postcode or zip code of the address which may be used for
            fraud analysis.
          example: L1 789
          maxLength: 16
          type: string
        telephone_no:
          description: A telephone number for the shipping contact.
          example: "442030123456"
          maxLength: 20
          type: string
        title:
          description: A title for the shipping contact such as Mr, Mrs, Ms, M. Mme.
            etc.
          example: Mr
          type: string
      type: object
    Decision:
      example:
        RequestChallenged:
          creq: creq
          merchantid: 11223344
          acs_url: https://acs.cardissuer.com/3dsv1
          threedserver_trans_id: threedserver_trans_id
          transno: 78416
        AuthenRequired:
          pareq: eNrNWdnOo0qSfpXSmUuf0+w2tFy/lOyYxYDZ79h3sAEbm6cfbFfV+bu6pqe7R2qNJeQkiIwlMyK+...
          md: md
          acs_url: https://acs.cardissuer.com/3dsv1
        AuthResponse:
          authen_result: authen_result
          atrn: atrn
          maskedpan: 4***********0002
          scheme: Visa
          sha256: sha256
          eci: eci
          transno: 78416
          result: 1
          datetime: 2020-01-02T18:32:28Z
          authorised: true
          context: aspiu352908ns47n343598bads
          currency: GBP
          avs_result: avs_result
          live: true
          trans_status: trans_status
          csc_result: csc_result
          bin_description: Platinum Card
          identifier: 95b857a1-5955-4b86-963c-5a6dbfc4fb95
          amount: 3600
          bin_commercial: true
          result_message: Accepted Transaction
          atsd: atsd
          authcode: 001245A
          cavv: cavv
          merchantid: 11223344
          result_code: "0"
          bin_debit: true
      properties:
        AuthenRequired:
          $ref: '#/components/schemas/AuthenRequired'
        AuthResponse:
          $ref: '#/components/schemas/AuthResponse'
        RequestChallenged:
          $ref: '#/components/schemas/RequestChallenged'
      type: object
    DirectPostRequest:
      example:
        bill_to:
          area: London
          country: GB
          firstname: John
          address3: address3
          address2: Westminster
          address1: 79 Parliament St
          mobile_no: "447790123456"
          postcode: L1 789
          title: Mr
          lastname: Smith
          telephone_no: "442030123456"
          company: Acme Ltd
          email: card.holder@citypay.com
        identifier: 95b857a1-5955-4b86-963c-5a6dbfc4fb95
        threedsecure:
          browserLanguage: browserLanguage
          browserColorDepth: browserColorDepth
          browserJavaEnabled: browserJavaEnabled
          tds_policy: tds_policy
          browserIP: browserIP
          browserTZ: browserTZ
          cp_bx: FjaW50b3NoOyBJbnRlbCBNYWMgT1MgWCAx...
          downgrade1: true
          accept_headers: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
          browserScreenHeight: browserScreenHeight
          merchant_termurl: https://mysite.com/acs/return
          browserScreenWidth: browserScreenWidth
          user_agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_3) AppleWebKit/537.36
            (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36
        amount: 3600
        expyear: 2025
        csc_policy: csc_policy
        redirect_success: https://pay.mystore.com/continue_success
        trans_info: trans_info
        nonce: 0123456789ABCDEF
        mac: 3896FBC43674AF59478DAF7F546FA4D4CB89981A936E6AAE997E43B55DF6C39D
        duplicate_policy: duplicate_policy
        csc: "12"
        expmonth: 9
        redirect_failure: https://pay.mystore.com/continue_failure
        match_avsa: match_avsa
        avs_postcode_policy: avs_postcode_policy
        currency: GBP
        cardnumber: 4000 0000 0000 0002
        ship_to:
          area: London
          country: GB
          firstname: John
          address3: address3
          address2: Westminster
          address1: 79 Parliament St
          mobile_no: "447790123456"
          postcode: L1 789
          title: Mr
          lastname: Smith
          telephone_no: "442030123456"
          company: Acme Ltd
          email: card.holder@citypay.com
        name_on_card: MR NE BODY
        trans_type: trans_type
      properties:
        amount:
          description: |
            The amount to authorise in the lowest unit of currency with a variable length to a maximum of 12 digits.

            No decimal points are to be included and no divisional characters such as 1,024.

            The amount should be the total amount required for the transaction.

            For example with GBP £1,021.95 the amount value is 102195.
          example: 3600
          format: int32
          maxLength: 9
          minLength: 1
          type: integer
        avs_postcode_policy:
          description: |
            A policy value which determines whether an AVS postcode policy is enforced or bypassed.

            Values are
             `0` for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.

             `1` for an enforced policy. Transactions that are enforced will be rejected if the AVS postcode numeric value does not match.

             `2` to bypass. Transactions that are bypassed will be allowed through even if the postcode did not match.

             `3` to ignore. Transactions that are ignored will bypass the result and not send postcode details for authorisation.
          type: string
        bill_to:
          $ref: '#/components/schemas/ContactDetails'
        cardnumber:
          description: |
            The card number (PAN) with a variable length to a maximum of 21 digits in numerical form.
            Any non numeric characters will be stripped out of the card number, this includes whitespace or separators internal of the
            provided value.

            The card number must be treated as sensitive data. We only provide an obfuscated value in logging and reporting.
             The plaintext value is encrypted in our database using AES 256 GMC bit encryption for settlement or refund purposes.

            When providing the card number to our gateway through the authorisation API you will be handling the card data on
            your application. This will require further PCI controls to be in place and this value must never be stored.
          example: 4000 0000 0000 0002
          maxLength: 22
          minLength: 12
          type: string
        csc:
          description: |
            The Card Security Code (CSC) (also known as CV2/CVV2) is normally found on the back of the card
            (American Express has it on the front). The value helps to identify posession of the card as it is not
            available within the chip or magnetic swipe.

            When forwarding the CSC, please ensure the value is a string as some values start with 0 and this will be stripped
            out by any integer parsing.

            The CSC number aids fraud prevention in Mail Order and Internet payments.

            Business rules are available on your account to identify whether to accept
            or decline transactions based on mismatched results of the CSC.

            The Payment Card Industry (PCI) requires that at no stage of a transaction should the CSC be stored.

            This applies to all entities handling card data.

            It should also not be used in any hashing process.

            CityPay do not store the value and have no method of retrieving the value once the transaction has been processed.
            For this reason, duplicate checking is unable to determine the CSC in its duplication check algorithm.
          example: "12"
          maxLength: 4
          minLength: 3
          type: string
        csc_policy:
          description: |
            A policy value which determines whether a CSC policy is enforced or bypassed.

            Values are
             `0` for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.

             `1` for an enforced policy. Transactions that are enforced will be rejected if the CSC value does not match.

             `2` to bypass. Transactions that are bypassed will be allowed through even if the CSC did not match.

             `3` to ignore. Transactions that are ignored will bypass the result and not send the CSC details for authorisation.
          type: string
        currency:
          description: The processing currency for the transaction. Will default to
            the merchant account currency.
          example: GBP
          maxLength: 3
          minLength: 3
          type: string
        duplicate_policy:
          description: |
            A policy value which determines whether a duplication policy is enforced or bypassed. A duplication check has a window
            of time set against your account within which it can action. If a previous transaction with matching values occurred within
            the window, any subsequent transaction will result in a T001 result.

            Values are
             `0` for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.

             `1` for an enforced policy. Transactions that are enforced will be checked for duplication within the duplication window.

             `2` to bypass. Transactions that are bypassed will not be checked for duplication within the duplication window.

             `3` to ignore. Transactions that are ignored will have the same affect as bypass.
          type: string
        expmonth:
          description: |
            The month of expiry of the card. The month value should be a numerical value between 1 and 12.
          example: 9
          format: int32
          maximum: 12
          minimum: 1
          type: integer
        expyear:
          description: |
            The year of expiry of the card.
          example: 2025
          format: int32
          maximum: 2100
          minimum: 2000
          type: integer
        identifier:
          description: |
            The identifier of the transaction to process. The value should be a valid reference and may be used to perform
             post processing actions and to aid in reconciliation of transactions.

            The value should be a valid printable string with ASCII character ranges from 0x32 to 0x127.

            The identifier is recommended to be distinct for each transaction such as a [random unique identifier](https://en.wikipedia.org/wiki/Universally_unique_identifier)
            this will aid in ensuring each transaction is identifiable.

            When transactions are processed they are also checked for duplicate requests. Changing the identifier on a subsequent
            request will ensure that a transaction is considered as different.
          example: 95b857a1-5955-4b86-963c-5a6dbfc4fb95
          maxLength: 50
          minLength: 4
          type: string
        mac:
          description: |
            A message authentication code ensures the data is authentic and that the intended amount has
            not been tampered with. The mac value is generated using a hash-based mac value. The following algorithm is used.
            - A key (k) is derived from your licence key
            - A value (v) is produced by concatenating the nonce, amount value and identifier, such as a purchase
              with nonce `0123456789ABCDEF` an amount of £275.95 and an identifier of OD-12345678 would become
              `0123456789ABCDEF27595OD-12345678` and extracting the UTF-8 byte values
            - The result from HMAC_SHA256(k, v) is hex-encoded (upper-case)
            - For instance, a licence key of `LK123456789`, a nonce of `0123456789ABCDEF`, an amount of `27595` and an identifier of `OD-12345678`
             would generate a MAC of `163DBAB194D743866A9BCC7FC9C8A88FCD99C6BBBF08D619291212D1B91EE12E`.
          example: 3896FBC43674AF59478DAF7F546FA4D4CB89981A936E6AAE997E43B55DF6C39D
          format: hex
          type: string
        match_avsa:
          description: |
            A policy value which determines whether an AVS address policy is enforced, bypassed or ignored.

            Values are
             `0` for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.

             `1` for an enforced policy. Transactions that are enforced will be rejected if the AVS address numeric value does not match.

             `2` to bypass. Transactions that are bypassed will be allowed through even if the address did not match.

             `3` to ignore. Transactions that are ignored will bypass the result and not send address numeric details for authorisation.
          type: string
        name_on_card:
          description: |
            The card holder name as appears on the card such as MR N E BODY. Required for some acquirers.
          example: MR NE BODY
          maxLength: 45
          minLength: 2
          type: string
        nonce:
          description: |
            A random value Hex string (uppercase) which is provided to the API to perform a digest.
            The value will be used in any digest function.
          example: 0123456789ABCDEF
          format: hex
          type: string
        redirect_failure:
          description: |
            The URL used to redirect back to your site when a transaction has been rejected or declined. Required if a url-encoded request.
          example: https://pay.mystore.com/continue_failure
          format: url
          type: string
        redirect_success:
          description: |
            The URL used to redirect back to your site when a transaction has been tokenised or authorised. Required if a url-encoded request.
          example: https://pay.mystore.com/continue_success
          format: url
          type: string
        ship_to:
          $ref: '#/components/schemas/ContactDetails'
        threedsecure:
          $ref: '#/components/schemas/ThreeDSecure'
        trans_info:
          description: Further information that can be added to the transaction will
            display in reporting. Can be used for flexible values such as operator
            id.
          maxLength: 50
          type: string
        trans_type:
          description: The type of transaction being submitted. Normally this value
            is not required and your account manager may request that you set this
            field.
          maxLength: 1
          type: string
      required:
      - amount
      - cardnumber
      - expmonth
      - expyear
      - identifier
      - mac
      type: object
    DirectTokenAuthRequest:
      example:
        redirect_failure: https://pay.mystore.com/continue_failure
        redirect_success: https://pay.mystore.com/continue_success
        nonce: 0123456789ABCDEF
        token: ctPCAPyNyCkx3Ry8wGyv8khC3ch2hUSB3Db..Qzr
      properties:
        nonce:
          description: |
            A random value string which is provided to the API to perform a digest.
            The value will be used by its UTF-8 byte representation of any digest function.
          example: 0123456789ABCDEF
          format: hex
          type: string
        redirect_failure:
          description: |
            The URL used to redirect back to your site when a transaction has been rejected or declined. Required if a url-encoded request.
          example: https://pay.mystore.com/continue_failure
          format: url
          type: string
        redirect_success:
          description: |
            The URL used to redirect back to your site when a transaction has been authorised. Required if a url-encoded request.
          example: https://pay.mystore.com/continue_success
          format: url
          type: string
        token:
          description: |
            The token required to process the transaction as presented by the direct post methodology.
          example: ctPCAPyNyCkx3Ry8wGyv8khC3ch2hUSB3Db..Qzr
          format: base58
          type: string
      type: object
    DomainKeyCheckRequest:
      example:
        domain_key: 3MEcU8cEf...QMeebACxcQVejmT1Wi
      properties:
        domain_key:
          description: |
            The domain key to check.
          example: 3MEcU8cEf...QMeebACxcQVejmT1Wi
          maxLength: 512
          minLength: 64
          type: string
      required:
      - domain_key
      type: object
    DomainKeyRequest:
      example:
        merchantid: 11223344
        domain:
        - domain
        - domain
        live: true
      properties:
        domain:
          items:
            type: string
          type: array
          x-description: |
            The domains the domain key is registered for. you should only provide the
            host and no ports.
        live:
          description: |
            Specifies if the key is to be used for production. Defaults to false.
          example: true
          type: boolean
        merchantid:
          description: |
            The merchant id the domain key is to be used for.
          example: 11223344
          format: int32
          type: integer
      required:
      - domain
      - merchantid
      type: object
    DomainKeyResponse:
      example:
        domain_key: 3MEcU8cEf...QMeebACxcQVejmT1Wi
        merchantid: 11223344
        date_created: 2020-01-02T18:32:28Z
        domain:
        - domain
        - domain
        live: true
      properties:
        date_created:
          description: |
            The date the domain key was generated.
          example: 2020-01-02T18:32:28Z
          format: date-time
          type: string
        domain:
          items:
            type: string
          type: array
          x-description: |
            The domains the domain key is registered for. you should only provide the
            host and no ports.
        domain_key:
          description: |
            The domain key generated.
          example: 3MEcU8cEf...QMeebACxcQVejmT1Wi
          maxLength: 512
          minLength: 64
          type: string
        live:
          description: |
            true if this key is a production key.
          example: true
          type: boolean
        merchantid:
          description: |
            The merchant id the domain key is to be used for.
          example: 11223344
          format: int32
          type: integer
      required:
      - domain
      - merchantid
      type: object
    Error:
      properties:
        code:
          description: A response code providing a result of the process.
          example: "0"
          maxLength: 4
          minLength: 3
          type: string
        context:
          description: A context id of the process used for referencing transactions
            through support.
          example: aspiu352908ns47n343598bads
          type: string
        identifier:
          description: An identifier if presented in the original request.
          example: 95b857a1-5955-4b86-963c-5a6dbfc4fb95
          maxLength: 50
          minLength: 4
          type: string
        message:
          description: A response message providing a description of the result of
            the process.
          example: Approved 044332
          type: string
        response_dt:
          description: The ISO-8601 UTC date and time of the response data.
          example: 2020-01-02T18:32:28Z
          format: date-time
          type: string
      type: object
    EventDataModel:
      example:
        event_organiser_id: event_organiser_id
        payment_type: payment_type
        event_id: event_id
        event_end_date: 2000-01-23
        event_start_date: 2000-01-23
      properties:
        event_end_date:
          description: The date when the event ends in ISO format (yyyy-MM-dd).
          format: date
          type: string
        event_id:
          description: An id of the event.
          type: string
        event_organiser_id:
          description: An id of the event organiser.
          type: string
        event_start_date:
          description: The date when the event starts in ISO format (yyyy-MM-dd).
          format: date
          type: string
        payment_type:
          description: The type of payment such as `deposit` or `balance`.
          type: string
      type: object
    Exists:
      example:
        active: true
        exists: true
        last_modified: 2020-01-02T18:32:28Z
      properties:
        active:
          description: Boolean value whether the entity is active.
          example: true
          type: boolean
        exists:
          description: Boolean value whether the entity exists.
          example: true
          type: boolean
        last_modified:
          description: The last modified date of the entity.
          example: 2020-01-02T18:32:28Z
          format: date-time
          type: string
      required:
      - exists
      type: object
    ExternalMPI:
      example:
        authen_result: authen_result
        cavv: cavv
        xid: xid
        eci: 0
        enrolled: enrolled
      properties:
        authen_result:
          description: The authentication result available from the MPI.
          maxLength: 1
          type: string
        cavv:
          description: A value determining the cardholder verification value supplied
            by the card scheme.
          maxLength: 20
          type: string
        eci:
          description: The obtained e-commerce indicator from the MPI.
          format: int32
          maxLength: 1
          type: integer
        enrolled:
          description: A value determining whether the card holder was enrolled.
          maxLength: 1
          type: string
        xid:
          description: The XID used for processing with the MPI.
          maxLength: 20
          type: string
      type: object
    ListMerchantsResponse:
      example:
        clientid: PC12345
        merchants:
        - status_label: Active
          merchantid: 11223344
          name: Merchant 1
          currency: GBP
          status: A
        - status_label: Active
          merchantid: 11223344
          name: Merchant 1
          currency: GBP
          status: A
        client_name: client_name
      properties:
        client_name:
          description: The client name that was requested.
          type: string
        clientid:
          description: The client id requested.
          example: PC12345
          maxLength: 10
          minLength: 3
          type: string
        merchants:
          items:
            $ref: '#/components/schemas/Merchant'
          type: array
      type: object
    MCC6012:
      example:
        recipient_dob: recipient_dob
        recipient_postcode: recipient_postcode
        recipient_account: recipient_account
        recipient_lastname: recipient_lastname
      properties:
        recipient_account:
          description: The account number of the recipient.
          type: string
        recipient_dob:
          description: The date of birth of the recipient.
          type: string
        recipient_lastname:
          description: The lastname of ther recepient.
          type: string
        recipient_postcode:
          description: The postcode of the recipient.
          type: string
      type: object
    Merchant:
      example:
        status_label: Active
        merchantid: 11223344
        name: Merchant 1
        currency: GBP
        status: A
      properties:
        currency:
          description: The currency of the merchant.
          example: GBP
          type: string
        merchantid:
          description: The merchant id which uniquely identifies the merchant account.
          example: 11223344
          format: int32
          type: integer
        name:
          description: The name of the merchant.
          example: Merchant 1
          type: string
        status:
          description: The status of the account.
          example: A
          type: string
        status_label:
          description: The status label of the account.
          example: Active
          type: string
      type: object
    PaResAuthRequest:
      example:
        md: md
        pares: v66ycfSp8jNlvy7PkHbx44NEt3vox90+vZ/7Ll05Vid/jPfQn8adw+4D/vRDUGT19kndW97Hfirb...
      properties:
        md:
          description: |
            The Merchant Data (MD) which is a unique ID to reference the authentication session.

            This value will be created by CityPay when required. When responding from the ACS,
            this value will be returned by the ACS.
          type: string
        pares:
          description: |
            The Payer Authentication Response packet which is returned by the ACS containing the
             response of the authentication session including verification values. The response
             is a base64 encoded packet and should be forwarded to CityPay untouched.
          example: v66ycfSp8jNlvy7PkHbx44NEt3vox90+vZ/7Ll05Vid/jPfQn8adw+4D/vRDUGT19kndW97Hfirb...
          format: base64
          type: string
      required:
      - md
      - pares
      type: object
    PaylinkAddress:
      example:
        area: London
        country: GB
        address3: address3
        address2: Westminster
        address1: 79 Parliament St
        postcode: L1 789
        label: Head Office
      properties:
        address1:
          description: The first line of the address.
          example: 79 Parliament St
          maxLength: 50
          type: string
        address2:
          description: The second line of the address.
          example: Westminster
          maxLength: 50
          type: string
        address3:
          description: The third line of the address.
          maxLength: 50
          type: string
        area:
          description: The area such as city, department, town or parish.
          example: London
          maxLength: 50
          type: string
        country:
          description: The country code in ISO 3166 format. The country code should
            be an ISO-3166 2 or 3 digit country code.
          example: GB
          maxLength: 2
          minLength: 2
          type: string
        label:
          description: A label for the address such as Head Office, Home Address.
          example: Head Office
          maxLength: 20
          minLength: 2
          type: string
        postcode:
          description: The postcode or zip code of the address.
          example: L1 789
          maxLength: 16
          type: string
      type: object
    PaylinkAdjustmentRequest:
      example:
        identifier: 95b857a1-5955-4b86-963c-5a6dbfc4fb95
        reason: reason
        amount: 3600
      properties:
        amount:
          description: An amount to adjust to.
          example: 3600
          format: int32
          maxLength: 9
          minLength: 1
          type: integer
        identifier:
          description: An identifier of the original request.
          example: 95b857a1-5955-4b86-963c-5a6dbfc4fb95
          maxLength: 50
          minLength: 4
          type: string
        reason:
          description: A textual reason for the adjustment.
          type: string
      type: object
    PaylinkAttachmentRequest:
      example:
        filename: filename
        data: data
        mime_type: mime_type
      properties:
        data:
          description: base64 encoding of the file if less than 32kb in size.
          type: string
        filename:
          description: The name of the attachment normally taken from the filename.
            You should not include the filename path as appropriate.
          type: string
        mime_type:
          description: The mime type of the attachment as defined in [RFC 9110](https://www.rfc-editor.org/rfc/rfc9110.html).
            Currently only `application/pdf` is supported.
          type: string
      required:
      - filename
      - mime_type
      type: object
    PaylinkAttachmentResult:
      example:
        result: result
        name: name
        url: url
      properties:
        name:
          description: The name of the attachment.
          type: string
        result:
          description: The result of an uploaded attachment such as `OK` or `UPLOAD`.
          type: string
        url:
          description: If the attachment is to be uploaded, a URL that can be used
            for Multipart upload of the attachment.
          type: string
      required:
      - name
      - result
      type: object
    PaylinkBillPaymentTokenRequest:
      example:
        request:
          subscription_id: subscription_id
          identifier: 95b857a1-5955-4b86-963c-5a6dbfc4fb95
          amount: 0
          merchantid: 11223344
          accountno: accountno
          cardholder:
            remote_addr: remote_addr
            accept_headers: accept_headers
            firstname: John
            address:
              area: London
              country: GB
              address3: address3
              address2: Westminster
              address1: 79 Parliament St
              postcode: L1 789
              label: Head Office
            mobile_no: "447790123456"
            company: Acme Ltd
            title: Mr
            email: card.holder@citypay.com
            user_agent: user_agent
            lastname: Smith
          client_version: client_version
          tx_type: tx_type
          config:
            postback: http://example.com/aeiou
            renderer: renderer
            return_params: true
            postback_username: postback_username
            part_payments:
              min: min
              max: max
              max_rate: max_rate
              floor: floor
              enabled: enabled
              min_rate: min_rate
            field_guard:
            - name: name
              label: label
              type: type
            - name: name
              label: label
              type: type
            redirect_success: http://example.com/aeiou
            descriptor: descriptor
            expire_in: expire_in
            pass_through_data:
              key: pass_through_data
            pass_through_headers:
              key: pass_through_headers
            redirect_delay: 3
            custom_params:
            - name: name
              pattern: pattern
              label: label
              placeholder: placeholder
              locked: true
              field_type: field_type
              value: value
              required: true
              group: group
              order: 9
            - name: name
              pattern: pattern
              label: label
              placeholder: placeholder
              locked: true
              field_type: field_type
              value: value
              required: true
              group: group
              order: 9
            merch_logo: http://example.com/aeiou
            ui:
              form_auto_complete: "true"
              postcode_mandatory: true
              ordering: 2
              address_mandatory: true
            redirect_failure: http://example.com/aeiou
            acs_mode: acs_mode
            options:
            - options
            - options
            lock_params:
            - lock_params
            - lock_params
            merch_terms: http://example.com/aeiou
            postback_password: postback_password
            postback_policy: postback_policy
          cart:
            mode: 5
            coupon: coupon
            shipping: 2
            contents:
            - amount: 6
              max: 5
              count: 1
              variant: variant
              label: label
              category: category
              sku: sku
              brand: brand
            - amount: 6
              max: 5
              count: 1
              variant: variant
              label: label
              category: category
              sku: sku
              brand: brand
            tax: 7
            product_description: product_description
            product_information: product_information
          email: card.holder@citypay.com
        attachments:
        - filename: filename
          data: data
          mime_type: mime_type
        - filename: filename
          data: data
          mime_type: mime_type
        sms_notification_path:
          template: template
          to: to
        due: 2000-01-23
        descriptor: descriptor
        email_notification_path:
          cc:
          - cc
          - cc
          template: template
          bcc:
          - bcc
          - bcc
          reply_to:
          - reply_to
          - reply_to
          to:
          - to
          - to
      properties:
        attachments:
          items:
            $ref: '#/components/schemas/PaylinkAttachmentRequest'
          type: array
          x-description: An array of attachments for the request such as invoices
            or statements.
        descriptor:
          description: |
            A descriptor for the bill payment used to describe what the payment request is for for instance "Invoice".

            The descriptor can be used as descriptive text on emails or the payment page. For instance an invoice may have
            a button saying "View Invoice" or an email may say "to pay your Invoice online".
          type: string
        due:
          description: A date that the invoice is due. This can be displayed on the
            payment page.
          format: date
          type: string
        email_notification_path:
          $ref: '#/components/schemas/PaylinkEmailNotificationPath'
        request:
          $ref: '#/components/schemas/PaylinkTokenRequestModel'
        sms_notification_path:
          $ref: '#/components/schemas/PaylinkSMSNotificationPath'
      required:
      - request
      type: object
    PaylinkCardHolder:
      example:
        remote_addr: remote_addr
        accept_headers: accept_headers
        firstname: John
        address:
          area: London
          country: GB
          address3: address3
          address2: Westminster
          address1: 79 Parliament St
          postcode: L1 789
          label: Head Office
        mobile_no: "447790123456"
        company: Acme Ltd
        title: Mr
        email: card.holder@citypay.com
        user_agent: user_agent
        lastname: Smith
      properties:
        accept_headers:
          description: The accept headers string generated by the Customer Browser.
            This field may be used to lock the payment process to the customer's browser.
            If the customer were to attempt to use a different browser an error will
            be generated.
          type: string
        address:
          $ref: '#/components/schemas/PaylinkAddress'
        company:
          description: The company name for the card holder.
          example: Acme Ltd
          maxLength: 50
          type: string
        email:
          description: The cardholder's email address. This field can be used to send
            a receipt to the payment cardholder. If this value is not supplied, no
            email will be sent.
          example: card.holder@citypay.com
          maxLength: 254
          type: string
        firstname:
          description: The first name of the card holder.
          example: John
          type: string
        lastname:
          description: The last name or surname of the card holder.
          example: Smith
          type: string
        mobile_no:
          description: The mobile number of the cardholder. This can be used for data
            collection via the Paylink Payment Form or to send an SMS on completion
            of a transaction. This feature is a licensable option and is not configured
            by default.
          example: "447790123456"
          maxLength: 20
          type: string
        remote_addr:
          description: Specifies the remote IP address of the customer's browser.
            This field may be used to lock the payment form to the customer's IP address.
            Should the address change or a malicious third party attempted to hijack
            the transaction, an error will be generated.
          type: string
        title:
          description: A title for the card holder such as Mr, Mrs, Ms, M. Mme. etc.
          example: Mr
          type: string
        user_agent:
          description: Specifies the user agent string of the Customer Browser. This
            field may be used to lock the payment form to the browser. Should a different
            user agent attempt to process the transaction or a malicious third party
            attempted to hijack the transaction, an error is generated.
          type: string
      type: object
    PaylinkCart:
      example:
        mode: 5
        coupon: coupon
        shipping: 2
        contents:
        - amount: 6
          max: 5
          count: 1
          variant: variant
          label: label
          category: category
          sku: sku
          brand: brand
        - amount: 6
          max: 5
          count: 1
          variant: variant
          label: label
          category: category
          sku: sku
          brand: brand
        tax: 7
        product_description: product_description
        product_information: product_information
      properties:
        contents:
          items:
            $ref: '#/components/schemas/PaylinkCartItemModel'
          type: array
          x-description: Any cart items to list against the cart.
        coupon:
          description: A coupon redeemed with the transaction.
          type: string
        mode:
          description: |
            The mode field specifies the behaviour or functionality of the cart.

            Valid values are:

             0 - No cart - No cart is shown
             1 - Read-only - The cart is shown with a breakdown of the item details provided by objects in the contents array.
             2 - Selection cart - The cart is shown as a drop-down box of available cart items that the customer can a single item select from.
             3 - Dynamic cart - a text box is rendered to enable the operator to input an amount.
             4 - Multi cart - The cart is displayed with items rendered with selectable quantities.
          format: int32
          type: integer
        product_description:
          description: Specifies a description about the product or service that is
            the subject of the transaction. It will be rendered in the header of the
            page with no labels.
          type: string
        product_information:
          description: Specifies information about the product or service that is
            the subject of the transaction. It will be rendered in the header of the
            page.
          type: string
        shipping:
          description: The shipping amount of the transaction in the lowest denomination
            of currency.
          format: int32
          type: integer
        tax:
          description: The tax amount of the transaction in the lowest denomination
            of currency.
          format: int32
          type: integer
      type: object
    PaylinkCartItemModel:
      example:
        amount: 6
        max: 5
        count: 1
        variant: variant
        label: label
        category: category
        sku: sku
        brand: brand
      properties:
        amount:
          description: The net amount of the item. The Paylink Payment Form does not
            multiply this figure by the value provided by the count value for the
            cart item, this is principally to avoid rounding errors to introduce discrepancies
            between the value of the goods charged for and the total amount represented
            by the collection of cart items.
          format: int32
          type: integer
        brand:
          description: The brand of the item such as Nike.
          type: string
        category:
          description: The category of the item such as shoes.
          type: string
        count:
          description: The count of how many of this item is being purchased, should
            the cart be editable, this value should be the default count required.
            The Paylink Payment Form assumes a count of 1 in the event that no value
            for the count field is provided for a cart item.
          format: int32
          type: integer
        label:
          description: The label which describes the item.
          type: string
        max:
          description: For an editable cart, the maximum number of items that can
            be purchased, defaults to 5.
          format: int32
          type: integer
        sku:
          description: The stock control unit value.
          type: string
        variant:
          description: The variant field refers to the variant of the cart item to
            enable similar items to be distinguished according to certain criteria.
            For example, similar items may be distinguished in terms of size, weight
            and power. The Paylink Payment Form does not constrain the value of the
            variant field to a particular set of metrics.
          type: string
      type: object
    PaylinkConfig:
      example:
        postback: http://example.com/aeiou
        renderer: renderer
        return_params: true
        postback_username: postback_username
        part_payments:
          min: min
          max: max
          max_rate: max_rate
          floor: floor
          enabled: enabled
          min_rate: min_rate
        field_guard:
        - name: name
          label: label
          type: type
        - name: name
          label: label
          type: type
        redirect_success: http://example.com/aeiou
        descriptor: descriptor
        expire_in: expire_in
        pass_through_data:
          key: pass_through_data
        pass_through_headers:
          key: pass_through_headers
        redirect_delay: 3
        custom_params:
        - name: name
          pattern: pattern
          label: label
          placeholder: placeholder
          locked: true
          field_type: field_type
          value: value
          required: true
          group: group
          order: 9
        - name: name
          pattern: pattern
          label: label
          placeholder: placeholder
          locked: true
          field_type: field_type
          value: value
          required: true
          group: group
          order: 9
        merch_logo: http://example.com/aeiou
        ui:
          form_auto_complete: "true"
          postcode_mandatory: true
          ordering: 2
          address_mandatory: true
        redirect_failure: http://example.com/aeiou
        acs_mode: acs_mode
        options:
        - options
        - options
        lock_params:
        - lock_params
        - lock_params
        merch_terms: http://example.com/aeiou
        postback_password: postback_password
        postback_policy: postback_policy
      properties:
        acs_mode:
          description: |
            Specifies the approach to be adopted by the Paylink form when displaying a 3-D Secure challenge window. The values may be
             iframe: shows the 3-D Secure ACS in an iframe dialog, neatly embedding it in Paylink. This provides a more seamless flow for the cardholder who is able to validate and authenticate their card using a dialog provided by their card issuer.
             inline: an inline mode transfers the full browser window to the authentication server, allowing the payment cardholder to see their payment card issuer's URL and the certificate status in the browser.
            If you request an iframe mode and the browser width is deemed as being small (< 768px) then an inline mode will be enforced. This is to ensure that mobile users have an improved user experience.
          type: string
        custom_params:
          items:
            $ref: '#/components/schemas/PaylinkCustomParam'
          type: array
          x-description: Defines custom parameters to add to the request.
        descriptor:
          description: Directly specify the merchant descriptor used for the transaction
            to be displayed on the payment page.
          type: string
        expire_in:
          description: |
            Specifies a period of time in seconds after which the token cannot be used. A value of 0 defines that the token will never expire. The API will convert an expiry time based on a string value. For instance:
              s - Time in seconds, for example 90s.
              m - Time in minutes, for example 20m.
              h - Time in hours, for example 4h.
              w - Time in weeks, for example 4w.
              M - Time in months, for example 6M.
              y - Time in years, for example 1y.
              Defaults to 30 minutes.
          type: string
        field_guard:
          items:
            $ref: '#/components/schemas/PaylinkFieldGuardModel'
          type: array
          x-description: Configuration object for field guards.
        lock_params:
          items:
            type: string
          type: array
          x-description: string[]OptionalMay be used to lock fields which are displayed
            in the form. For example, if the cardholder.address.postcode field were
            to be specified this would will prevent the customer amending the postal
            code for the cardholder postcode field.
        merch_logo:
          description: A URL of a logo to include in the form. The URL should be delivered
            using HTTPS.
          format: url
          type: string
        merch_terms:
          description: A URL of the merchant terms and conditions for payment. If
            a value is supplied, a checkbox will be required to be completed to confirm
            that the cardholder agrees to these conditions before payment. A modal
            dialogue is displayed with the content of the conditions displayed.
          format: url
          type: string
        options:
          items:
            type: string
          type: array
          x-description: Specifies an array of configuration options to be applied
            to the transaction which complement or override default values.
        part_payments:
          $ref: '#/components/schemas/PaylinkPartPayments'
        pass_through_data:
          additionalProperties:
            type: string
          type: object
        pass_through_headers:
          additionalProperties:
            type: string
          type: object
        postback:
          description: Specifies a URL to use for a call back when the payment is
            completed. see Postback Handling }.
          format: url
          type: string
        postback_password:
          description: A password to be added to the postback for HTTP Basic Authentication.
          type: string
        postback_policy:
          description: The policy setting for the postback see Postback Handling.
          type: string
        postback_username:
          description: A username to be added to the postback for HTTP Basic Authentication.
          type: string
        redirect_delay:
          description: A value which can delay the redirection in seconds. A value
            of 0 will redirect immediately.
          format: int32
          type: integer
        redirect_failure:
          description: A URL which the browser is redirected to on non-completion
            of a transaction.
          format: url
          type: string
        redirect_success:
          description: A URL which the browser is redirected to on authorisation of
            a transaction.
          format: url
          type: string
        renderer:
          description: The Paylink renderer engine to use.
          type: string
        return_params:
          description: If a value of true is specified, any redirection will include
            the transaction result in parameters. It is recommended to use the postback
            integration rather than redirection parameters.
          type: boolean
        ui:
          $ref: '#/components/schemas/PaylinkUI'
      type: object
    PaylinkCustomParam:
      example:
        name: name
        pattern: pattern
        label: label
        placeholder: placeholder
        locked: true
        field_type: field_type
        value: value
        required: true
        group: group
        order: 9
      properties:
        field_type:
          description: the type of html5 field, defaults to 'text'.
          type: string
        group:
          description: a group the parameter is linked with, allows for grouping with
            a title.
          type: string
        label:
          description: a label to show alongside the input.
          type: string
        locked:
          description: whether the parameter is locked from entry.
          type: boolean
        name:
          description: the name of the custom parameter used to converse with the
            submitter.
          type: string
        order:
          description: an index order for the parameter.
          format: int32
          type: integer
        pattern:
          description: a regex pattern to validate the custom parameter with.
          type: string
        placeholder:
          description: a placehold value to display in the input.
          type: string
        required:
          description: whether the field is required.
          type: boolean
        value:
          description: a default value for the field.
          type: string
      required:
      - name
      type: object
    PaylinkEmailNotificationPath:
      example:
        cc:
        - cc
        - cc
        template: template
        bcc:
        - bcc
        - bcc
        reply_to:
        - reply_to
        - reply_to
        to:
        - to
        - to
      properties:
        bcc:
          items:
            description: An array of email addresses to be used for blind carbon copy
              delivery. A maximum of 5 addresses can be added.
            type: string
          type: array
        cc:
          items:
            description: An array of email addresses to be used for carbon copy delivery.
              A maximum of 5 addresses can be added.
            type: string
          type: array
        reply_to:
          items:
            description: An array of email addresses to be used for the Reply-To header
              of an email.
            type: string
          type: array
        template:
          description: An optional template name to use a template other than the
            default.
          type: string
        to:
          items:
            description: A list of email addresses to be used for the send to email
              address for delivery. A maximum of 5 addresses can be added.
            type: string
          type: array
      required:
      - to
      type: object
    PaylinkErrorCode:
      example:
        msg: msg
        code: code
      properties:
        code:
          description: An error code identifying the error.
          type: string
        msg:
          description: An error message describing the error.
          type: string
      required:
      - code
      - msg
      type: object
    PaylinkFieldGuardModel:
      example:
        name: name
        label: label
        type: type
      properties:
        label:
          description: A label for the field guard to display on the authentication
            page.
          type: string
        name:
          description: A field name which is used to refer to a field which is guarded.
          type: string
        type:
          description: A type of HTML element that should be displayed such as text,
            password, url. Any HTML5 input type value may be supplied.
          type: string
      type: object
    PaylinkPartPayments:
      example:
        min: min
        max: max
        max_rate: max_rate
        floor: floor
        enabled: enabled
        min_rate: min_rate
      properties:
        enabled:
          description: Determines if part payments is enabled. Default is false.
          type: string
        floor:
          description: The floor amount specifies a value that the minimum rate cannot
            go under. If 0 the amount of min rate is applied.
          type: string
        max:
          description: a maximum percentage to charge i.e. 90%.
          type: string
        max_rate:
          description: a rate as fixed or percentage.
          type: string
        min:
          description: a minimum percentage to charge i.e. 10.
          type: string
        min_rate:
          description: a rate as fixed or percentage.
          type: string
      type: object
    PaylinkSMSNotificationPath:
      example:
        template: template
        to: to
      properties:
        template:
          description: An optional template name to use a template other than the
            default.
          type: string
        to:
          description: The phone number in [E.164](https://en.wikipedia.org/wiki/E.164)
            format to send the message to.
          type: string
      required:
      - to
      type: object
    PaylinkStateEvent:
      example:
        datetime: 2000-01-23T04:56:07.000+00:00
        state: 2000-01-23T04:56:07.000+00:00
        message: message
      properties:
        datetime:
          description: the date and time of the event.
          format: date-time
          type: string
        message:
          description: a message associated with the event.
          type: string
        state:
          description: The name of the event that was actioned.
          format: date-time
          type: string
      type: object
    PaylinkTokenCreated:
      example:
        identifier: identifier
        attachments:
          result: result
          name: name
          url: url
        bps: bps
        usc: usc
        date_created: 2000-01-23T04:56:07.000+00:00
        source: source
        server_version: server_version
        url: url
        token: token
        mode: mode
        result: 0
        qr_code: qr_code
        id: id
        errors:
        - msg: msg
          code: code
        - msg: msg
          code: code
      properties:
        attachments:
          $ref: '#/components/schemas/PaylinkAttachmentResult'
        bps:
          description: true if BPS has been enabled on this token.
          type: string
          x-business-extension: BPS
        date_created:
          description: Date and time the token was generated.
          format: date-time
          type: string
        errors:
          items:
            $ref: '#/components/schemas/PaylinkErrorCode'
          type: array
          x-description: Any errors found when processing the request.
        id:
          description: A unique id of the request.
          type: string
        identifier:
          description: The identifier as presented in the TokenRequest.
          type: string
        mode:
          description: Determines whether the token is `live` or `test`.
          type: string
        qr_code:
          description: A URL of a qrcode which can be used to refer to the token URL.
          type: string
        result:
          description: The result field contains the result for the Paylink Token
            Request. 0 - indicates that an error was encountered while creating the
            token. 1 - which indicates that a Token was successfully created.
          format: int32
          type: integer
        server_version:
          description: the version of the server performing the call.
          type: string
        source:
          description: The incoming IP address of the call.
          format: ipv4
          type: string
        token:
          description: A token generated for the request used to refer to the transaction
            in consequential calls.
          type: string
        url:
          description: The Paylink token URL used to checkout by the card holder.
          type: string
        usc:
          description: A UrlShortCode (USC) used for short links.
          type: string
          x-business-extension: BPS
      required:
      - id
      - result
      - token
      type: object
    PaylinkTokenRequestModel:
      example:
        subscription_id: subscription_id
        identifier: 95b857a1-5955-4b86-963c-5a6dbfc4fb95
        amount: 0
        merchantid: 11223344
        accountno: accountno
        cardholder:
          remote_addr: remote_addr
          accept_headers: accept_headers
          firstname: John
          address:
            area: London
            country: GB
            address3: address3
            address2: Westminster
            address1: 79 Parliament St
            postcode: L1 789
            label: Head Office
          mobile_no: "447790123456"
          company: Acme Ltd
          title: Mr
          email: card.holder@citypay.com
          user_agent: user_agent
          lastname: Smith
        client_version: client_version
        tx_type: tx_type
        config:
          postback: http://example.com/aeiou
          renderer: renderer
          return_params: true
          postback_username: postback_username
          part_payments:
            min: min
            max: max
            max_rate: max_rate
            floor: floor
            enabled: enabled
            min_rate: min_rate
          field_guard:
          - name: name
            label: label
            type: type
          - name: name
            label: label
            type: type
          redirect_success: http://example.com/aeiou
          descriptor: descriptor
          expire_in: expire_in
          pass_through_data:
            key: pass_through_data
          pass_through_headers:
            key: pass_through_headers
          redirect_delay: 3
          custom_params:
          - name: name
            pattern: pattern
            label: label
            placeholder: placeholder
            locked: true
            field_type: field_type
            value: value
            required: true
            group: group
            order: 9
          - name: name
            pattern: pattern
            label: label
            placeholder: placeholder
            locked: true
            field_type: field_type
            value: value
            required: true
            group: group
            order: 9
          merch_logo: http://example.com/aeiou
          ui:
            form_auto_complete: "true"
            postcode_mandatory: true
            ordering: 2
            address_mandatory: true
          redirect_failure: http://example.com/aeiou
          acs_mode: acs_mode
          options:
          - options
          - options
          lock_params:
          - lock_params
          - lock_params
          merch_terms: http://example.com/aeiou
          postback_password: postback_password
          postback_policy: postback_policy
        cart:
          mode: 5
          coupon: coupon
          shipping: 2
          contents:
          - amount: 6
            max: 5
            count: 1
            variant: variant
            label: label
            category: category
            sku: sku
            brand: brand
          - amount: 6
            max: 5
            count: 1
            variant: variant
            label: label
            category: category
            sku: sku
            brand: brand
          tax: 7
          product_description: product_description
          product_information: product_information
        email: card.holder@citypay.com
      properties:
        accountno:
          description: Specifies an alpha-numeric account number that the Paylink
            service uses when creating a Cardholder Account. The value should be no
            longer than 20 characters in length.
          type: string
        amount:
          description: Specifies the intended value of the transaction in the lowest
            denomination with no spacing characters or decimal point. This is the
            net total to be processed. An example of £74.95 would be presented as
            7495.
          format: int32
          type: integer
        cardholder:
          $ref: '#/components/schemas/PaylinkCardHolder'
        cart:
          $ref: '#/components/schemas/PaylinkCart'
        client_version:
          description: The clientVersion field is used to specify the version of your
            application that has invoked the Paylink payment process. This feature
            is typically used for tracing issues relating to application deployments,
            or any Paylink integration module or plugin.
          type: string
        config:
          $ref: '#/components/schemas/PaylinkConfig'
        email:
          description: |
            The email field is used for the Merchant to be notified on completion of the transaction . The value may be supplied to override the default stored value.
            Emails sent to this address by the Paylink service should not be forwarded on to the cardholder as it may contain certain information that is used by the Paylink service to validate and authenticate Paylink Token Requests: for example, the Merchant ID and the licence key.
          example: card.holder@citypay.com
          maxLength: 254
          type: string
        identifier:
          description: |
            Identifies a particular transaction linked to a Merchant account. It enables accurate duplicate checking within a pre-configured time period, as well as transaction reporting and tracing. The identifier should be unique to prevent payment card processing attempts from being rejected due to duplication.
          example: 95b857a1-5955-4b86-963c-5a6dbfc4fb95
          maxLength: 50
          minLength: 4
          type: string
        merchantid:
          description: The merchant id you wish to process this transaction with.
          example: 11223344
          format: int32
          type: integer
        subscription_id:
          description: an id associated with a subscription to link the token request
            against.
          type: string
        tx_type:
          description: A value to override the transaction type if requested by your
            account manager.
          type: string
      required:
      - amount
      - identifier
      - merchantid
      type: object
    PaylinkTokenStatus:
      example:
        amount_paid: 0
        is_postback_ok: true
        is_customer_receipt_email_sent: true
        mid: mid
        is_validated: true
        payment_attempts_count: 6
        datetime: 2000-01-23T04:56:07.000+00:00
        is_email_sent: true
        is_open_for_payment: true
        last_payment_result: last_payment_result
        is_form_viewed: true
        is_payment_attempted: true
        is_paid: true
        is_closed: true
        trans_no: 1
        identifier: identifier
        is_merchant_notification_email_sent: true
        created: 2000-01-23T04:56:07.000+00:00
        last_event_date_time: 2000-01-23T04:56:07.000+00:00
        auth_code: auth_code
        token: token
        is_expired: true
        is_attachment: true
        is_request_challenged: true
        card: card
        is_cancelled: true
        is_sms_sent: true
        state_history:
        - datetime: 2000-01-23T04:56:07.000+00:00
          state: 2000-01-23T04:56:07.000+00:00
          message: message
        - datetime: 2000-01-23T04:56:07.000+00:00
          state: 2000-01-23T04:56:07.000+00:00
          message: message
      properties:
        amount_paid:
          description: the amount that has been paid against the session.
          format: int32
          type: integer
        auth_code:
          description: an authorisation code if the transaction was processed and
            isPaid is true.
          type: string
        card:
          description: a description of the card that was used for payment if paid.
          type: string
        created:
          description: the date and time that the session was created.
          format: date-time
          type: string
        datetime:
          description: the date and time of the current status.
          format: date-time
          type: string
        identifier:
          description: the merchant identifier, to help identifying the token.
          type: string
        is_attachment:
          description: true if an attachment exists.
          type: boolean
        is_cancelled:
          description: true if the session was cancelled either by the user or by
            a system request.
          type: boolean
        is_closed:
          description: true if the token has been closed.
          type: boolean
        is_customer_receipt_email_sent:
          description: true if a customer receipt has been sent.
          type: boolean
        is_email_sent:
          description: true if an email was sent.
          type: boolean
        is_expired:
          description: true if the session has expired.
          type: boolean
        is_form_viewed:
          description: true if the form was ever displayed to the addressee.
          type: boolean
        is_merchant_notification_email_sent:
          description: true if a merchant notification receipt was sent.
          type: boolean
        is_open_for_payment:
          description: true if the session is still open for payment or false if it
            has been closed.
          type: boolean
        is_paid:
          description: whether the session has been paid and therefore can be considered
            as complete.
          type: boolean
        is_payment_attempted:
          description: true if payment has been attempted.
          type: boolean
        is_postback_ok:
          description: true if a post back was executed successfully.
          type: boolean
        is_request_challenged:
          description: true if the request has been challenged using 3-D Secure.
          type: boolean
        is_sms_sent:
          description: true if an SMS was sent.
          type: boolean
        is_validated:
          description: whether the token generation was successfully validated.
          type: boolean
        last_event_date_time:
          description: the date and time that the session last had an event actioned
            against it.
          format: date-time
          type: string
        last_payment_result:
          description: the result of the last payment if one exists.
          type: string
        mid:
          description: identifies the merchant account.
          type: string
        payment_attempts_count:
          description: the number of attempts made to pay.
          format: int32
          type: integer
        state_history:
          items:
            $ref: '#/components/schemas/PaylinkStateEvent'
          type: array
          x-description: an audit list of state entries and date and timestamps.
        token:
          description: the token value which uniquely identifies the session.
          type: string
        trans_no:
          description: a transaction number if the transacstion was processed and
            isPaid is true.
          format: int32
          type: integer
      type: object
    PaylinkTokenStatusChangeRequest:
      example:
        merchantid: 11223344
        maxResults: 0
        nextToken: nextToken
        orderBy:
        - orderBy
        - orderBy
        after: 2000-01-23T04:56:07.000+00:00
      properties:
        after:
          description: identifies the date and time to lookup changes after.
          format: date-time
          type: string
        maxResults:
          description: the maximum number of results between 5 and 250 to return.
            Default is 50.
          format: int32
          type: integer
        merchantid:
          description: the merchant id to review tokens for.
          example: 11223344
          format: int32
          type: integer
        nextToken:
          description: the next token value when more results are available.
          type: string
        orderBy:
          items:
            type: string
          type: array
          x-description: |
            an orderBy array should the search require ordering. The following fields may be specified:
            `token`, `identifier`, `created`.
            The default order by fields are `created`.
      required:
      - after
      - merchantid
      type: object
    PaylinkTokenStatusChangeResponse:
      example:
        nextToken: nextToken
        tokens:
        - amount_paid: 0
          is_postback_ok: true
          is_customer_receipt_email_sent: true
          mid: mid
          is_validated: true
          payment_attempts_count: 6
          datetime: 2000-01-23T04:56:07.000+00:00
          is_email_sent: true
          is_open_for_payment: true
          last_payment_result: last_payment_result
          is_form_viewed: true
          is_payment_attempted: true
          is_paid: true
          is_closed: true
          trans_no: 1
          identifier: identifier
          is_merchant_notification_email_sent: true
          created: 2000-01-23T04:56:07.000+00:00
          last_event_date_time: 2000-01-23T04:56:07.000+00:00
          auth_code: auth_code
          token: token
          is_expired: true
          is_attachment: true
          is_request_challenged: true
          card: card
          is_cancelled: true
          is_sms_sent: true
          state_history:
          - datetime: 2000-01-23T04:56:07.000+00:00
            state: 2000-01-23T04:56:07.000+00:00
            message: message
          - datetime: 2000-01-23T04:56:07.000+00:00
            state: 2000-01-23T04:56:07.000+00:00
            message: message
        - amount_paid: 0
          is_postback_ok: true
          is_customer_receipt_email_sent: true
          mid: mid
          is_validated: true
          payment_attempts_count: 6
          datetime: 2000-01-23T04:56:07.000+00:00
          is_email_sent: true
          is_open_for_payment: true
          last_payment_result: last_payment_result
          is_form_viewed: true
          is_payment_attempted: true
          is_paid: true
          is_closed: true
          trans_no: 1
          identifier: identifier
          is_merchant_notification_email_sent: true
          created: 2000-01-23T04:56:07.000+00:00
          last_event_date_time: 2000-01-23T04:56:07.000+00:00
          auth_code: auth_code
          token: token
          is_expired: true
          is_attachment: true
          is_request_challenged: true
          card: card
          is_cancelled: true
          is_sms_sent: true
          state_history:
          - datetime: 2000-01-23T04:56:07.000+00:00
            state: 2000-01-23T04:56:07.000+00:00
            message: message
          - datetime: 2000-01-23T04:56:07.000+00:00
            state: 2000-01-23T04:56:07.000+00:00
            message: message
      properties:
        nextToken:
          description: |
            If nextToken is returned, there are more results available. The value of nextToken is a unique pagination
            token for each page. Make the call again using the returned token to retrieve the next page.
            Keep all other arguments unchanged.
          type: string
        tokens:
          items:
            $ref: '#/components/schemas/PaylinkTokenStatus'
          type: array
          x-description: Tokens which have changed since the date presented.
      required:
      - tokens
      type: object
    PaylinkUI:
      example:
        form_auto_complete: "true"
        postcode_mandatory: true
        ordering: 2
        address_mandatory: true
      properties:
        address_mandatory:
          description: whether the address is forced as mandatory.
          type: boolean
        form_auto_complete:
          description: specify the form autocomplete setting, default to on. If set
            to off the UI will set autocomplete="off" on the form level and prevent
            elements from adding it.
          example: "true"
          type: string
        ordering:
          description: the logical ordering of the ui groups.
          format: int32
          type: integer
        postcode_mandatory:
          description: whether the postcode is forced as mandatory.
          type: boolean
      type: object
    Ping:
      example:
        identifier: 95b857a1-5955-4b86-963c-5a6dbfc4fb95
      properties:
        identifier:
          description: An identifier of the ping request which will be returned in
            the response.
          example: 95b857a1-5955-4b86-963c-5a6dbfc4fb95
          maxLength: 50
          minLength: 4
          type: string
      type: object
    ProcessBatchRequest:
      example:
        client_account_id: AC1
        batch_id: 35
        transactions:
        - identifier: 95b857a1-5955-4b86-963c-5a6dbfc4fb95
          amount: 3600
          account_id: aaabbb-cccddd-eee
          merchantid: 11223344
        - identifier: 95b857a1-5955-4b86-963c-5a6dbfc4fb95
          amount: 3600
          account_id: aaabbb-cccddd-eee
          merchantid: 11223344
        batch_date: 2020-01-02T00:00:00.000+0000
      properties:
        batch_date:
          description: The date and time that the file was created in ISO-8601 format.
          example: 2020-01-02
          format: date
          type: string
        batch_id:
          description: |
            The id is a referencable id for the batch that should be generated by your integration.
            Its recommended to use an incremental id to help determine if a batch has been skipped or missed.
            The id is used by reporting systems to reference the unique batch alongside your client id.
          example: 35
          format: int32
          maxLength: 8
          minimum: 1
          type: integer
        client_account_id:
          description: The batch account id to process the batch for. Defaults to
            your client id if not provided.
          example: AC1
          maxLength: 20
          minLength: 3
          type: string
        transactions:
          items:
            $ref: '#/components/schemas/BatchTransaction'
          type: array
          x-description: |
            Transactions requested for processing. There is a logical limit of 10,000 transactions that can be processed in
            a single batch. The sandbox will accept up to 100 transactions.
      required:
      - batch_date
      - batch_id
      - transactions
      type: object
    ProcessBatchResponse:
      example:
        valid: true
        message: Approved 044332
      properties:
        message:
          description: Information regarding the processing request.
          example: Approved 044332
          type: string
        valid:
          description: true if the request has been accepted for processing and is
            valid.
          example: true
          type: boolean
      required:
      - valid
      type: object
    RefundRequest:
      example:
        identifier: 95b857a1-5955-4b86-963c-5a6dbfc4fb95
        amount: 3600
        refund_ref: 8322
        merchantid: 11223344
        trans_info: trans_info
      properties:
        amount:
          description: |
            The amount to refund in the lowest unit of currency with a variable length to a maximum of 12 digits.

            The amount should be the total amount required to refund for the transaction up to the original processed amount.

            No decimal points are to be included and no divisional characters such as 1,024.

            For example with GBP £1,021.95 the amount value is 102195.
          example: 3600
          format: int32
          maxLength: 9
          minLength: 1
          type: integer
        identifier:
          description: |
            The identifier of the refund to process. The value should be a valid reference and may be used to perform
             post processing actions and to aid in reconciliation of transactions.

            The value should be a valid printable string with ASCII character ranges from 0x32 to 0x127.

            The identifier is recommended to be distinct for each transaction such as a [random unique identifier](https://en.wikipedia.org/wiki/Universally_unique_identifier)
            this will aid in ensuring each transaction is identifiable.

            When transactions are processed they are also checked for duplicate requests. Changing the identifier on a subsequent
            request will ensure that a transaction is considered as different.
          example: 95b857a1-5955-4b86-963c-5a6dbfc4fb95
          maxLength: 50
          minLength: 4
          type: string
        merchantid:
          description: Identifies the merchant account to perform the refund for.
          example: 11223344
          format: int32
          type: integer
        refund_ref:
          description: |
            A reference to the original transaction number that is wanting to be refunded. The original
             transaction must be on the same merchant id, previously authorised.
          example: 8322
          format: int32
          type: integer
        trans_info:
          description: Further information that can be added to the transaction will
            display in reporting. Can be used for flexible values such as operator
            id.
          maxLength: 50
          type: string
      required:
      - amount
      - identifier
      - merchantid
      - refund_ref
      type: object
    RegisterCard:
      example:
        default: true
        expmonth: 9
        expyear: 2025
        cardnumber: 4000 0000 0000 0002
        name_on_card: MR NE BODY
      properties:
        cardnumber:
          description: The primary number of the card.
          example: 4000 0000 0000 0002
          maxLength: 22
          minLength: 12
          type: string
        default:
          description: Determines whether the card should be the new default card.
          type: boolean
        expmonth:
          description: The expiry month of the card.
          example: 9
          format: int32
          maximum: 12
          minimum: 1
          type: integer
        expyear:
          description: The expiry year of the card.
          example: 2025
          format: int32
          maximum: 2100
          minimum: 2000
          type: integer
        name_on_card:
          description: The card holder name as it appears on the card. The value is
            required if the account is to be used for 3dsv2 processing, otherwise
            it is optional.
          example: MR NE BODY
          maxLength: 45
          minLength: 2
          type: string
      required:
      - cardnumber
      - expmonth
      - expyear
      type: object
    RequestChallenged:
      example:
        creq: creq
        merchantid: 11223344
        acs_url: https://acs.cardissuer.com/3dsv1
        threedserver_trans_id: threedserver_trans_id
        transno: 78416
      properties:
        acs_url:
          description: |
            The url of the Access Control Server (ACS) to forward the user to.
          example: https://acs.cardissuer.com/3dsv1
          format: url
          type: string
        creq:
          description: The challenge request data which is encoded for usage by the
            ACS.
          type: string
        merchantid:
          description: The merchant id that processed this transaction.
          example: 11223344
          format: int32
          type: integer
        threedserver_trans_id:
          description: The 3DSv2 trans id reference for the challenge process. May
            be used to create the ThreeDSSessionData value to send to the ACS.
          type: string
        transno:
          description: |
            The transaction number for the challenge, ordered incrementally from 1 for every merchant_id.
          example: 78416
          format: int32
          type: integer
      type: object
    RetrieveRequest:
      example:
        identifier: 95b857a1-5955-4b86-963c-5a6dbfc4fb95
        merchantid: 11223344
        transno: 78416
      properties:
        identifier:
          description: The identifier of the transaction to retrieve. Optional if
            a transaction number is provided.
          example: 95b857a1-5955-4b86-963c-5a6dbfc4fb95
          maxLength: 50
          minLength: 4
          type: string
        merchantid:
          description: The merchant account to retrieve data for.
          example: 11223344
          format: int32
          type: integer
        transno:
          description: The transaction number of a transaction to retrieve. Optional
            if an identifier is supplied.
          example: 78416
          format: int32
          type: integer
      required:
      - merchantid
      type: object
    ThreeDSecure:
      example:
        browserLanguage: browserLanguage
        browserColorDepth: browserColorDepth
        browserJavaEnabled: browserJavaEnabled
        tds_policy: tds_policy
        browserIP: browserIP
        browserTZ: browserTZ
        cp_bx: FjaW50b3NoOyBJbnRlbCBNYWMgT1MgWCAx...
        downgrade1: true
        accept_headers: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
        browserScreenHeight: browserScreenHeight
        merchant_termurl: https://mysite.com/acs/return
        browserScreenWidth: browserScreenWidth
        user_agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_3) AppleWebKit/537.36
          (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36
      properties:
        accept_headers:
          description: |
            Required for 3DSv1. Optional if the `cp_bx` value is provided otherwise required for 3Dv2 processing operating in
            browser authentication mode.

            The `cp_bx` value will override any value supplied to this field.

            The content of the HTTP accept header as sent to the merchant from the cardholder's user agent.

            This value will be validated by the ACS when the card holder authenticates themselves to verify that
            no intermediary is performing this action. Required for 3DSv1.
          example: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
          type: string
        browserColorDepth:
          description: BrowserColorDepth field used for 3DSv2 browser enablement.
            Recommendation is to use citypay.js and the `bx` function to gather this
            value.
          type: string
        browserIP:
          description: BrowserIP field used for 3DSv2 browser enablement. Recommendation
            is to use citypay.js and the `bx` function to gather this value.
          type: string
        browserJavaEnabled:
          description: BrowserJavaEnabled field used for 3DSv2 browser enablement.
            Recommendation is to use citypay.js and the `bx` function to gather this
            value.
          type: string
        browserLanguage:
          description: BrowserLanguage field used for 3DSv2 browser enablement. Recommendation
            is to use citypay.js and the `bx` function to gather this value.
          type: string
        browserScreenHeight:
          description: BrowserScreenHeight field used for 3DSv2 browser enablement.
            Recommendation is to use citypay.js and the `bx` function to gather this
            value.
          type: string
        browserScreenWidth:
          description: BrowserScreenWidth field used for 3DSv2 browser enablement.
            Recommendation is to use citypay.js and the `bx` function to gather this
            value.
          type: string
        browserTZ:
          description: BrowserTZ field used for 3DSv2 browser enablement. Recommendation
            is to use citypay.js and the `bx` function to gather this value.
          type: string
        cp_bx:
          description: |
            Required for 3DSv2.

            Browser extension value produced by the citypay.js `bx` function. See [https://sandbox.citypay.com/3dsv2/bx](https://sandbox.citypay.com/3dsv2/bx) for
             details.
          example: FjaW50b3NoOyBJbnRlbCBNYWMgT1MgWCAx...
          type: string
        downgrade1:
          description: |
            Where a merchant is configured for 3DSv2, setting this option will attempt to downgrade the transaction to
             3DSv1.
          type: boolean
        merchant_termurl:
          description: |
            A controller URL for 3D-Secure processing that any response from an authentication request or
            challenge request should be sent to.

            The controller should forward on the response from the URL back via this API for subsequent processing.
          example: https://mysite.com/acs/return
          type: string
        tds_policy:
          description: |
            A policy value which determines whether ThreeDSecure is enforced or bypassed. Note that this will only work for
            e-commerce transactions and accounts that have 3DSecure enabled and fully registered with Visa, MasterCard or
            American Express. It is useful when transactions may be wanted to bypass processing rules.

            Note that this may affect the liability shift of transactions and may occur a higher fee with the acquiring bank.

            Values are

             `0` for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.

             `1` for an enforced policy. Transactions will be enabled for 3DS processing

             `2` to bypass. Transactions that are bypassed will switch off 3DS processing.
          type: string
        user_agent:
          description: |
            Required for 3DSv1.

            Optional if the `cp_bx` value is provided otherwise required 3Dv2 processing operating in
            browser authentication mode.

            The `cp_bx` value will override any value supplied to this field.

            The content of the HTTP user-agent header as sent to the merchant from the cardholder's user agent.

            This value will be validated by the ACS when the card holder authenticates themselves to verify that
            no intermediary is performing this action. Required for 3DSv1.
          example: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_3) AppleWebKit/537.36
            (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36
          type: string
      type: object
    TokenisationResponseModel:
      example:
        authen_result: authen_result
        bin_description: Platinum Card
        identifier: 95b857a1-5955-4b86-963c-5a6dbfc4fb95
        bin_commercial: true
        maskedpan: 4***********0002
        scheme: Visa
        eci: eci
        bin_debit: true
        sig_id: YWV3ZmF3ZWZhd2VmYXdmMmZhZWYzYWVn
        token: ctPCAPyNyCkx3Ry8wGyv8khC3ch2hUSB3Db..Qzr
      properties:
        authen_result:
          description: |
            The result of any authentication using 3d_secure authorisation against ecommerce transactions. Values are:

            <table>
            <tr>
            <th>Value</th>
            <th>Description</th>
            </tr>
            <tr>
            <td>Y</td>
            <td>Authentication Successful. The Cardholder's password was successfully validated.</td>
            </tr>
            <tr>
            <td>N</td>
            <td>Authentication Failed. Customer failed or cancelled authentication, transaction denied.</td>
            </tr>
            <tr>
            <td>A</td>
            <td>Attempts Processing Performed Authentication could not be completed but a proof of authentication attempt (CAVV) was generated.</td>
            </tr>
            <tr>
            <td>U</td>
            <td>Authentication Could Not Be Performed Authentication could not be completed, due to technical or other problem.</td>
            </tr>
            </table>
          type: string
        bin_commercial:
          description: Determines whether the bin range was found to be a commercial
            or business card.
          type: boolean
        bin_debit:
          description: Determines whether the bin range was found to be a debit card.
            If false the card was considered as a credit card.
          type: boolean
        bin_description:
          description: A description of the bin range found for the card.
          example: Platinum Card
          type: string
        eci:
          description: |
            An Electronic Commerce Indicator (ECI) used to identify the result of authentication using 3DSecure.
          type: string
        identifier:
          description: The identifier provided within the request.
          example: 95b857a1-5955-4b86-963c-5a6dbfc4fb95
          maxLength: 50
          minLength: 4
          type: string
        maskedpan:
          description: |
            A masked value of the card number used for processing displaying limited values that can be used on a receipt.
          example: 4***********0002
          type: string
        scheme:
          description: |
            A name of the card scheme of the transaction that processed the transaction such as Visa or MasterCard.
          example: Visa
          type: string
        sig_id:
          description: A Base58 encoded SHA-256 digest generated from the token value
            Base58 decoded and appended with the nonce value UTF-8 decoded.
          example: YWV3ZmF3ZWZhd2VmYXdmMmZhZWYzYWVn
          type: string
        token:
          description: The token used for presentment to authorisation later in the
            procsesing flow.
          example: ctPCAPyNyCkx3Ry8wGyv8khC3ch2hUSB3Db..Qzr
          format: base58
          type: string
      type: object
    VoidRequest:
      example:
        identifier: 95b857a1-5955-4b86-963c-5a6dbfc4fb95
        merchantid: 11223344
        transno: 78416
      properties:
        identifier:
          description: The identifier of the transaction to void. If an empty value
            is supplied then a `trans_no` value must be supplied.
          example: 95b857a1-5955-4b86-963c-5a6dbfc4fb95
          maxLength: 50
          minLength: 4
          type: string
        merchantid:
          description: Identifies the merchant account to perform the void for.
          example: 11223344
          format: int32
          type: integer
        transno:
          description: The transaction number of the transaction to look up and void.
            If an empty value is supplied then an identifier value must be supplied.
          example: 78416
          format: int32
          type: integer
      required:
      - merchantid
      type: object
  securitySchemes:
    cp-api-key:
      description: "The `cp-api-key` authentication header is required for all payment\
        \ processing access.\n All calls using this key will be validated against\
        \ white listed IP addressing\n and calls are scrutinised by the CityPay application\
        \ firewall for security protection\n and attack mitigation.\n\n A key has\
        \ been designed to:\n - be temporal and time based. The key rotates frequently\
        \ to protect against replay attacks and to ensure a\n   computation derives\
        \ your client details from the request\n - to remain secret, the key value\
        \ is your access permission to process transactions and\n   although we have\
        \ preventative measures to protect the key, undue exposure is not desirable\n\
        \ - to allow processing against multiple merchant accounts that belong to\
        \ your CityPay account.\n - to use a HTTP header value to protect undue logging\
        \ mechanisms from logging data packet values and\n   logically seperates authentication\
        \ concerns from the body of data.\n - keys typically have a TTL of 5 minutes\
        \ in production and 20 minutes in Sandbox. \n - keys should be rotated often\
        \ and is recommended on each API call\n"
      in: header
      name: cp-api-key
      type: apiKey
    cp-domain-key:
      description: "The `cp-domain-key` authentication is used for host based authentication\
        \ to certain API services. Not all \nservices support domain key authentication\
        \ however its remit is to provide authentication to HTTPS services \nwishing\
        \ to connect from HTTP clients and User-Agents. Keys once generated are intrinsically\
        \ linked to their \nhost name and these are checked on every call against\
        \ the `Referer` and `Origin` headers provided by the \nUser-Agent. \n\nAs\
        \ the domain key is often presented in `application/x-www-form-urlencoded`\
        \ format its value may be presented\nin the query string of the URL or alternatively\
        \ in the body of the form data.\n"
      in: query
      name: cp-domain-key
      type: apiKey

